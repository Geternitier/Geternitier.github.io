<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geternitier的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-16T03:41:44.325Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Geternitier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>习概_内外条件</title>
    <link href="http://example.com/2024/09/04/%E4%B9%A0%E6%A6%82/%E5%86%85%E5%A4%96%E6%9D%A1%E4%BB%B6/"/>
    <id>http://example.com/2024/09/04/%E4%B9%A0%E6%A6%82/%E5%86%85%E5%A4%96%E6%9D%A1%E4%BB%B6/</id>
    <published>2024-09-04T04:00:00.000Z</published>
    <updated>2024-12-16T03:41:44.325Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="内外条件">内外条件</h1><h2 id="国家安全">13. 国家安全</h2><ol type="1"><li><p>国家安全是民族复兴的根基，社会稳定是国家强盛的前提。</p><ul><li>国家安全是中国式现代化行稳致远的重要基础。</li></ul></li><li><p>总体国家安全观是新时代国家安全工作的基本遵循：</p><ul><li>以人民安全为宗旨。</li><li>以政治安全为根本。</li><li>以经济安全为基础。</li><li>以军事、科技、文化、社会安全为保障。</li><li>以促进国家安全为依托。</li></ul></li><li><p>发展和安全的关系：</p><ul><li>发展解决的是动力问题，安全解决的是保障问题。</li><li>发展具有基础性、根本性，是解决安全问题的总钥匙，发展就是最大的安全。</li><li>安全是发展的条件和保障。</li></ul></li><li><p>如何维护政治安全：三个毫不动摇</p><ul><li>毫不动摇坚持党的领导和执政地位。</li><li>毫不动摇坚持和完善中国特色社会主义制度。</li><li>毫不动摇坚持马克思主义在意识形态领域的指导地位。</li></ul><p>政治安全与人民安全、国家利益至上是有机统一的：</p><ul><li>政治安全是维护人民安全和国家利益的根本保证。</li><li>人民安全居于中心地位，国家安全归根结底是保障人民利益。</li><li>国家利益至上是实现政治安全和人民安全的要求和原则。</li></ul></li><li><p>维护重点领域国家安全：国土、经济、社会、网络、人工智能、数据、生物和公共卫生、外部。</p><ul><li>国土安全是立国之基。</li><li>经济安全是国家安全的基础。</li></ul></li><li><p>如何推进国家安全体系和能力现代化：</p><ul><li>健全完善国家安全体系。</li><li>增强维护国家安全能力。</li></ul></li><li><p>如何提高防范化解重大风险能力：</p><ul><li>坚持底线思维和极限思维。</li><li>力争把风险化解在源头。</li><li>运用制度威力应对风险挑战的冲击。</li></ul></li></ol><h2 id="国防">14. 国防</h2><ol type="1"><li>国防和军队建设是捍卫国家主权、安全、发展利益的坚强后盾。<ul><li>强国必须强军，军强才能国安。</li><li>军事实力任何时候都是硬核实力。</li><li>霸权主义、强权政治、冷战思维对世界和平与发展构成巨大威胁。</li></ul></li><li>人民军队使命任务：<ul><li>为巩固中国共产党领导和我国社会主义制度提供战略支撑。</li><li>为捍卫国家主权、统一和领土完整提供战略支撑。</li><li>为维护我国海外利益提供战略支撑。</li><li>为促进世界和平与发展提供战略支撑。</li></ul></li><li>强军目标的科学内涵：<ul><li>听党指挥是灵魂，决定军队建设的政治方向。</li><li>能打胜仗是核心，反映军队的根本职能和军队建设的根本指向。<ul><li>人民军队必须牢固树立战斗力这个唯一的根本的标准，坚持一切建设和工作向能打胜仗聚焦。</li></ul></li><li>作风优良是保证，关系军队的性质、宗旨、本色。</li></ul></li><li>全面推进国防和军队现代化的战略安排：<ul><li>2027年实现建军一百年奋斗目标。</li><li>到2035年基本实现国防和军队现代化。<ul><li>这一步的关键是实现军事理论现代化、军队组织形态现代化、军事人员现代化、武器装备现代化。</li></ul></li><li>到21世纪中叶把人民军队全面建成世界一流军队。</li></ul></li><li>坚持党对人民军队的绝对领导：<ul><li>党对人民军队的绝对领导是建军之本，强军之魂。</li><li>坚持党对人民军队的绝对领导必须有一整套制度作保证：<ul><li>军队最高领导权和指挥权属于党中央、中央军委。</li><li>党委制、政治委员制、政治机关制、支部建在连上。</li></ul></li><li>军委主席负责制在党建设军队的一整套制度体系中处于最高层次、居于统领地位。</li></ul></li><li>坚持政治建军、改革强军、科技强军、人才强军、依法治国：<ul><li>政治建军是人民军队的立军之本。</li><li>改革是决定人民军队发展壮大、制胜未来的关键一招。</li><li>科技是核心战斗力，是军事发展中最活跃、最具革命性的因素。</li><li>强军之道，要在得人。</li><li>依法治军是我们党建军治军基本方式。</li></ul></li><li>练兵备战：<ul><li>牢固树立战斗力这个唯一的根本的标准。</li><li>深入推进实战化军事训练，</li><li>创新军事战略指导。</li><li>大力培育“一不怕苦，二不怕死”的战斗精神。</li></ul></li><li>巩固提高一体化国家战略体系和能力：<ul><li>关键是要在一体化上下功夫。</li><li>军政军民团结是重要政治保障。</li></ul></li></ol><h2 id="国家统一">15. 国家统一</h2><ol type="1"><li><p>“一国两制”是一项基本国策，指在统一的国家内，国家主体实行社会主义制度，个别地区依法实行资本主义制度。</p><ul><li>一国两制是中国共产党领导人民实现祖国和平统一的伟大构想。<ul><li>针对台湾问题提出，先用于香港、澳门问题。</li></ul></li><li>一国两制为国际社会提供了新思路新方案。</li></ul><p>一国两制的根本宗旨是维护国家主权、安全、发展利益。</p><ul><li>全面管治权和高度自治权统一。</li><li>坚持爱国者治港、爱国者治澳、依法治港治澳。</li></ul><p>一国两制的提出首先是为了实现和维护国家统一，任何危害国家主权安全、挑战中央权力和香港特别行政区基本法权威、利用香港对内地进行渗透破坏的活动，都是对底线的触碰，决不允许。</p></li><li><p>实现祖国完全统一是由中华民族伟大复兴的时和势决定的。</p><ul><li><p>中华文明具有突出的统一性，国家统一永远是中国核心利益的核心。</p></li><li><p>台独分裂是祖国统一的最大障碍。</p></li></ul></li><li><p>牢牢把握两岸关系主导权和主动权：</p><ul><li>和平统一、一国两制是最佳方式。</li><li>促进两岸经济文化交流合作，深化各领域融合发展。</li><li>决不承诺放弃使用武力。</li></ul></li></ol><h2 id="外交">16. 外交</h2><ol type="1"><li><p>百年未有之大变局：</p><ul><li>国际力量对比深刻变化。</li><li>新一轮科技革命和产业变革深入发展。</li><li>国际体系和国际秩序深度调整。</li></ul></li><li><p>中国特色大国外交：</p><ul><li>建立在正确历史观、大局观、角色观基础上。</li><li>牢牢把握服务民族复兴、促进人类进步这条主线。</li><li>坚持正确的原则要求。<ul><li>党的领导。</li><li>中国特色社会主义为根本。</li><li>相互尊重、合作共赢为基础。</li><li>公平公正为理念。</li><li>国家核心利益为底线。</li></ul></li></ul></li><li><p>中国外交的宗旨：外交为民。</p><p>周边居于外交全局的首要位置。</p></li><li><p>和平发展道路：</p><ul><li>为什么走和平发展道路：<ul><li>由中国共产党性质宗旨和我国社会主义制度决定。</li><li>基于中国历史文化传统作出的必然选择。</li><li>符合历史潮流、顺应时代大势。</li></ul></li><li>走和平发展道路的政治主张：<ul><li>独立自主的和平外交政策。</li><li>既要通过维护世界和平发展自己，又要通过自身发展维护世界和平。</li></ul></li></ul></li><li><p>推动构建人类命运共同体，是当代中国共产党人回答和解决关乎人类前途命运的时代之问的中国方案，是应对人类共同挑战、建设更加繁荣美好世界的人间正道，也是新时代对外工作的总目标。</p><p>构建人类命运共同体，就是要携手世界各国人民共同建设持久和平、普遍安全、共同繁荣、开放包容、清洁美丽的世界。</p></li><li><p>和平、发展、公平、正义、民主、自由，是全人类的共同价值，也是联合国的崇高目标。</p><ul><li>全人类共同价值与西方普世价值存在区别。</li><li>发展是人类社会永恒的主题。</li><li>安全是发展的前提，是人类最基本最普遍的愿望。</li><li>文明多样性是世界的基本特征，也是人类进步的源泉。</li></ul></li><li><p>要秉持共商共建共享的全球治理观，坚持真正的多边主义，推动全球治理体系朝着更加公平合理的方向发展，积极做全球治理变革进程的参与者、推动者、引领者。</p></li><li><p>一带一路倡议的初心，是以互联互通为主线，同各国加强政策沟通、设施联通、贸易畅通、资金融通、民心相通，为世界经济增长注入新动能，为全球发展开辟新空间，为国际经济合作打造新平台。</p></li></ol><h2 id="治党">17. 治党</h2><ol type="1"><li><p>全面从严治党是党永葆生机活力、走好新的赶考之路的必由之路，是新时代党的建设的鲜明主题。</p><ul><li>加强党的自身建设是新形势下推进伟大事业、进行伟大斗争、实现伟大梦想的必然要求。</li><li>加强党的自身建设是把党锻造成为坚强有力的马克思主义执政党的迫切需要。</li></ul><p>全面从严治党的核心是加强党的领导，基础在全面，关键在严，要害在治。</p><p>全面从严治党的重要经验：六个统一</p><ul><li>坚持思想建党和制度治党相统一。</li><li>坚持使命引领和问题导向相统一。</li><li>坚持抓“关键少数”和管“绝大多数”相统一。</li><li>坚持行使权力和担当责任相统一。</li><li>坚持严格管理和关心信任相统一。</li><li>坚持党内监督和群众监督相统一。</li></ul></li><li><p>党的建设：</p><ul><li>政治建设在首位，首要任务是保证全党服从中央，维护党中央权威和集中统一领导。</li><li>思想建设是基础性建设。</li><li>组织建设：严密党的组织体系是重点；建设高素质专业化干部队伍是关键。</li></ul><p>加强纪律建设是全面从严治党的治本之策。</p><p>制度建设：党内法规是全面从严治党的重要制度支撑；重点解决有规不依、落实不力的问题。</p></li><li><p>腐败是危害党的生命力和战斗力的最大毒瘤，对党的执政基础破坏力最大、杀伤力也最大，是党长期执政面临的最大威胁。反腐败是最彻底的自我革命。</p></li><li><p>勇于自我革命是中国共产党区别于其他政党的显著标志。</p><ul><li>勇于自我革命的重要途径：自我净化、自我完善、自我革新、自我提高。</li></ul><p>中国共产党的百年奋斗史就是一部伟大自我革命和伟大社会革命相互促进的历史。</p><p>以伟大自我革命引领伟大社会革命是新时代中国特色社会主义发展的显著特点。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="习近平新时代中国特色社会主义理论概论" scheme="http://example.com/categories/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%90%86%E8%AE%BA%E6%A6%82%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>习概_布局安排</title>
    <link href="http://example.com/2024/09/03/%E4%B9%A0%E6%A6%82/%E5%B8%83%E5%B1%80%E5%AE%89%E6%8E%92/"/>
    <id>http://example.com/2024/09/03/%E4%B9%A0%E6%A6%82/%E5%B8%83%E5%B1%80%E5%AE%89%E6%8E%92/</id>
    <published>2024-09-03T04:00:00.000Z</published>
    <updated>2024-12-16T03:32:10.642Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="布局安排">布局安排</h1><h2 id="经济">6. 经济</h2><p>新发展理念、新发展格局、社会主义基本经济制度、现代化经济体系、乡村振兴</p><h3 id="新发展理念">新发展理念</h3><ol type="1"><li><p>我国经济进入新发展阶段：</p><ul><li>“三期叠加”：我国当前经济发展正处于增长速度换挡期、结构调整阵痛期、前期刺激政策消化期叠加的阶段，进入了新常态。</li><li>我国经济已由高速增产阶段转向高质量发展阶段。</li></ul></li><li><p>新发展理念：创新、协调、绿色、开放、共享。</p><ul><li><p>创新是引领发展的第一动力。</p></li><li><p>协调是持续健康发展的内在要求。</p></li><li><p>绿色是永续发展的必要条件和人民对美好生活追求的重要体现。</p></li><li><p>开放是国家繁荣发展的必要之路。</p></li><li><p>共享是中国特色社会主义的本质要求。</p></li><li><p>怎样贯彻新发展理念：从根本宗旨上、问题导向上、忧患意识上把握新发展理念。</p></li></ul></li><li><p>高质量发展是体现新发展理念的发展。</p><ul><li>高质量发展是全面建设社会主义现代化国家的首要要求，是遵循经济规律发展的必然要求。</li><li>高质量发展的含义：<ul><li>能够很好满足人民日益增长的美好生活需要的发展。</li><li>体现新发展理念的发展。</li><li>从有没有转向好不好的发展。</li></ul></li><li>高质量发展的重大战略意义：<ul><li>为全面建设社会主义现代化国家提供更为坚实的物质基础。</li><li>是不断满足人民对美好生活需要的重要保证。</li><li>是维护国家长治久安的必然要求。</li></ul></li><li>高质量发展的战略导向：<ul><li>一方面，要更好统筹质的有效提升和量的合理增长。</li><li>另一方面，要保持经济社会发展稳定性坚持稳中求进工作总基调。</li></ul></li><li>高质量发展的历史性成就：我国进入创新型国家行列。</li></ul></li><li><p>高质量发展的相关论点：</p><ul><li>加快实现高水平科技自立自强，是推动高质量发展的必由之路。</li><li>加快构建新发展格局，是推动高质量发展的战略基点。</li><li>农业强国是社会主义现代化强国的根基，推进农业现代化是高质量发展的必然要求。</li><li>人民幸福安康市推动高质量发展的最终目的。</li></ul></li><li><p>发展新质生产力是推动高质量发展的内在要求和重要着力点。</p></li><li><p>新发展格局：以国内大循环为主体、国内国际双循环相互促进。</p><ul><li><p>原因：</p><ul><li><p>国际政治经济形势剧变下，必须进一步把发展立足点放在国内，更多依靠国内市场实现经济发展。</p></li><li><p>党提出构建新发展格局，是对我国客观经济规律和发展趋势的自觉把握。</p></li></ul></li><li><p>新发展格局是开放的国内国际双循环，不是国内单循环，更不是各地小循环。</p></li><li><p>如何构建新发展格局：</p><ul><li><p>具备强大的国内经济循环体系和稳固的基本盘。</p></li><li><p>发挥比较优势，以国内大循环吸引全球资源要素。</p></li><li><p>保证经济循环畅通无阻，生产、分配、流通、消费各环节有机衔接。</p></li><li><p>构建新发展格局的举措：</p><ul><li><p>推动实施扩大内需战略同深化供给侧结构性改革有机结合。</p></li><li><p>发展实体经济。</p></li><li><p>加快科技自立自强。</p></li><li><p>推动产业链供应链优化升级。</p></li></ul></li></ul></li></ul></li></ol><h3 id="经济制度">经济制度</h3><ol type="1"><li><p>社会主义基本经济制度：公有制为主体、多种所有制共同发展，按劳分配为主体、多种分配方式并存，社会主义市场经济体制等。</p><ul><li><p>社会主义基本经济制度的新概括包含了所有制、分配制、资源配置体制等方面。</p><ul><li><p>所有制结构是基本经济制度的基础，决定分配方式和资源配置方式。</p></li><li><p>合理有效的分配方式和资源配置方式有利于进一步完善所有制结构。</p></li><li><p>这三个方面是经济制度体系中具有长期性和稳定性的部分，起着规范方向的作用，对经济制度属性和经济发展方式有决定性影响，是新时代推动经济高质量发展的制度支撑。</p></li></ul></li></ul></li><li><p>所有制：两个毫不动摇</p><ul><li><p>公有制经济和非公有制经济都是社会主义市场经济的重要组成部分，都是我国经济社会发展的重要基础。要毫不动摇巩固和发展公有制经济，毫不动摇鼓励、支持、引导非公有制经济发展。</p></li><li><p>公有制经济包括国有经济和集体经济、混合所有制经济中的国有成分和集体成分。</p><ul><li>国有企业是中国特色社会主义的重要物质基础和政治基础，是我们党执政兴国的重要支柱和依靠力量。</li></ul></li><li><p>非公有制经济包括个体经济、私营经济、港澳台投资经济、外商投资经济以及混合所有制经济中的非国有成分和非集体成分。</p><ul><li>非公有制经济是社会主义市场经济的重要组成部分，是稳定经济的重要基础，是国家税收的重要来源，是就业创业的重要领域，是技术创新的重要主体，是金融发展的重要依托，是经济持续发展的重要力量。</li><li>民营经济是非公有制经济的主要经济组织形式，是推进中国式现代化的主力军，是高质量发展的重要基础，是推动我国全面建成社会主义现代化强国、实现第二个百年奋斗目标的重要力量。</li></ul></li></ul></li><li><p>分配制：按劳分配为主体、多种分配方式并存。</p><ul><li>所有制决定分配制。</li><li>分配制是促进共同富裕的基础性制度。<ul><li>发挥初次分配的基础性作用。</li><li>发挥再分配的调节作用。</li><li>建立健全第三次分配机制，引导公益慈善事业。</li></ul></li></ul></li><li><p>构建高水平社会主义社会主义市场经济体制，关键是要处理好政府和市场的关系。</p><ul><li>把市场能有效调节的经济活动交给市场。</li><li>政府管好那些市场管不了或管不好的事情。</li></ul></li><li><p>建设现代化产业体系：</p><ul><li>巩固优势产业领先地位。保持优势产业的领先地位是支撑我国国际竞争力的基石。</li><li>大力发展战略性新兴产业。战略性新兴产业是引领国家未来产业发展的决定性力量。</li><li>构建优势高效的服务业新体系。现代服务业是现代产业体系的重要支撑。</li><li>发展现代流通产业。</li><li>加快发展数字经济。数字化是新的时代特征。</li><li>构建现代化基础设施体系。基础设施是经济社会发展的重要支撑。</li></ul></li><li><p>全面建设社会主义现代化强国，最艰巨繁重的任务仍然在农村，最广泛最深厚的基础依然在农村。</p></li><li><p>全面推进乡村振兴：</p><ul><li>总目标：农业农村现代化。</li><li>总方针：农业农村优先发展。</li><li>总要求：产业兴旺、生态宜居、乡风文明、治理有效、生活富裕。</li><li>具体举措：头等大事是保障粮食和重要农产品稳定安全供给。</li></ul></li><li><p>区域协调发展是贯彻新发展理念的重要内容，也是实现高质量发展的必然要求。</p></li></ol><h2 id="科教">7. 科教</h2><ol type="1"><li><p>教育、科技、人才是全面建设社会主义现代化国家的基础性、战略性支撑。</p><ul><li><p>全面建设社会主义现代化国家，教育是根本，科技是关键，人才是基础。</p></li><li><p>必须坚持科技是第一生产力，人才是第一资源，创新是第一动力。</p></li><li><p>坚持教育优先发展、科技自立自强、人才引领驱动，加快教育强国、科技强国、人才强国。</p><ul><li><p>教育优先发展重在夯实人力资源深度开发基础。</p></li><li><p>科技自立自强重在坚持独立自主开拓创新。</p></li><li><p>人才引领驱动重在巩固发展优势赢得竞争主动。</p></li><li><p>我国已建成世界上规模最大的教育体系，进入创新型国家行列，发展成为全球规模最宏大、门类最齐全的人才资源大国。</p></li></ul></li></ul></li><li><p>科教兴国战略，就是要全面落实科学技术是第一生产力的思想。</p><ul><li>科教兴国是我国的基本国策。</li></ul><p>创新驱动发展战略，就是要坚持创新是第一动力，</p><ul><li>创新在国家发展全局中居于核心位置。</li></ul><p>人才强国战略，就是要牢固树立人才资源是第一资源的理念。</p></li><li><p>建设教育强国是全面建成社会主义现代化强国的战略先导，是实现高水平科技自立自强的重要支撑，是促进全体人民共同富裕的有效途径，是以中国式现代化全面推进中华民族伟大复兴的基础工程：</p><ul><li>必须坚持教育为人民服务，为党治国理政服务。</li><li>坚持党对教育方针的全面领导是办好教育的根本保证。</li><li>坚持根据中国国情办教育。</li></ul><p>落实立德树人根本任务，必须着力解决好培养什么人、怎样培养人、为谁培养人的问题，这是教育的根本问题，也是建设教育强国的核心课题。</p><ul><li>培养什么人：社会主义建设者和接班人。</li><li>怎样培养人：系统思维，整体规划各个环节，整合各种资源，统筹多方力量。</li></ul></li><li><p>办好人民满意的教育：</p><ul><li>大力促进教育公平。</li><li>加快建设高质量教育体系。</li><li>提升教育服务经济社会发展能力。</li><li>坚持深化教育改革创新。</li><li>坚持把教师队伍建设作为基础工作。</li></ul></li><li><p>自主创新，就是从增强国家创新能力出发，加强原始创新、集成创新和开放创新，确保国家拥有自主可控的科技创新能力。</p><ul><li><p>抓住了自主创新，就抓住了科学技术发展的战略基点，抓住了结构调整和增长方式改变的中心环节，抓住了把握战略机遇期、实现经济长期稳定较快发展的关键。</p></li><li><p>我国面临的很多卡脖子问题，根子是基础理论研究跟不上。</p></li></ul></li><li><p>人才是人力资源中能力和素质较高的劳动者，在国家发展中具有重要战略地位，已经成为推动社会发展最活跃、最积极的因素。</p></li><li><p>做好人才工作：</p><ul><li>根本保证：坚持党对人才工作的全面领导。</li><li>重要保障：坚持深化人才发展体制机制改革。</li><li>社会条件：坚持营造识才爱才敬才用才的环境。</li></ul></li></ol><h2 id="民主">8. 民主</h2><ol type="1"><li><p>全过程人民民主是社会主义民主政治的本质属性。</p><ul><li>实现了过程民主和成果民主、程序民主和实质民主、直接民主和间接民主、人民民主和国家意志相统一。</li><li>全过程人民民主是最广泛、最真实、最管用的民主。</li><li>人民代表大会制度是实现全过程人民民主的重要载体。</li></ul></li><li><p>中国特色社会主义政治制度是中国共产党带领人民在革命、建设、改革的长期实践中形成的，集中体现了我国人民民主的本质属性，是保证人民当家做主科学有效的制度安排。</p><p>中国特色社会主义政治制度构成：根本政治制度、基本政治制度、重要政治制度等。</p><p>党的领导是人民当家做主和依法治国的根本保证，人民当家做主是社会主义民主政治的本质特征，依法治国是党领导人民治理国家的基本方式。</p></li><li><p>人民代表大会制度是我国的根本政治制度。</p><ul><li>是符合我国国情与实际、体现社会主义国家性质、保证人民当家做主、保障实现中华民族伟大复兴的好制度，是我们党在人类政治制度史上的伟大创造。</li></ul><p>中国共产党领导的多党合作和政治协商制度、民族区域自治制度以及基层群众自治制度构成了我国的基本政治制度。</p><ul><li>中国人民政治协商会议是实行中国共产党领导的多党合作和政治协商制度的重要机构。</li><li>民族区域自治制度是中国特色解决民族问题的正确道路的重要内容和制度保障。</li><li>基层群众自治制度是社会主义民主政治建设的基础。<ul><li>要实现人民自我管理、自我服务、自我教育、自我监督。</li></ul></li></ul></li><li><p>协商民主：在决策前和决策实施中开展广泛协商。</p><ul><li>保证和支持人民当家做主，通过依法选举、让人民代表来参与国家生活和社会生活的管理是十分重要的，通过选举以外的制度和方式让人民参与国家生活和社会生活的管理也是十分重要的。</li><li>政党协商、人大协商、政府协商、政协协商、人民团体协商、基层协商、社会组织协商。</li></ul></li><li><p>基层民主的形式：村民委员会、居民委员会等。</p><p>发展基层民主，是实现人民有效政治参与的重要渠道，是人民当家做主的有效途径，是社会主义民主最广泛的实践。</p></li><li><p>爱国统一战线：</p><ul><li>统战工作的本质要求是大团结大联合，解决的就是人心和力量问题。</li><li>统战工作的关键是要坚持求同存异。</li><li>统战是为了壮大共同奋斗的力量。</li><li>坚持党的领导是统战最根本最核心的问题。</li></ul></li><li><p>民族团结是我国各族人民的生命线，中华民族共同体意识是民族团结之本。</p><ul><li>对中华民族形成起决定作用的是对中华民族共同体的认可。</li><li>宗教工作本质上是群众工作。</li></ul></li><li><p>海外儿女大团结：</p><ul><li>高举爱国主义、社会主义旗帜。</li><li>抓好重点领域统战工作。</li><li>辩证把握四方面关系：<ul><li>固守圆心和扩大共识。</li><li>潜绩和显绩。</li><li>原则性和灵活性。</li><li>团结和斗争。</li></ul></li></ul></li></ol><h2 id="法治">9. 法治</h2><ol type="1"><li><p>法律是治国理政最大最重要的规矩。</p><p>党的十八大以来，全面依法治国总体格局基本形成。</p></li><li><p>全面依法治国是坚持和发展中国特色社会主义的本质要求和重要保障。</p></li><li><p>全面依法治国的唯一正确道路是中国特色社会主义法治道路。</p><ul><li><p>核心要义：坚持党的领导，坚持中国特色社会主义制度，贯彻中国特色社会主义法治理论。</p><ul><li>党的领导是社会主义法治的根本保证。</li><li>中国特色社会主义制度是中国特色社会主义法治体系的根本制度基础，是全面推进依法治国的根本制度保障。</li><li>中国特色社会主义法治理论是全面推进依法治国的行动指南。</li></ul></li><li><p>中国特色社会主义法治道路的基本原则：</p><ul><li>坚持中国共产党领导。</li><li>坚持以人民为中心。</li><li>坚持法律面前人人平等。</li><li>坚持依法治国和以德治国相结合。</li><li>坚持从中国实际出发。</li></ul></li><li><p>全面依法治国的重大关系：</p><ul><li><p>政治和法治的关系：</p><p>党和法的关系是政治和法治关系的集中反映，是全面依法治国的一个根本问题。</p><p>党的领导和社会主义法治是一致的，社会主义法制必须坚持党的领导，党的领导必须依靠社会主义法治。</p></li><li><p>改革和法治的关系：</p><p>法治下改革，改革中完善法治。深化改革离不开法律规范，法治建设紧跟改革开放步伐。</p></li><li><p>依法治国和以德治国的关系：</p><p>既重视发挥法律的规范作用，又重视发挥道德的教化作用，以法治体系道德理念、强化法律对道德建设的促进作用，以道德滋养法治精神、强化道德对法治文化的支撑作用。</p></li><li><p>依法治国和依规治党的关系。</p></li></ul></li><li><p>全面推进依法治国的总抓手是建设中国特色社会主义法治体系。</p></li></ul></li><li><p>宪法是国家的根本法，是治国安邦的总章程，是党和人民意志的体现，是国家各种制度和法律法规的总依据，具有最高的法律地位、法律权威、法律效力。</p><ul><li>坚持依宪治国、依宪执政要求：必须坚持党的领导和国体、政体不动摇；必须全面贯彻实施宪法。</li></ul></li><li><p>建设法治中国的总目标：</p><p>实现法律规范科学完备统一，执法司法公正高效权威，权力运行受到有效制约监督，人民合法权益得到充分尊重保障，法治信仰普遍确立，法治国家、法治政府、法治社会全面建成。</p><ul><li>到2025年，中国特色社会主义法治体系初步形成。</li><li>到2035年，法治国家、法治政府、法治社会基本建成，中国特色社会主义法治体系基本形成，人民平等参与、平等发展权利得到充分保障，国家治理体系和治理能力现代化基本实现。</li></ul></li><li><p>法治中国建设的工作布局：</p><ul><li>坚持依法治国、依法执政、依法行政共同推进。</li><li>坚持法治国家、法治政府、法治社会一体建设。<ul><li>法治国家是法治建设的目标。</li><li>法治政府建设是全面依法治国的重点任务和主体工程。</li><li>法治社会是构筑法治国家的基础。</li></ul></li><li>坚持统筹推进国内法治和涉外法治。</li></ul></li><li><p>建设更高水平法治中国的四个方面：</p><ul><li>完善以宪法为核心的中国特色社会主义法律体系。</li><li>扎实推进依法行政。</li><li>严格公正司法。</li><li>加快建设法治社会。</li></ul></li></ol><h2 id="文化">10. 文化</h2><ol type="1"><li><p>文化是一个国家、一个民族的灵魂。文化繁荣兴盛是实现中华民族伟大复兴的必然要求：</p><ul><li>文化繁荣兴盛是实现中华民族伟大复兴的精神支撑。</li><li>文化繁荣兴盛是建设社会主义现代化强国的应有之义。</li><li>文化繁荣兴盛是满足人民日益增长的美好生活需要的内在要求。</li><li>文化繁荣兴盛是在世界文化激荡中站稳脚跟的前提基础。</li></ul><p>建设社会主义文化强国、推动社会主义文化繁荣兴盛，关键在于坚定中国特色社会主义文化自信。</p><ul><li>文化自信的依据和来源：<ul><li>深厚基础：中华优秀传统文化。</li><li>坚强基石：党在带领人民在伟大斗争中孕育的革命文化和社会主义先进文化。</li><li>现实基础：中国特色社会主义伟大实践。</li></ul></li></ul><p>中国特色社会主义文化发展道路：</p><ul><li>坚持为人民服务、为社会主义服务的根本方向，是决定社会主义文化事业前途命运的关键。</li><li>坚持百花齐放、百家齐鸣，是繁荣发展社会主义文化的重要方针。</li><li>激发全民族文化创新创造活力。<ul><li>创新创造是文化的生命所在，是文化的本质特征。</li></ul></li></ul></li><li><p>建设具有强大凝聚力和引领力的社会主义意识形态：</p><ul><li>为什么要坚持马克思主义在意识形态领域指导地位的根本制度：<ul><li>这是历史的结论。</li><li>这是坚持和巩固我国社会主义制度、保证我国文化建设正确方向的必然要求。</li></ul></li><li>如何大力加强马克思主义理论建设：<ul><li>坚持用马克思主义，特别是中国化时代化的马克思主义武装全党、教育人民、指导实践。</li><li>深化马克思主义理论研究和建设。</li><li>加快构建中国特色哲学社会科学，坚持以马克思主义为指导，是当代中国哲学社会科学区别于其他哲学社会科学的根本标志。</li></ul></li><li>积极塑造主流舆论新格局：<ul><li>坚持正确的政治方向。<ul><li>党性原则是新闻舆论工作的根本原则。</li><li>坚持党性原则最根本的是坚持党对新闻舆论工作的领导。</li></ul></li><li>做大做强主流舆论阵地。</li><li>管好用好互联网是关键。<ul><li>互联网是意识形态工作的主阵地、主战场、最前沿。</li></ul></li></ul></li></ul></li><li><p>如何传承中华优秀传统文化：</p><ul><li>深刻把握中华文明的突出特性：连续性、创新性、统一性、包容性、和平性。</li><li>推动中华优秀传统文化创造性转化、创新性发展。</li><li>保护好、传承好文化遗产。</li></ul></li><li><p>繁荣发展文化事业和文化产业，是满足人民精神文化需求、保障人民文化权益的基本途径：</p><ul><li>把为人民服务作为文艺工作者的天职。<ul><li>中国精神是社会主义文艺的灵魂。</li></ul></li><li>文化产业在促进国民经济发展、满足人民文化需求等方面发挥着重要作用。<ul><li>衡量文化产业发展质量和水平，最重要的不是看经济效益，而是看能不能提供更多既能满足人民文化需求、又能增强人民精神力量的文化产品。</li></ul></li></ul></li><li><p>文化软实力集中体现了一个国家基于文化而具有的凝聚力和生命力，以及由此产生的吸引力和影响力。</p><ul><li>一个国家的文化软实力，根本上取决于其核心价值观的生命力、凝聚力、感召力。</li><li>讲好中国故事、传播好中国声音，根本在于传播理念，以我为主，以理服人，以情动人。</li></ul></li></ol><h2 id="民生">11. 民生</h2><ol type="1"><li><p>全面建设社会主义现代化国家，出发点和落脚点是让人民生活越过越好。</p><p>增进民生福祉是发展的根本目的。</p><ul><li>增进民生福祉是坚持立党为公、执政为民的本质要求。</li><li>增进民生福祉是社会主义生产的根本目的。</li><li>增进民生福祉是全面建设社会主义现代化国家的应有之义。</li></ul><p>要坚持在发展中增进民生福祉：</p><ul><li><p>发展是改善民生的物质基础，抓民生也是抓发展。</p></li><li><p>工作思路：坚守底线、突出重点、完善制度、引导预期。</p></li><li><p>重中之重：解决人民群众最关系最直接最现实的利益问题。</p></li><li><p>重要方针：坚持尽力而行、量力而行。</p></li><li><p>重要原则：坚持人人尽责、人人享有，让所有劳动者在推动发展中分享发展成果。</p></li></ul></li><li><p>就业是最基本的民生，是劳动者赖以生存和发展的基础、共享经济发展成果的基本条件，关系到亿万劳动者及其家庭的切身利益。</p></li><li><p>新时代加强社会建设的重要着力点就是健全和完善社会保障体系。</p><ul><li><p>我国基本建成以社会保险为主体、功能完备的社会保障体系，但仍存在不足：</p><p>要完善覆盖全民、统筹城乡、公平统一、安全规范、可持续的多层次社会保障体系。</p></li></ul></li><li><p>加强和创新社会治理，就是要在党的领导下，以政府为主导，以社会多元主体参与为基础，以维护人民群众根本利益为核心，通过合作、对话、协商、沟通等方式，依法对社会事务、社会组织和社会生活进行引导和规范，协调社会矛盾，化解社会矛盾，促进社会公平，推进社会稳定有序发展。</p><p>社会治理体系是进行社会治理的基础，也是提高社会治理效能的保障。</p><ul><li>社会治理理念：共建、共治、共享。<ul><li>共建是基础，共治是关键，共享是目标。</li></ul></li></ul></li></ol><h2 id="生态">12. 生态</h2><ol type="1"><li><p>生态环境是人类生存最为基础的条件，生态文明建设是关系中华民族永续发展的根本大计。</p><p>大自然是人类赖以生存发展的基本条件，尊重自然、顺应自然、保护自然是全面建设社会主义现代化国家的内在要求。</p><p>生态环境问题归根到底是经济发展方式和生活方式问题。</p><p>绿水青山就是金山银山，这是重要的发展理念。</p><ul><li>生态环境保护和经济发展是辩证统一、相辅相成的关系。</li><li>处理好绿水青山和金山银山的关系，关键在人，关键在思路。</li></ul><p>生态文明建设是重大经济问题，也是关系党的使命宗旨的重大政治问题、关系民生福祉的重大社会问题，我国开展的一系列工作：</p><ul><li>生态文明建设战略地位更加凸显。</li><li>生态文明制度体系更加健全。</li><li>污染防治和生态保护更加有力。</li></ul></li><li><p>绿色发展，就其要义来讲，是要解决好人与自然和谐共生问题。</p><p>要加快推动发展方式绿色低碳转型，坚持把绿色低碳发展作为解决生态环境问题的治本之策。</p><ul><li>生态环境问题，归根到底是资源过度开发、粗放利用、奢侈浪费造成的。</li><li>要处理好双碳承诺和自主行动的关系，目标确定，但是路径、节奏是自主的。</li></ul></li><li><p>用最严格制度最严密法治保护生态环境：</p><ul><li>实行最严格的生态环境保护制度。</li><li>全面建立资源高效利用制度。</li><li>严明生态环境保护责任制度。</li></ul></li><li><p>如何共建清洁美丽世界：</p><ul><li>坚持以人为本。</li><li>坚持科学治理。</li><li>坚持多边主义。</li><li>坚持共同但有区别的责任原则。</li></ul></li><li><p>如何推动全球可持续发展：</p><ul><li>积极参与全球气候治理。</li><li>积极推进全球生物多样性治理。</li><li>积极打造绿色一带一路。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="习近平新时代中国特色社会主义理论概论" scheme="http://example.com/categories/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%90%86%E8%AE%BA%E6%A6%82%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>习概_基本问题</title>
    <link href="http://example.com/2024/09/02/%E4%B9%A0%E6%A6%82/%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/09/02/%E4%B9%A0%E6%A6%82/%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/</id>
    <published>2024-09-02T04:00:00.000Z</published>
    <updated>2024-12-16T03:31:18.853Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="基本问题">基本问题</h1><h2 id="中国特色社会主义">1. 中国特色社会主义</h2><h3 id="方向决定道路道路决定命运">方向决定道路，道路决定命运</h3><ol type="1"><li><p>一个国家实行什么样的主义，关键要看这个主义能否解决这个国家面临的历史性课题。</p><ul><li>中国特色社会主义具有广泛的现实基础，是历史的结论、人民的选择。</li><li>中国特色社会主义既坚持了科学社会主义基本原则，又根据时代条件赋予其鲜明的中国特色。</li></ul></li><li><p>四个自信：道路自信、理论自信、制度自信、文化自信</p><ul><li><p>改革开放以来我们取得一切成绩和进步的根本原因，归结起来就是开辟了中国特色社会主义道路，形成了中国特色社会主义理论体系，确立了中国特色社会主义制度，发展了中国特色社会主义文化。</p><ul><li>中国特色社会主义道路是实现途径，理论体系是行动指南，制度是根本保障，文化是精神力量，四者统一于中国特色社会主义伟大实践。</li></ul></li><li><p>四个自信来源于实践、来源于人民、来源于真理。</p></li><li><p>四个自信的坚实根基是深厚的实践基础和人民的广泛参与、深切认同。</p></li><li><p>四个自信的理论支撑和根本依据是社会主义必然代替资本主义的客观规律。</p></li><li><p>四个自信的根基和底气：</p><ul><li>我们有中国共产党的领导，这是中国特色社会主义最本质的特征、中国特色社会主义制度的最大优势。</li><li>我们有新中国成立、改革开放以来特别是党的十八大以来形成的更为完善的制度保证、更为坚实的物质基础、更为主动的精神力量，这是中国特色社会主义独具的发展优势。</li><li>我们有连绵不绝的五千年中华文明，这是中国特色社会主义的文化根脉和突出优势。</li></ul></li><li><p>坚持道路自信、理论自信、制度自信，说到底是要坚持文化自信。文化自信是更基础、更广泛、更深厚的自信，是一个国家、一个民族发展中最基本、最深沉、最持久的力量。</p></li></ul></li></ol><h3 id="中国特色社会主义新时代">中国特色社会主义新时代</h3><ol type="1"><li><p>中国特色社会主义新时代是我国发展新的历史方位，标志着中国特色社会主义事业进入新的发展阶段。</p><ul><li>2012年党的十八大开启了中国特色社会主义新时代。</li><li>主要依据：<ul><li><p>我国社会主要矛盾发生新变化，这是基本依据。</p></li><li><p>党的主要任务发生新变化。</p></li><li><p>中国和世界关系发生新变化。</p></li><li><p>中国特色社会主义新时代的内涵：</p><ul><li>是承前启后、继往开来，在新的历史条件下继续夺取中国特色社会主义伟大胜利的时代。</li><li>是决胜全面建成小康社会，进而全面建设社会主义现代化强国的时代。</li><li>是全国各族人民团结奋斗、不断创造美好生活、逐步实现全体人民共同富裕的时代。</li><li>是全体中华儿女戮力同心、奋力实现中华民族伟大复兴中国梦的时代。</li><li>是我国不断为人类作出更大贡献的时代。</li></ul></li><li><p>重大意义：</p><ul><li><p>第一，从中华民族复兴的历史进程看，意味着近代以来久经磨难的中华民族迎来了从站起来、富起来到强起来的伟大飞跃，迎来了实现中华民族伟大复兴的光明前景。</p></li><li><p>第二，从科学社会主义发展进程看，意味着科学社会主义在21世纪的中国焕发出强大生机活力，在世界上高高举起了中国特色社会主义伟大旗帜。</p></li><li><p>第三，从人类文明进程看，意味着中国特色社会主义道路、理论、制度、文化不断发展，拓展了发展中国家走向现代化的途径，为解决人类问题贡献了中国智慧和中国方案。</p></li></ul></li></ul></li></ul></li><li><p>我国社会主要矛盾变化：人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。</p><ul><li><p>社会主要矛盾变化的依据：</p><ul><li><p>社会生产力水平总体上显著提高。</p></li><li><p>人民生活水平显著提高，对美好生活的向往更加强烈。</p></li><li><p>影响满足人们美好生活需要的因素主要是发展的不平衡不充分问题。</p></li><li><p>两个没有变：我国仍处于并将长期处于社会主义初级阶段的基本国情没有变，我国是世界上最大发展中国家的国际地位没有变。</p></li><li><p>新时代我国社会主要矛盾的变化，反映了社会发展的客观实际，明确了当代解决中国发展主要问题的根本着力点。</p></li></ul></li></ul></li><li><p>全面贯彻党的基本理论、基本路线、基本方略。</p><ul><li>党的基本理论是坚持和发展中国特色社会主义的行动指南。</li><li>党的基本路线是国家的生命线、人民的幸福线。</li><li>党的基本方略反映了党对中国特色社会主义的规律性认识。</li></ul></li><li><p>中国特色社会主义事业布局：“五位一体”总体布局和“四个全面”战略布局</p><ul><li><p>总体布局：经济建设、政治建设、文化建设、社会建设和生态文明建设五位一体，全面推进。</p></li><li><p>战略布局：全面建设社会主义现代化国家、全面深化改革、全面依法治国、全面从严治党。</p><ul><li>全面建设社会主义现代化国家是战略目标，居于引领地位；</li></ul></li><li><p>全面深化改革、全面依法治国、全面从严治党是战略举措，提供重要保障。</p></li></ul></li></ol><h2 id="中国式现代化">2. 中国式现代化</h2><h3 id="中国梦">中国梦</h3><ol type="1"><li><p>实现中华民族伟大复兴的中国梦，本质是国家富强、民族振兴、人民幸福。</p></li><li><p>2021年7月1日，习近平庄严宣告全面建成小康社会。</p><ul><li>伟大意义：<ul><li>践行了党为中国人民谋幸福、为中华民族谋复兴的初心使命。</li><li>第一个百年奋斗目标实现，中华民族实现了从大幅落后于时代到大踏步赶上时代的新跨越。</li><li>极大彰显了中国特色社会主义制度的优势。</li><li>探索了人类解决贫困问题的新路径，为推动人类文件进步作出了重大贡献。</li></ul></li></ul></li><li><p>党的二十大对全面建成社会主义现代化强国的战略安排：</p><ul><li>第一步，从2020年到2035年基本实现社会主义现代化。<ul><li>GDP达到中等发达国家水平。</li><li>实现高水平科技自立自强，进入创新型国家前列。</li><li>建成现代化经济体系，形成新发展格局。</li><li>建成教育、科技、人才、文化、体育、健康强国。</li><li>人的全面发展、全体人民共同富裕取得更为明显的实质性进展。</li><li>广泛形成绿色生产生活方式，生态环境根本好转。</li></ul></li><li>第二步，从2035年到21世纪中叶把我国建成富强民主文明和谐美丽的社会主义现代化强国。<ul><li>全体人民共同富裕基本实现。</li></ul></li></ul></li></ol><h3 id="中国式现代化-1">中国式现代化</h3><ol type="1"><li><p>中国式现代化是党领导人民长期实践的重大成果：</p><ul><li>新民主主义革命为实现现代化创造了根本社会条件。</li><li>社会主义革命和建设为现代化建设奠定了根本政治前提和制度基础，提供了宝贵经验、理论准备和物质基础。</li><li>改革开放和社会主义现代化建设为中国式现代化提供了充满活力的体制保证和快速发展的物质条件。</li><li>新时代提供了更为完善的制度保证、更为坚实的物质基础、更为主动的精神力量。<ul><li>习近平中国特色社会主义思想为中国式现代化提供了根本遵循；</li><li>“五位一体”总体布局和“四个全面”战略布局为中国式现代化提供坚实战略支撑；</li></ul></li></ul></li><li><p>中国式现代化的中国特色：</p><ul><li>人口规模巨大。这是中国式现代化的显著特征。</li><li>全体人民共同富裕。这是区别于西方现代化的显著标志。</li><li>物质文明和精神文明相协调。这是中国式现代化的崇高追求。</li><li>人与自然和谐共生。这是中国式现代化的鲜明特点。</li><li>走和平发展道路。这是中国式现代化的突出特征。</li></ul></li><li><p>中国式现代化的本质要求：坚持中国共产党的领导，坚持中国特色社会主义，实现高质量发展，发展全过程人民民主，丰富人民精神世界，实现全体人民共同富裕促进人与自然和谐共生，推动构建人类命运共同体，创造人类文明新形态。</p><ul><li>为什么要强调党在中国式现代化建设中的领导地位：<ul><li>党的领导决定中国式现代化的根本性质。</li><li>党的领导确保中国式现代化锚定奋斗目标行稳致远。</li><li>党的领导激发建设中国式现代化的强劲动力。</li><li>党的领导凝聚建设中国式现代化的磅礴力量。</li></ul></li></ul></li><li><p>中国式现代化创造了人类文明新形态：</p><ul><li>提供了一种全新的现代化模式，是对西方现代化理论和实践的重大超越，为广大发展中国家提供了全新选择。</li></ul></li><li><p>推行中国式现代化的重大原则：</p><ul><li>坚持和加强党的全面领导</li><li>坚持中国特色社会主义道路</li><li>坚持以人民为中心的发展思想</li><li>坚持深化改革开放</li><li>坚持发扬斗争精神</li></ul></li><li><p>推行中国式现代化需要正确处理的关系：</p><ul><li>顶层设计与实践探索。</li><li>战略与策略。</li><li>守正与创新。</li><li>效率与公平。</li><li>活力与秩序。</li><li>自立自强与对外开放。</li></ul></li><li><p>推进中国式现代化必须团结奋斗：</p><ul><li>团结奋斗是中国共产党和中国人民最显著的精神标识，是中国人民创造历史伟业的必由之路。</li><li>中华民族是有着伟大团结奋斗精神的民族，团结奋斗的价值理念深深融入并影响着中国人的精神世界。</li><li>中国式现代化是一项伟大而艰巨的任务。</li></ul></li></ol><h2 id="坚持党的全面领导">3. 坚持党的全面领导</h2><ol type="1"><li>中国最大的国情就是中国共产党的领导：<ul><li>中国共产党的领导是在历史奋斗中形成的。</li><li>中国共产党的领导是人民当家做主的可靠保障。</li><li>中国共产党的领导关系中国特色社会主义的性质、方向和命运。</li><li>中国共产党的领导是实现中华民族伟大复兴的根本保证。</li></ul></li><li>为什么中国共产党是最高政治领导力量：<ul><li>中国共产党得到最广大人民群众的支持和拥护。</li><li>由我国国家性质和政治制度体系决定。</li><li>由中华民族伟大复兴事业决定。</li></ul></li><li>中国共产党的领导是全面的、系统的、整体的。</li><li>如何维护党的中央权威和集中统一领导：<ul><li>坚决贯彻党的理论、路线方针政策和党中央决策部署。</li><li>最关键的是坚决维护习近平同志党中央的核心、全党的核心地位。</li><li>维护党中央权威和集中统一领导，同坚持党的民主集中制是完全一致的。</li></ul></li><li>中国共产党的领导是国家治理体系的核心，党的领导制度是中国特色社会主义制度建设的关键。<ul><li>党的领导制度是中国特色社会主义制度的核心，是国家治理体系和治理能力现代化的关键。</li><li>如何健全党的全面领导制度：<ul><li>完善党在各种组织发挥领导作用的制度。</li><li>完善党协调各方的机制。</li><li>完善党领导各项事业的具体制度。</li></ul></li><li>1948年初，毛泽东为中共中央起草《关于建立报告制度》的党内指示，推动建立健全全党全军向党中央报告工作的制度，加强了党中央对重大工作的领导。</li></ul></li><li>中国共产党的领导是中国特色社会主义制度的最大优势：<ul><li>中国共产党以马克思主义为行动指南，在实践中不断推进马克思主义中国化时代化，为坚持和完善中国特色社会主义制度提供强大理论优势。</li><li>中国共产党的自身优势是中国特色社会主义制度优势的主要来源。</li><li>中国共产党能够集中全党力量、凝聚全民族共同意志，在各项事业中发挥总揽全局、协调各方的作用，确保中国特色社会主义制度的显著优势充分彰显。</li></ul></li></ol><h2 id="坚持以人民为中心">4. 坚持以人民为中心</h2><ol type="1"><li><p>坚持以人民为中心，是新时代坚持和发展中国特色社会主义的根本立场，是贯穿党治国理政全部活动的一条红线。</p><ul><li>党和国家事业取得历史性成就、发生历史性变革，根本原因就在于我们党始终坚守了为中国人民谋幸福、为中华民族谋复兴的初心和使命。</li></ul></li><li><p>人民立场是中国共产党的根本政治立场，这是我们党区别于其他政党的显著标志。</p><ul><li>坚持人民立场，就要始终牢记党的初心和使命。</li><li>坚持人民立场，就要始终保持党同人民群众的血肉联系。</li><li>坚持人民立场，就要热爱人民、尊重人民、敬畏人民。</li></ul></li><li><p>坚持人民至上是新时代党治国理政的根本价值取向。</p><ul><li><p>人民是党的工作的最高裁决者和最终评判者。</p></li><li><p>党永远要依靠人民创造新的历史伟业。</p><ul><li><p>必须尊重人民主体地位：中国共产党之所以能发展壮大，中国特色社会主义之所以能不断前进，正是因为依靠了人民。</p></li><li><p>必须尊重人民首创精神：正是因为充分尊重人民首创精神，最大程度激发人民的创造热情，党的事业才能保持与时俱进的活力。</p></li></ul></li></ul></li><li><p>群众路线是党始终坚持的根本工作方法，是党的生命线和根本工作路线。</p><ul><li>调查研究是贯彻群众路线的有效途径。</li></ul></li><li><p>共同富裕是中国特色社会主义的本质要求，是中国式现代化的重要特征。</p><ul><li>实现共同富裕是关系党的执政基础的重大政治问题。<ul><li>首先通过全国人民共同的奋斗把蛋糕做大做好，然后通过合理的制度安排正确处理增长和分配关系，把蛋糕切好分好。</li><li>其次，要从全局角度来把握共同富裕。</li><li>最后，要处理好先富和共富的关系</li></ul></li><li>必须坚持正确的原则和科学的思路。<ul><li>鼓励勤劳创新致富、坚持基本经济制度、尽力而为量力而行、坚持循序渐进的原则。</li></ul></li><li>推动全体人民共同富裕与促进人的全面发展是高度统一的。</li></ul></li></ol><h2 id="全面深化改革开放">5. 全面深化改革开放</h2><h3 id="改革开放">改革开放</h3><ol type="1"><li><p>改革开放是我们前进的重要法宝。</p><ul><li>改革开放是党和人民大踏步赶上时代的重要法宝。</li><li>改革开放是坚持和发展中国特色社会主义的必由之路。</li><li>全面深化改革开放是完成新时代目标任务的必然要求。</li></ul></li><li><p>改革开放是我们党的一次伟大觉醒，孕育了我们党从理论到实践的伟大创造。</p><p>改革开放是中国人民和中华民族发展史上的一次伟大革命，推动了中国特色社会主义事业的伟大飞跃。</p><p>改革开放是当代中国最显著的特征、最壮丽的气象，是决定当代中国命运的关键一招。</p></li><li><p>党的十一届三中全会是划时代的，开启了改革开放和社会主义现代化建设新时期；</p><p>党的十八届三中全会也是划时代的，实现改革从局部探索、破冰完成到系统集成、全面深化的转变，开创了我国改革开放新局面。</p></li><li><p>新时代全面深化改革开放，就其艰巨性、复杂性和系统性来说，是一场深刻的革命。</p><ul><li><p>全面深化改革开放的基本思路：</p><ul><li>必须勇于破除一切不合时宜的思维定势和固有观念。</li><li>必须勇于打破部门利益、行业利益、本位思想。</li><li>必须勇于跳出条条框框限制。</li><li>必须勇于破解我国开放型经济体制建设中的突出问题。</li></ul></li><li><p>全面深化改革开放是一场全面、系统、整体的制度创新：</p><ul><li><p>全面深化改革开放是一场思想理论的深刻变革、改革组织方式的深刻变革、国家制度和治理体系的深刻变革、人民广泛参与的深刻变革。</p></li><li><p>坚持以供给侧结构性改革为主线，加快建设现代化经济体系。</p></li></ul></li></ul></li><li><p>全面深化改革开放的正确方向：</p><ul><li>坚持和改善党的领导、坚持和完善中国特色社会主义制度。</li><li>坚持以人民为中心，促进社会公平正义、增进人民福祉。<ul><li>社会主义改革开放的出发点和落脚点，是为了更好实现和维护人民利益、为了让人民过上好日子。</li></ul></li><li>必须有利于进一步解放思想、进一步解放和发展生产力、进一步解放和增强社会活力。<ul><li>解放思想，是开启改革开放事业的思想前提。</li><li>解放和发展生产力，是改革开放的鲜明特征和首要任务。</li><li>解放和增强社会活力，是社会主义改革的内在要求和基本目的，也是新时代全面深化改革的关键所在。</li><li>三个“进一步”，既是改革的目的，也是改革的条件。</li></ul></li></ul></li></ol><h3 id="统筹推进">统筹推进</h3><ol type="1"><li><p>全面深化改革的总目标：完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化。</p><ul><li><p>改革的根本方向是完善和发展中国特色社会主义制度。</p></li><li><p>改革的鲜明指向和时代要求是推进国家治理体系和治理能力现代化。</p></li><li><p>统筹推进各领域各方面改革开放，必须以全面深化改革总目标为引领，以制度建设为主线，以经济体制改革为重点，以重要领域和关键环节改革为突破口。</p></li></ul></li><li><p>国家治理体系是管理国家的制度体系，国家治理能力是运用国家制度管理社会的能力。</p><ul><li>国家治理体系和能力是一个国家制度和执行能力的集中体现，是相辅相成的。</li><li>怎样推进国家治理体系和治理能力现代化：<ul><li>必须坚定中国特色社会主义制度自信。</li><li>必须更好发挥中国特色社会主义制度自信。</li><li>必须把中国特色社会主义制度优势转化为国家治理效能。</li></ul></li></ul></li><li><p>全面深化改革开放的正确方法论：</p><ul><li>增强全面深化改革的系统性、整体性、协同性。</li><li>加强顶层设计和摸着石头过河相结合。</li><li>统筹改革发展稳定。<ul><li>改革是经济社会发展的强大动力，发展是解决一切经济社会问题的关键，稳定是改革发展的前提。</li></ul></li><li>胆子要大，步子要稳。</li><li>坚持重大改革于法有据。</li></ul></li><li><p>改革开放永无止境。全面深化改革开放，是新时代坚持和发展中国特色社会主义的根本动力。</p><ul><li>改革开放永无止境是社会基本矛盾运动规律的深刻反映。<ul><li>改革开放以来，我国经济社会发展取得重大成就，根本原因就是改革调整生产关系，完善上层建筑，使之适应我国生产力发展的要求，激发我国社会发展的强大活力。</li></ul></li><li>改革开放永无止境是总结世界社会主义实践经验得出的重要结论。</li><li>改革开放永无止境是推进党和人民事业发展的必然要求。</li></ul></li><li><p>开放也是改革。</p><ul><li>开放带来进步，封闭必然落后。</li><li>构建更高水平开放型经济新体制。</li><li>对外政策：坚持经济全球化正确方向，反对保护主义和单边制裁。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="习近平新时代中国特色社会主义理论概论" scheme="http://example.com/categories/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%90%86%E8%AE%BA%E6%A6%82%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>习概_导论</title>
    <link href="http://example.com/2024/09/01/%E4%B9%A0%E6%A6%82/%E5%AF%BC%E8%AE%BA/"/>
    <id>http://example.com/2024/09/01/%E4%B9%A0%E6%A6%82/%E5%AF%BC%E8%AE%BA/</id>
    <published>2024-09-01T04:00:00.000Z</published>
    <updated>2024-12-16T03:30:33.984Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="导论">导论</h1><h2 id="基本内容">基本内容</h2><ol type="1"><li><p>习近平新时代中国特色社会主义思想创立的时代背景：</p><ul><li>世界百年未有之大变局加速演进。</li><li>中华民族伟大复兴进入关键时期。</li><li>中国式现代化全面推进拓展。</li><li>科学社会主义在21世纪的中国焕发新的蓬勃生机。</li><li>中国共产党自我革命开辟新的境界。</li></ul></li><li><p>两个结合是我们党在探索中国特色社会主义道路中得出的规律性认识，是我们成功的最大法宝。</p><ul><li>马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合。</li></ul></li><li><p>习近平新时代中国特色社会主义思想是完整的科学体系：</p><ul><li>科学回答的重大时代课题：<ul><li>新时代坚持和发展怎样的中国特色社会主义。</li><li>建设什么样的社会主义现代化强国。</li><li>建设什么样的长期执政的马克思主义政党。</li></ul></li><li>主体内容：十个明确，集中体现了主要观点和基本精神，发挥统摄作用。</li><li>坚持和发展中国特色社会主义的基本方略：十四个坚持。</li><li>理论与实践成果：十三个方面成就。</li><li>世界观和方法论：六个必须坚持。</li></ul></li><li><p>习近平中国特色社会主义思想的历史地位：</p><ul><li><p>是当代中国马克思主义、21世纪马克思主义，是中华文化和中国精神的时代精华，实现了马克思主义中国化时代化新的飞跃。</p></li><li><p>使魂脉和根脉内在贯通，相互成就，是中华民族的文化主体性最有力的体现，是中华文化和中国精神的时代精华。</p></li><li><p>是全党全国各族人民为实现中华民族伟大复兴而奋斗的行动指南，是新时代党和国家事业发展的根本遵循。</p></li></ul></li><li><p>两个确立：</p><ul><li>确立习近平同志党中央的核心、全党的核心地位。</li><li>确立习近平新时代中国特色社会主义思想的指导地位。</li></ul></li><li><p>两个确立的决定性意义：</p><ul><li>坚强的领导核心和科学的理论指导是关乎党和国家前途命运、党和人民事业成败的根本性问题。</li><li>两个确立对新时代党和国家事业发展、对推进中华民族伟大复兴历史进程具有决定性意义。</li></ul></li></ol><h2 id="六个必须坚持">六个必须坚持</h2><p>必须坚持人民至上、自信自立、守正创新、问题导向、系统观念、胸怀天下。</p><ol type="1"><li>坚持人民至上是根本立场，体现了历史唯物主义群众观。</li><li>坚持自信自立是内在精神特质，体现了客观规律性和主观能动性的有机结合。</li><li>坚持守正创新是鲜明理论品格，体现了变与不变、继承与发展的内在联系。</li><li>坚持问题导向是重要实践要求，体现了矛盾的普遍性和客观性。</li><li>坚持系统观念是基本思想和工作方法，体现了辩证唯物主义普遍联系的原理。</li><li>坚持胸怀天下是中国共产党人的境界格局，体现了马克思主义追求人类进步和解放的崇高理想。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="习近平新时代中国特色社会主义理论概论" scheme="http://example.com/categories/%E4%B9%A0%E8%BF%91%E5%B9%B3%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%90%86%E8%AE%BA%E6%A6%82%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>思想道德与法治总结</title>
    <link href="http://example.com/2024/07/03/%E6%94%BF%E6%B2%BB/%E6%80%9D%E6%83%B3%E9%81%93%E5%BE%B7%E4%B8%8E%E6%B3%95%E6%B2%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/07/03/%E6%94%BF%E6%B2%BB/%E6%80%9D%E6%83%B3%E9%81%93%E5%BE%B7%E4%B8%8E%E6%B3%95%E6%B2%BB%E6%80%BB%E7%BB%93/</id>
    <published>2024-07-03T04:00:00.000Z</published>
    <updated>2024-12-16T03:48:49.162Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="思想道德与法治">思想道德与法治</h1><h2 id="绪论">0. 绪论</h2><ol type="1"><li>时代新人的特征：立大志，明大德，成大才，担大任。</li><li>道德和法律的关系：<ul><li>道德和法律都是调节人们思想行为，协调人际关系，维护社会秩序的重要手段。</li><li>道德和法律调节领域、方式和目标不同，但共同服务于一定的经济基础，组成上层建筑。</li><li>道德建设为法治建设提供思想指引和价值基础，法治建设为道德建设提供制度支持和法律支撑。</li></ul></li><li>思想道德素质指人民的思想境界和道德风貌，法治素养指人民理解和运用法律和法治思维的能力。</li></ol><h2 id="思想">1. 思想</h2><h3 id="人生观">人生观</h3><ol type="1"><li><p>人是一切社会关系的总和，社会属性是人的本质属性。</p></li><li><p>个人与社会的关系问题是认识和处理人生问题的重要着眼点和出发点。</p><ul><li>个人与社会是对立统一的关系。<ul><li>社会由人组成，是人的存在形式。</li><li>社会发展的重要基础是社会成员素质的不断提高。</li><li>社会发展的根本目标是推动和实现人的全面发展。</li></ul></li><li>个人与社会的关系中最根本的是个人利益与社会利益的关系。<ul><li>社会利益是所有人利益的有机统一。</li><li>社会利益是个人的根本利益和长远利益，也是个人利益实现的前提和基础。</li><li>在社会主义社会中，个人利益与社会利益在根本上是一致的。</li></ul></li><li>人的社会性决定了人只有在推动社会进步的过程中，才能实现自我的发展。</li></ul></li><li><p>人生观包括人生目的、人生态度、人生价值。</p><ul><li>人生目的是人生观的核心，决定人生道路、态度和价值选择。</li><li>人生价值包含自我价值和社会价值。<ul><li>自我价值是个体生存发展的必要条件，社会价值是社会存在和发展的重要条件。</li><li>自我价值实现是为社会创造更大价值的前提，社会价值是个体价值的保障。</li></ul></li></ul></li></ol><ul><li>世界观和人生观的关系：世界观决定人生观，人生观对世界观的巩固、发展和变化起重要作用。</li></ul><ol start="4" type="1"><li><p>正确的人生观：</p><ul><li><p>人生目的：服务人民、奉献社会。</p></li><li><p>人生态度：认真务实、乐观向上、积极进取。</p></li><li><p>人生价值：</p><ul><li>评价尺度：实践活动是否符合社会发展的客观规律，是否促进历史进步。<ul><li>在今天，最重要的是看一个人是否用自己的劳动和聪明才智服务人民、奉献社会。</li></ul></li><li>评价方法：<ul><li>既要看贡献大小，也要看尽力程度。</li><li>既要尊重物质贡献，也要尊重精神贡献。</li><li>既要注重社会贡献，也要注重自身完善。</li></ul></li><li>实现条件：从社会客观条件和个体自身条件出发，不断增强实现人生价值的能力和本领。<ul><li>社会实践是实现人生价值的必由之路。</li></ul></li></ul></li></ul></li><li><p>辩证对待人生矛盾：</p><ul><li>幸福观：<ul><li>幸福是总体性范畴，包含生活美好、家庭和睦等重要因素。</li><li>实现幸福离不开一定的物质条件，物质和精神都是幸福的重要方面。</li><li>幸福不能建立在损害社会、他人利益基础上。</li></ul></li><li>得失观：不拘泥于个人利益和一时的得失。</li><li>苦乐观：苦乐对立统一，相互转化。艰苦奋斗往往得到真正的快乐。</li><li>顺逆观：正视战胜逆境，在顺境戒骄戒躁。</li><li>生死观：生命有限，为人民服务无限。</li></ul></li></ol><ul><li>荣辱观：明辨是非。</li></ul><ol start="6" type="1"><li>错误人生观：拜金主义、享乐主义、极端个人主义。</li></ol><h3 id="理想和信念">理想和信念</h3><ol type="1"><li><p>理想指人们在实践中形成的、有实现可能性的、对未来社会和自身发展目标的向往与追求。</p><ul><li><p>理想的分类：个人和社会；近期和远期；崇高和一般；生活、职业、道德、政治理想。</p></li><li><p>理想具有超越性、实践性、时代性。</p></li><li><p>理想和现实的辩证关系：</p><ul><li><p>理想和现实是对立统一的关系。</p></li><li><p>实现理想具有长期性、艰巨性和曲折性，艰苦奋斗是实现理想的重要条件。</p></li></ul></li><li><p>个人理想和社会理想：个人理想以社会理想为指引，社会理想是个人理想的汇聚和升华。</p></li></ul></li><li><p>信念指人们在一定认识基础上确立的对某种思想或事物坚信不疑并身体力行的精神状态。</p><ul><li><p>信念具有执着性、支撑性、多样性。</p></li><li><p>信仰、信念、信心任何时候都至关重要。</p></li></ul></li><li><p>理想和信念总是相互依存的，理想是信念的对象，信念是理想实现的保障。</p></li><li><p>理想信念是精神之钙。</p><ul><li>理想指引方向，信念决定成败。</li><li>理想信念昭示奋斗目标、催生前进动力、提供精神支柱、提高精神境界。</li></ul></li><li><p>马克思主义信仰：</p><ul><li>马克思主义是我们认识和改造世界的强大思想武器。</li><li>马克思主义是科学的理论，揭示了人类社会发展规律。</li><li>马克思主义是人民的理论，创立了人民实现自身解放的思想体系。</li><li>马克思主义是实践的理论，指引人民改造世界。</li><li>马克思主义是不断发展的开放的理论，站在时代前沿。</li></ul><p>马克思主义只有与中国具体实际相结合、同中华优秀传统文化相结合，才能焕发出强大的生命力、创造力和感召力。</p></li><li><p>中国特色社会主义是我们的共同理想的原因：</p><ul><li>中国特色社会主义是科学社会主义。</li><li>中国特色社会主义是实现中国梦的正确道路。</li><li>中国共产党的领导是中国特色社会主义的本质特征。</li></ul></li><li><p>什么是共产主义远大理想：</p><ul><li>共产主义是现实运动和长远目标相统一的过程。</li><li>共产主义远大理想的最终实现是一个漫长艰辛的历史过程。</li></ul></li><li><p>实现中华民族伟大复兴是中华民族近代以来最伟大的梦想。</p><ul><li><p>实现中华民族伟大复兴的中国梦是一项光荣而艰巨的事业。</p></li><li><p>为实现中国梦注入青春能量：</p><ul><li>立鸿鹄志，做奋斗者。</li><li>心怀“国之大者”，敢于担当。</li><li>自觉躬身实践，知行合一。</li></ul></li></ul></li></ol><h3 id="中国精神">中国精神</h3><ol type="1"><li><p>中华民族崇尚精神的优秀传统的表现：</p><ul><li>对物质生活和精神生活相互关系的独到理解。</li><li>对品格养成的重视。</li><li>对理想的不懈追求。</li></ul></li><li><p>中国精神包含伟大的创造、奋斗、团结、梦想精神。</p><ul><li><p>中国精神是凝聚中国力量的精神纽带、激发创新创造的精神动力、推进复兴伟业的精神支柱。</p></li><li><p>中国共产党是中国精神的忠实继承者和坚定弘扬者。</p></li></ul></li><li><p>爱国主义是调节个人与祖国之间关系的道德准则、政治原则和法律规范。</p><ul><li><p>爱什么：祖国的大好河山、自己的骨肉同胞、祖国的灿烂文化、自己的国家。</p></li><li><p>新时代爱国主义的基本要求：</p><ul><li><p>坚持爱国爱党爱社会主义相统一。</p><ul><li>不同历史条件下形成的爱国主义具有不同的内涵和特点。</li><li>当代中国爱国主义的本质就是坚持爱国和爱党、爱社会主义的高度统一。</li></ul></li><li><p>维护祖国统一和民族团结。</p></li><li><p>尊重和传承中华民族历史文化。</p></li><li><p>坚持立足中国又面向世界。</p><ul><li>立足中国，维护国家发展主体性。</li><li>面向世界，推动构建人类命运共同体。</li></ul></li><li><p>爱国的方式：维护和推进祖国统一，促进民族团结，增强国家安全意识。</p></li></ul></li></ul></li><li><p>弘扬以爱国主义为核心的民族精神、以改革创新为核心的时代精神。</p><ul><li>民族精神和时代精神都是中国精神的重要组成部分。</li><li>民族精神赋予中国精神以民族特征，时代精神赋予中国精神以时代内涵。</li><li>民族精神曾是一定历史阶段中的时代精神，时代精神将不断丰富民族精神。</li></ul></li><li><p>改革创新是新时代的迫切要求。</p><ul><li><p>改革创新的意义和作用：</p><ul><li><p>创新是推动人类社会发展的重要力量。</p></li><li><p>创新能力是当今国际竞争新优势的集中体现。</p></li><li><p>改革创新是赢得未来的必然要求。</p></li><li><p>如何改革创新：树立改革创新自觉意识，增强改革创新能力本领。</p><ul><li>实施创新驱动发展战略，最根本的是要增强自主创新能力，最紧迫的是要破除体制机制障碍。</li></ul></li></ul></li></ul></li></ol><h2 id="道德">2. 道德</h2><h3 id="价值观">价值观</h3><ol type="1"><li><p>价值观反映特定时代精神，表现着一定时代人们的需要和利益诉求。</p><ul><li><p>在阶级社会里，占统治地位的价值观都是统治阶级的价值观。</p></li><li><p>核心价值观是国家的重要稳定器，各种文化之争本质上是价值观、意识形态之争。</p></li></ul></li><li><p>社会主义核心价值观：</p><ul><li>基本内容：富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善。<ul><li>富强、民主、文明、和谐：我们要建设怎样的国家。<ul><li>富强是促进社会进步、人的自由全面发展的物质基础。</li><li>民主是社会主义民主，人民当家作主。</li><li>文明是社会进步的重要标志，社会主义现代化国家的重要特征。</li><li>和谐是中华文明的核心价值理念。</li></ul></li><li>自由、平等、公正、法治：我们要建设怎样的社会。<ul><li>自由是社会活力之源，社会主义的价值理想。</li><li>公正是社会主义制度的本质要求。</li><li>法治是现代社会的主要特征。</li></ul></li><li>爱国、敬业、诚信、友善：我们要培育怎样的公民。<ul><li>爱国是最深沉、最持久的情感，是每个公民应当遵循的最基本的价值准则。</li><li>敬业是对待生产劳动和人类生存的一种根本价值态度。</li><li>诚信是个人立身处世的基本价值规范，是社会存续发展的重要价值基石。</li><li>友善是维系良好人际关系和社会关系的基本价值准则。</li></ul></li></ul></li><li>培育和践行社会主义核心价值观是：<ul><li>坚持和发展中国特色社会主义的价值遵循。</li><li>提高国家文化软实力的迫切要求。</li><li>推进社会团结奋进的最大公约数。</li></ul></li><li>社会主义核心价值观的特征：<ul><li>先进性，是反映人类社会发展进步的价值理念。<ul><li>社会主义是社会主义核心价值观的底色。</li><li>中华优秀传统文化是社会主义核心价值观的重要源泉。</li><li>广泛吸收借鉴人类一切文明成果。</li></ul></li><li>人民性是社会主义核心价值观的根本特性，人民立场是社会主义核心价值观的根本立场。<ul><li>为中国人民谋幸福，为中华民族谋复兴，是中国共产党人的初心和使命，也是党领导现代化建设的出发点和落脚点。</li></ul></li><li>真实性。<ul><li>西方的普世价值是一种迷惑、欺骗的价值观。</li><li>共同价值要求同存异、和而不同。</li></ul></li></ul></li><li>青年要勤学、修德、明辨、笃实，遵循社会主义核心价值观。</li></ul></li><li><p>社会主义核心价值体系：马克思主义、中国特色社会主义共同理想、以爱国主义为核心的民族精神、以改革创新为核心的时代精神、社会主义荣辱观。</p><ul><li>社会主义核心价值观是社会主义核心价值体系的精神内核。</li></ul></li></ol><h3 id="道德观">道德观</h3><ol type="1"><li><p>道德的本质是反映社会经济关系的特色意识形态，是社会利益关系的特殊调节方式，是一种实践精神。</p><ul><li><p>道德的特征：历史系、民族性、时代性、阶级性</p></li><li><p>道德的起源：劳动是首要前提，社会关系是客观条件，人的自我意识是主观条件。</p></li><li><p>道德的功能：认识、规范、调节。</p><ul><li>道德的调节方式包括道德评价（主要）、社会舆论、传统习俗、内心信念。</li></ul></li><li><p>道德的作用：</p><ul><li><p>为经济基础的形成、巩固和发展服务。</p></li><li><p>对其他社会意识形态的存在有重大的影响。</p></li><li><p>维护社会的秩序和稳定。</p></li><li><p>提高人的精神境界、促进人的自我完善、推动人的全面发展。</p></li><li><p>阶级斗争的工具。</p></li></ul></li><li><p>道德发展的基本规律：与社会生存方式的发展大体一致，螺旋式上升。</p></li><li><p>为什么人服务，是道德的核心问题。</p></li></ul></li><li><p>社会主义道德反映社会主义经济基础，具有先进性，以为人民服务为核心，以集体主义为原则。</p><ul><li><p>为人民服务</p><ul><li><p>为人民服务是社会主义经济基础和人际关系的客观要求。</p></li><li><p>为人民服务是社会主义市场经济健康发展的要求。</p></li><li><p>为人民服务是先进性和广泛性的统一。</p></li></ul></li><li><p>集体主义</p><ul><li>集体主义是调节社会利益关系的基本原则：<ul><li>国家、社会、个人利益辩证统一。</li><li>国家、社会整体利益高于个人利益。</li><li>重视保障个人利益。</li></ul></li><li>集体主义的层次性：<ul><li>无私奉献、一心为公，这是最高层次。</li><li>先公后私、先人后己。</li><li>顾全大局、遵纪守法、热爱祖国、诚实劳动，这是基本道德要求。</li></ul></li></ul></li></ul></li><li><p>优秀的道德成果：</p><ul><li><p>中华传统美德：</p><ul><li>重视整体利益，强调责任奉献。</li><li>推崇仁爱原则，注重以和为贵。</li><li>注重人伦关系，重视道德义务。</li><li>追求精神境界，向往理想人格。</li><li>强调精神修养，注重道德践履。</li></ul><p>中华传统美德的创造性转化和创新性发展：</p><ul><li>阐发传统美德，用起滋养社会主义道德建设。</li><li>反对复古论和虚无论。</li></ul></li><li><p>中国革命道德：中国传统道德的延续和发展。</p><ul><li>灵魂是为实现社会主义和共产主义的理想信念而奋斗。</li><li>红线是全心全意为人民服务。</li><li>始终把革命利益放在首位。</li><li>树立社会新风，建立新型人际关系。</li><li>修身自律，保持节操。</li></ul><p>中国革命道德的当代价值：</p><ul><li>有利于加强社会主义和共产主义的理想信念。</li><li>有利于培育和践行社会主义核心价值观。</li><li>有利于引导人们树立正确的道德观，培育良好道德风尚。</li></ul></li></ul></li><li><p>借鉴人类文明优秀道德成果：</p><ul><li>每个民族或国家都有各自的道德传统。</li><li>秉承正确态度和科学方法。</li><li>以我为主，为我所用，批判吸收。</li></ul></li><li><p>道德实践：</p><ul><li>遵守社会公德<ul><li>公共生活：（范围）广泛性、（内容）开放性、（对象）复杂性、（方式）多样性<ul><li>有序的公共生活是社会生产活动的重要基础，提高社会成员生活质量的基本保障，社会文明的重要标志。</li></ul></li><li>文明礼貌、助人为乐、爱护公物、保护环境、遵纪守法。</li><li>网络生活：正确使用网络、健康交往、避免沉迷、文明自律</li></ul></li><li>恪守职业道德：爱岗敬业、诚实守信、办事公道、热情服务</li><li>弘扬家庭美德：尊老爱幼、男女平等、夫妻和睦、勤俭持家、邻里互助</li><li>锤炼个人品德：自律、知行合一、积善成德、学思并重<ul><li>正确的道德认知和道德判断。</li><li>正向的道德认同和道德情感。</li><li>强化道德意志和道德信念。</li></ul></li></ul></li><li><p>志愿服务的精神是奉献、友爱、互助、进步。</p></li><li><p>良好的社会风气：知荣辱、讲正气、作奉献、促和谐。</p></li></ol><h2 id="法治">3. 法治</h2><ol type="1"><li><p>法律是由国家制定或认可，并由国家强制力保证实施的，反映由特定社会物质条件决定的统治阶级意志的规范体系。</p></li><li><p>我国社会主义法律的本质特征：</p><ul><li>体现了党的主张和人民意志的统一。</li><li>具有科学性和先进性。</li><li>是中国特色社会主义建设的重要保障。</li></ul></li><li><p>我国社会主义法律的运行：</p><ul><li>法律制定：起始性和关键性环节<ul><li>立法机关：全国人民代表大会及其常务委员会。</li><li>立法原则：公正、公平、公开。</li><li>立法环节：提出、审议、表决、公布。</li></ul></li><li>法律执行：行政执法是法律实施和实现的重要环节。<ul><li>执法机关：中央和地方各级政府、享有执法权的下属机构。</li><li>执法原则：合法性、合理性、信赖保护、效率。</li></ul></li><li>法律适用：<ul><li>司法机关：国家审判机关和检察机关。</li><li>司法原则：司法公正，公民在法律面前一律平等，事实为根据、法律为准绳。</li><li>司法的基本要求：正确、合法、合理、及时。</li></ul></li><li>法律遵守：守法是法律实施和实现的基本途径。</li></ul></li><li><p>习近平法治思想：</p><ul><li>习近平法治思想的意义：<ul><li>凝聚着中国共产党人在法治建设长期探索中形成的经验积累和智慧结晶。</li><li>标志着我们党对共产党执政规律、社会主义建设规律、人类社会发展规律的认识达到了新高度。</li><li>开辟了21世纪马克思主义法治理论和实践的新境界。</li><li>习近平新时代中国特色社会主义思想的重要组成部分。</li><li>全面依法治国的根本遵循和行动指南。</li></ul></li><li>十一个坚持：系统阐述了新时代推进全面依法治国的重要思想和战略部署。<ul><li>坚持党对全面依法治国的领导。</li><li>坚持以人民为中心。</li><li>坚持中国特色社会主义法治道路。</li><li>坚持依宪治国、依宪执政。</li><li>坚持在法治轨道上推进国家治理体系和治理能力现代化。</li><li>坚持建设中国特色社会主义法治体系。</li><li>坚持依法治国、依法执政、依法行政，共同推进法治国家、法治政府、法治社会一体建设。</li><li>坚持全面推进科学立法、严格执法、公正司法、全民守法。</li><li>坚持统筹推进国内法治和涉外法治。</li><li>坚持建设德才兼备的高素质法治工作队伍。</li><li>抓住领导干部这个关键少数。</li></ul></li></ul></li><li><p>中国特色社会主义法治道路的核心要义是要坚持党的领导，坚持中国特色社会主义制度，贯彻中国特色社会主义法治理论。</p><ul><li>为什么走中国特色社会主义法治道路：历史的必然结论，国家性质决定，基本国情的必然选择。</li><li>坚持中国特色社会主义法治道路遵循的原则：<ul><li>坚持中国共产党的领导。</li><li>坚持人民主体地位。</li><li>坚持法律面前人人平等。平等是社会主义法律的基本属性，是社会主义法制的基本要求。</li><li>坚持依法治国与以德治国相结合。</li><li>坚持从中国实际出发。</li></ul></li></ul></li><li><p>全面依法治国的宏伟目标是建设法治中国，要以建设中国特色社会主义法律体系为总抓手，坚持依法治国、依法执政、依法行政共同推进，坚持法治国家、法治政府、法治社会一体建设，坚持全面推进科学立法、严格执法、公正司法、全民守法。</p><ul><li><p>全面依法治国的根本目的是依法保障人民权益。</p></li><li><p>建设中国特色社会主义法律体系：</p><ul><li>完备的法律体系。</li><li>高效的法治实施体系。</li><li>严密的法治监督体系。</li><li>有力的法治保障体系。</li><li>完善的党内法规体系。</li></ul></li><li><p>共同推进法治国家、法治政府、法治社会一体建设：</p><ul><li><p>法治国家是目标，法治政府是重点和主体工程，法治社会是基础。</p></li><li><p>科学立法是全面依法治国的前提。</p></li><li><p>严格执法是全面依法治国的关键。</p></li><li><p>公正司法是全面依法治国的重点。</p></li><li><p>全民守法是全面依法治国的基础。</p></li></ul></li></ul></li><li><p>宪法的地位：</p><ul><li>我国宪法是国家的根本法，是党和人民意志的集中体现。</li><li>我国宪法是国家各项制度和法律法规的总依据。</li><li>我国宪法规定了国家的根本制度。</li><li>宪法是实现国家认同、凝聚社会共识、促进个人发展的基本准则，是维系一个国家、一个民族凝聚力的根本纽带。</li></ul><p>我国宪法的基本原则：</p><ul><li>党的领导</li><li>人民当家作主</li><li>尊重和保障人权</li><li>社会主义法治</li><li>民主集中制</li></ul><p>我国宪法规定的公民权利：</p><ul><li>政治权利：选举、表达、民主管理、监督</li><li>人身权利：生命健康、人身自由、人格尊严、住宅安全、通信自由</li><li>财产权利：私有财产权、继承权</li><li>社会经济权利：劳动权、休息权、社会保障权、物质帮助权</li><li>宗教信仰自由</li><li>文化教育权利</li></ul></li><li><p>法律权利：</p><ul><li>由一定的社会物质生活条件所制约。</li><li>因社会制度和国家法律不同而存在差异。</li><li>受法律维护或保障。</li></ul><p>法律义务：</p><ul><li>履行表现：作为和不作为</li><li>特点：历史的，源于现实需要，依法设定，可能发生变化。</li></ul><p>法律权利和法律义务的关系：</p><ul><li>人既享受法律权利，也承担法律义务。</li><li>法律权利的实现以履行义务为条件。</li><li>法律义务的设定和履行以法律权利的行使为依据。</li><li>有些法律权利和法律义务是复合的。</li></ul><p>依法行使法律权利的限制：</p><ul><li>目的正当性</li><li>必要限度</li><li>方式法定性</li><li>正当程序</li></ul><p>法律义务的内容：</p><ul><li>维护国家统一、民族团结</li><li>遵守宪法和法律</li><li>维护祖国安全、荣誉和利益</li><li>依法服兵役</li><li>依法纳税</li></ul></li><li><p>法治素养：</p><ul><li>尊重法律权威</li><li>学习法律知识：提升法治素养的前提<ul><li>收听收看法治节目、阅读法律报刊、运用新媒体学习法律知识</li><li>法治实践：参与立法讨论、旁听司法审判</li></ul></li><li>养成守法习惯</li><li>提高用法能力：维护自身权益和社会利益</li></ul></li><li><p>法治思维：</p></li></ol><ul><li><p>含义：正当性思维、规范性思维、逻辑思维、科学思维。</p></li><li><p>内容：</p><ul><li>法律至上：普遍适用和优先适用</li><li>权利制约：权利由法定、有权必有责、用权受监督、违法受追究</li><li>公平正义：<ul><li>权利公平：权利主体、享有权利、权利保护和救济平等</li><li>机会公平</li><li>规则公平</li><li>救济公平：司法、行政、社会救济公平</li></ul></li><li>权利保障：宪法、立法、行政、司法保障</li><li>程序正当：程序的合法性、中立性、参与性、公开性</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="大学政治" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>毛概总结</title>
    <link href="http://example.com/2024/07/02/%E6%94%BF%E6%B2%BB/%E6%AF%9B%E6%A6%82%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/07/02/%E6%94%BF%E6%B2%BB/%E6%AF%9B%E6%A6%82%E6%80%BB%E7%BB%93/</id>
    <published>2024-07-02T04:00:00.000Z</published>
    <updated>2024-12-16T03:47:45.902Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1id="毛泽东思想和中国特色社会主义理论体系概论总结">毛泽东思想和中国特色社会主义理论体系概论总结</h1><h2 id="新民主主义革命理论">1. 新民主主义革命理论</h2><ol type="1"><li><p>新民主主义革命的根本任务：推翻帝国主义、封建主义和官僚资本主义的统治。</p></li><li><p>新民主主义革命的性质：资产阶级民主革命。</p><ul><li>建立各革命阶级在无产阶级领导下的联合专政，不破坏参加反帝反封建的资本主义成分。</li></ul></li><li><p>1948年，总路线：无产阶级领导的，人民大众的，反对帝国主义、封建主义和官僚资本主义的革命。</p><ul><li>领导力量：无产阶级<ul><li><p>无产阶级的基本优点：无私有生产资料，与先进的生产方式相联系，富于组织纪律性。</p></li><li><p>中国无产阶级的特点：坚决彻底，分布集中，和农民亲密团结。</p></li></ul></li><li>其他革命动力：农民阶级、城市小资产阶级、民族资产阶级<ul><li>农民问题是中国革命的基本问题。</li><li>新民主主义革命实质上是党领导下的农民革命，中国革命战争实质上是党领导下的农民战争。</li><li>贫农是无产阶级最可靠的同盟军，中农是无产阶级可靠的同盟军。</li></ul></li></ul></li><li><p>基本纲领：</p><ul><li><p>政治纲领：推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义的共和国。</p><ul><li>国体：各革命阶级联合专政。</li><li>政体：民主集中制的人民代表大会制度。</li></ul></li><li><p>经济纲领：没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归国家所有，保护民族工商业。</p><ul><li>没收官僚资本，包含着新民主主义革命和社会主义革命的双重性质。</li></ul></li><li><p>文化纲领：民族的科学的大众的文化。</p><ul><li>民族的：反帝国主义。</li><li>科学的：反封建迷信，实事求是。</li><li>大众的：民主的。</li></ul><p>共产主义思想居于指导地位。</p></li></ul></li><li><p>新民主主义革命道路：土地革命、武装斗争、农村革命根据地建设。</p><ul><li>土地革命是基本内容，武装斗争是主要形式，农村革命根据地建设是前两者的依托。</li></ul></li><li><p>新民主主义革命三大法宝：统一战线、武装斗争、党的建设。</p><ul><li>统一战线和武装斗争是中国革命的两个基本特点，也是两个基本武器。</li><li>统一战线是武装斗争的统一战线，武装斗争是统一战线的中心支柱。</li></ul></li><li><p>统一战线中的两个联盟：</p><ul><li>工人阶级同农民阶级、广大知识分子及其他劳动者的联盟，主要是工农联盟。是统一战线的基础。</li><li>工人阶级和非劳动人民的联盟，主要是与民族资产阶级的联盟。</li></ul></li><li><p>党建设、巩固和发展统一战线的实践经验：</p><ul><li>建立巩固的工农联盟。</li><li>正确对待资产阶级，尤其是民族资产阶级。</li><li>采取区别对待的方针。</li><li>坚持独立自主的原则。</li></ul></li><li><p>建设人民军队的经验：</p><ul><li>坚持党对军队的绝对领导。</li><li>建设全心全意为人民服务的人民军队。</li><li>开展革命的政治工作。<ul><li>人民军队政治工作的基本原则：<ul><li>官兵一致。</li><li>军民一致。</li><li>瓦解敌军、优待俘虏。</li></ul></li></ul></li><li>坚持正确的战略战术原则。</li></ul></li><li><p>党的建设包含三大建设：思想建设、组织建设、作风建设。</p><ul><li>思想建设始终是首位。</li><li>在任何时候重视组织建设。组织建设根本的是贯彻民主集中制。</li><li>重视作风建设。</li><li>联系党的政治路线。</li></ul></li></ol><h2 id="社会主义改造理论">2. 社会主义改造理论</h2><ol type="1"><li><p>1953年12月，过渡时期的总路线：</p><p>从中华人民共和国成立，到社会主义改造完成，这是一个过渡时期。党在这个时期的总路线和总任务，是要在一个相当长的时期内，逐步实现国家的社会主义工业化，并逐步实现国家对农业、对手工业和对资本主义工商业的社会主义改造。</p><ul><li>主要任务是实现国家工业化，为此必须进行社会主义改造，确立社会主义基本制度。</li></ul></li><li><p>农业社会主义改造道路：</p><ul><li><p>积极引导农民组织起来，走互助合作道路。</p><ul><li>积极性的两个方面：个体积极性、互助合作积极性。</li></ul></li><li><p>遵循自愿互利、典型示范和国家帮助的原则，以互助合作的优越性吸引农民走互助合作道路。</p></li><li><p>正确分析农村的阶级和阶层状况，制定正确的阶级政策。</p></li><li><p>坚持积极领导、稳步前进的方针，采取循序渐进的步骤。</p><ul><li>互助社：生产资料归个体，互帮互助，社会主义萌芽。</li><li>初级社：生产资料入股，统一经营，半社会主义。</li><li>高级社：生产资料归集体，按劳分配，完全社会主义。</li></ul></li><li><p>在实现农业合作化后，国家应努力用先进的技术装备发展农业经济。</p></li></ul></li><li><p>手工业社会主义改造道路：积极领导、稳步前进，从供销合作到生产合作</p><ul><li>手工业供销小组：把手工业者组织起来，社会主义萌芽。</li><li>手工业供销合作社：统一供销，生产分散完成，半社会主义。</li><li>手工业生产合作社：生产资料归集体，按劳分配，社会主义。</li></ul></li><li><p>资本主义工商业社会主义改造：</p><ul><li><p>和平赎买：私营企业改为国企，资本家在一定年限内有分红。</p><ul><li>有利于发挥私营工商业在国计民生方面的积极作用。</li><li>有利于争取和团结民族资产阶级。</li><li>有利于巩固和发展统一战线。</li><li>有利于发挥民族资产阶级的知识、才能、技术和管理经验。</li></ul><p>和平赎买的可行性：</p><ul><li>民族资产阶级的两面性。</li><li>长期的统一战线。</li><li>国营经济掌控经济命脉。</li></ul></li><li><p>从低级到高级的国家资本主义过渡形式：</p><ul><li>初级国家资本主义：由国家对私营工商业进行委托加工、计划订货、统购包销、经销代销。<ul><li>四马分肥：利润分给国家所得税、企业公积金、工人福利费、资方红利。</li></ul></li><li>个别企业的公私合营：国家入股，生产资料由国家与资本家共有。</li><li>全行业公私合营</li></ul></li></ul></li></ol><h2 id="社会主义建设初步">3. 社会主义建设初步</h2><ol type="1"><li><p>调动一切积极因素为社会主义事业服务。</p><ul><li>坚持中国共产党的领导。</li><li>发展社会主义民主政治。</li></ul></li><li><p>正确认识和处理社会主义社会矛盾的思想。</p><ul><li>党的八大提出的社会主义改造后社会主要矛盾：<ul><li>人民对于建立先进的工业国的要求同落后的农业国的现实之间的矛盾。</li><li>人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾。</li></ul></li><li>两类社会矛盾：敌我矛盾和人民内部矛盾<ul><li>敌我矛盾：反抗社会主义者和人民的矛盾，采用专政的方法。</li><li>人民内部矛盾：人民根本利益一致基础上的矛盾，采用民主的方法。</li></ul></li><li>关于正确处理人民内部矛盾的问题是社会主义国家政治生活的主题。</li></ul></li><li><p>走中国工业化道路，必须采取正确的经济建设方针，必须调整和完善所有制结构，必须积极探索适合我国情况的经济体制和运行机制。</p><ul><li>中国工业化道路的问题，主要是指重工业、轻工业和农业的发展关系问题。</li><li>以农业为基础，以工业为主导，以农轻重为序发展国民经济的总方针。</li><li>两条腿走路的工业化发展思路：<ul><li>重工业和轻工业并举</li><li>中央工业和地方工业并举</li><li>沿海工业和内地工业并举</li><li>大型企业和中小型企业并举</li></ul></li></ul></li><li><p>四个现代化：工业、农业、科学文化、国防。</p></li><li><p>初步探索的意义：</p><ul><li>巩固和发展了我国的社会主义制度。</li><li>为开创中国特色社会主义提供了宝贵经验、理论准备和物质基础。</li><li>丰富了科学社会主义的理论和实践。</li></ul></li></ol><h2 id="中国特色社会主义">4. 中国特色社会主义</h2><ol type="1"><li><p>邓小平理论首要的基本的理论问题：什么是社会主义，怎样建设社会主义。</p><ul><li><p>搞清楚这个问题，关键是要在坚持社会主义基本制度的基础上进一步认清社会主义的本质。</p></li><li><p>社会主义的本质：解放和发展生产力，消灭剥削和两极分化，最终达到共同富裕。</p></li><li><p>社会主义的根本任务是发展生产力。</p></li></ul><p>邓小平理论的精髓：解放思想，实事求是。</p><ul><li>两条根本原则：以社会主义公有制经济为主体、共同富裕。</li><li>物质文明和精神文明两手抓。</li><li>一国两制、和平统一。</li></ul></li><li><p>社会主义初级阶段理论：</p><ul><li>社会主义初级阶段，就是指我国在生产力落后、商品经济不发达条件下建设社会主义的特定阶段。<ul><li>即我国从进入社会主义到基本实现社会主义现代化的整个历史阶段。</li></ul></li><li>我国正处于并将长期处于社会主义初级阶段。</li><li>两层含义：我国是社会主义社会，必须坚持社会主义；必须正视而不能超越初级阶段。</li></ul></li><li><p>党在社会主义初级阶段的基本路线：</p><p>领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放、自力更生、艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。</p></li><li><p>三步走基本实现现代化：</p><ul><li>1990年国民生产总值比1980年翻一番，解决温饱问题。</li><li>20世纪末，国民生产总值再翻一番，人民生活达到小康水平。</li><li>21世纪中叶，人均国民生产总值达到中等发达国家水平，基本实现现代化。</li></ul></li><li><p>社会主义改革开放：</p><ul><li>改革：社会主义制度的自我完善和发展。<ul><li>改革是社会主义社会发展的直接动力。</li><li>判断改革得失的标准：是否有利于发展生产力，增强综合国力，提高人民生活水平。</li></ul></li><li>对外开放是建设中国特色社会主义的一项基本国策。<ul><li>对外开放的要求：<ul><li>范围：对发达和发展中国家开放经济、科技、教育、文化等领域。</li><li>学习内容：正确对待资本主义社会创造的现代文明成果。</li><li>开放原则：坚决维护中国人民的独立自主权利。</li></ul></li></ul></li></ul></li><li><p>社会主义市场经济理论：</p><ul><li>我国经济体制改革的核心问题：如何正确认识和处理计划和市场的关系。</li><li>理论要点：<ul><li>计划经济不等于社会主义，市场经济不等于资本主义。</li><li>要结合计划和市场的优势。</li><li>市场作为资源配置的手段不具有制度属性。</li></ul></li></ul></li><li><p>“一国两制”是一项基本国策，指在统一的国家内，国家主体实行社会主义制度，个别地区依法实行资本主义制度。</p><ul><li><p>一国两制是中国共产党领导人民实现祖国和平统一的伟大构想。</p><ul><li>针对台湾问题提出，先用于香港、澳门问题。</li></ul></li><li><p>一国两制为国际社会提供了新思路新方案。</p></li><li><p>一国两制的根本宗旨是维护国家主权、安全、发展利益。</p><ul><li>全面管治权和高度自治权统一。</li><li>坚持爱国者治港、爱国者治澳、依法治港治澳。</li></ul></li><li><p>一国两制的提出首先是为了实现和维护国家统一，任何危害国家主权安全、挑战中央权力和香港特别行政区基本法权威、利用香港对内地进行渗透破坏的活动，都是对底线的触碰，决不允许。</p></li></ul></li><li><p>三个代表重要思想：中国共产党必须始终代表</p><ul><li>中国先进生产力的发展要求</li><li>中国先进文化的前进方向</li><li>中国最广大人民的根本利益。</li></ul></li><li><p>科学发展观：</p><p>第一要义是发展，核心立场是以人为本，基本要求是全面协调可持续，根本方法是统筹兼顾。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="大学政治" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>马克思主义基本原理总结</title>
    <link href="http://example.com/2024/07/01/%E6%94%BF%E6%B2%BB/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2024/07/01/%E6%94%BF%E6%B2%BB/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</id>
    <published>2024-07-01T04:00:00.000Z</published>
    <updated>2024-12-16T03:46:25.048Z</updated>
    
    <content type="html"><![CDATA[<p>今客沧桑登舞榭，万灵且待命无疆！</p><span id="more"></span><h1 id="马克思主义基本原理总结">马克思主义基本原理总结</h1><h2 id="导论">导论</h2><ol type="1"><li><p>1848年2月，《共产党宣言》发表，标志着马克思主义的公开问世。马克思主义产生的背景：</p><ul><li>社会根源：资本主义经济的发展。</li><li>阶级基础：英法德工人运动兴起，标志着现代无产阶级作为独立的政治力量登上历史舞台。</li><li>思想渊源：<ul><li>直接来源：德国古典哲学、英国古典政治经济学、英法空想社会主义；</li><li>自然科学：细胞学说、生物进化论、能量守恒与转化定律；</li><li>思想前提：从唯心主义到唯物主义的转变、从革命民主主义到共产主义的转变。</li></ul></li></ul></li><li><p>马克思主义创立时期的重要著作：</p><ul><li>1844年，马克思、恩格斯在《德法年鉴》上的论文表明他们完成了从唯心主义到唯物主义的转变、从革命民主主义到共产主义的转变，奠定了马克思主义的思想前提。</li><li>1845年《神圣家族》是马克思、恩格斯合著的第一本著作。</li><li>1845年马恩合著的《德意志意识形态》首次系统阐述了历史唯物主义的基本观点。</li><li>马克思<ul><li>1867年《资本论》第一卷，被称为工人阶级的圣经。</li><li>1871年《法兰西内战》科学总结了巴黎公社的历史经验。</li><li>1875年《哥达纲领批判》对未来社会从制度、发展阶段以及分配等方面作了原则构想。</li></ul></li><li>恩格斯<ul><li>1876-1878年《反杜林论》全面阐述了马克思主义理论体系。</li><li>《家庭、私有制和国家的起源》《路德维希·费尔巴哈和德国古典哲学的终结》进一步发展了马克思主义理论。</li></ul></li></ul></li><li><p>马克思主义是由马克思和恩格斯创立并为后继者所不断发展的科学理论体系。</p><ul><li><p>是关于自然、社会和人类思维发展一般规律的学说。</p></li><li><p>是关于社会主义必然代替资本主义、最终实现共产主义的学说。</p></li><li><p>关于无产阶级解放、全人类解放和每个人自由而全面发展的学说。</p></li><li><p>是无产阶级政党和社会主义国家的指导思想。</p></li><li><p>是指引人民创造美好生活的行动指南。</p></li></ul></li><li><p>马克思主义哲学、马克思主义政治经济学、科学社会主义是马克思主义的三个基本组成部分。</p></li><li><p>马克思主义的特征：科学性、人民性、实践性、发展性。</p><ul><li>马克思主义的基本特征，用一句话来概括就是科学性和革命性的统一。</li><li>人民性是马克思主义的本质属性和鲜明品格，人民至上是马克思主义的政治立场。</li><li>实践性是马克思主义理论区别于其他理论的根本特征，实践的观点是马克思主义的基本观点。</li></ul></li><li><p>马克思主义的历史发展：</p><ul><li>列宁把马克思主义基本原理同俄国实际相结合，创立了列宁主义。</li><li>中国共产党在不断探索中将马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，产生了毛泽东思想和中国特色社会主义理论体系。</li></ul></li><li><p>马克思主义的当代价值：</p><ul><li>观察当代世界变化的认识工具。</li><li>指引当代中国发展的行动指南。</li><li>引领人类社会进步的科学真理。</li></ul></li></ol><h2 id="哲学">哲学</h2><h3 id="辩证唯物论">辩证唯物论</h3><h4 id="物质统一性">物质统一性</h4><ol type="1"><li><p>物质是不依赖于人类意识而存在，并能为人类意识所反映的客观实在。</p><ul><li>这种客观实在性，是从自然存在和社会实在中抽象出的共同特性，是物质的唯一特性。</li></ul></li><li><p>运动是标志一切事物和现象的变化及其过程的哲学范畴，是物质的<strong>存在方式</strong>和<strong>根本属性</strong>。</p><p>相对静止是物质运动在一定条件下的稳定状态，运动和静止是对立统一的关系。</p><ul><li><p>运动和静止的区别在于运动的绝对性和静止的相对性。</p></li><li><p>运动和静止的联系表现在运动和静止相互依赖、渗透、包含。</p></li></ul></li><li><p>时空是运动着的物质的基本存在形式，时空和物质运动的不可分割性证明了时空具有客观性。</p><ul><li>具体物质形态的时空是有限的，而整个物质世界的时空是无限的。</li><li>物质运动时空的客观实在性是绝对的，具体特性是相对的。</li></ul></li><li><p>意识的本质是人脑的机能和属性，是客观世界的主观映像。</p><ul><li>意识是自然界和社会历史发展的产物，社会实践，特别是劳动，对意识产生发展起决定性作用。</li><li>意识在内容上是客观的，在形式上是主观的。</li><li>意识对物质的反作用：<ul><li>意识具有目的性和计划性。</li><li>意识具有创造性。</li><li>意识具有指导实践改造客观世界的作用。</li><li>意识具有调控人的行为和生理活动的作用。</li></ul></li></ul></li><li><p>尊重客观规律是正确发挥主观能动性的前提；充分发挥主观能动性，才能正确认识和利用客观规律。</p><ul><li><p>实践是客观规律性和主观能动性统一的基础：</p><ul><li><p>从实际出发是发挥人的主观能动性的前提。</p></li><li><p>实践是正确发挥人的主观能动性的根本途径。</p></li><li><p>正确发挥人的主观能动性，还要依赖于一定的物质条件和物质手段。</p></li></ul></li></ul></li><li><p>世界的物质统一性原理：自然界是物质的，人类社会是物质的，人的意识统一于物质。</p><ul><li>方法论：一切从实际出发。</li></ul></li><li><p>人类的实践活动是自然界与人类社会、客观世界和主观世界相分化与统一的关键。</p><ul><li>自然界和人类社会交叉重叠和相互作用。</li><li>主观世界具有相对独立性，从属于客观世界。</li></ul></li></ol><h4 id="唯物辩证法">唯物辩证法</h4><ol type="1"><li><p>唯物辩证法是关于世界普遍联系和变化发展的科学，联系和发展是唯物辩证法的总观点和总特征。</p><ul><li>本质上是批判的、革命的，是客观和主观辩证法的统一，是认识和改造世界的根本方法。<ul><li>系统观念是唯物辩证法普遍联系观点的应有之义。</li><li>坚持事物发展是一个过程的思想，用历史的眼光看问题。</li></ul></li></ul></li><li><p>联系是事物内部或事物之间相互影响、制约、作用的关系。</p><ul><li>联系的特点：客观性、普遍性、多样性、条件性。</li></ul></li><li><p>发展是运动的基本趋势，发展的实质是新事物的产生和旧事物的灭亡。</p><ul><li><p>新事物必然战胜旧事物的原因：</p><ul><li><p>新事物有新的要素、结构和功能，适应新环境和条件。</p></li><li><p>新事物否定了旧事物消极的部分，保留了旧事物合理的部分，添加了新内容。</p></li></ul></li></ul></li><li><p>对立统一规律，即矛盾规律，揭示了事物普遍联系的根本内容和变化发展的内在动力，从根本上回答了事物为什么会发展的问题，是唯物辩证法的实质和核心。</p><ul><li>矛盾是反映事物内部或事物之间的对立统一关系的哲学范畴。</li><li>矛盾的斗争性是无条件的、绝对的，矛盾的同一性是有条件的、相对的，斗争性寓于同一性之中。</li><li>矛盾的普遍性是无条件的、绝对的，矛盾的特殊性是有条件的、相对的，普遍性寓于特殊性之中。</li><li>矛盾的不平衡发展原理：根本矛盾贯穿事物发展始终，规定事物的性质，主要矛盾对事物发展起决定作用，矛盾的性质主要是由矛盾的主要方面决定的。</li></ul></li><li><p>量变质变规律：量变是质变的必要准备，质变是量变的必然结果。在总的量变中有阶段性和局部性的部分质变，在质变过程中也有旧质的量收缩和新质的量扩张。</p><ul><li><p>质是事物区别于其他事物的内在规定性，量是事物的规模、程度、速度等规定性。</p></li><li><p>度是保持事物质的稳定性的数量界限，量和质在度中得到统一。</p></li><li><p>量变质变规律体现了事物发展的渐进性和飞跃性的统一。</p></li></ul></li><li><p>否定之否定规律：事物的辩证发展经过第一次否定，使矛盾得到初步解决，而处于否定阶段的事物仍然具有片面性，还要经过再次否定，实现对立面的统一，使矛盾得到根本解决。</p><ul><li><p>辩证否定观：事物内部存在肯定因素和否定因素。</p><ul><li>否定是事物的自我否定、自我发展。</li><li>否定是旧事物向新事物事物发展的环节。</li><li>否定是新旧事物联系的环节。</li><li>辩证否定的实质是扬弃。</li></ul></li></ul></li><li><p>唯物辩证法五对基本范畴：</p><ul><li>内容和形式</li><li>现象和本质</li><li>原因和结果</li><li>必然和偶然</li><li>可能和现实</li></ul></li></ol><h4 id="实践和认识">实践和认识</h4><ol type="1"><li><p>实践是感性的、对象性的物质活动，全部社会生活在本质上是实践的。</p><ul><li><p>实践的基本特征是客观实在性、自觉能动性、社会历史性。</p></li><li><p>实践的基本结构包含三项基本要素：主体、客体、中介。</p><ul><li>主客体相互作用的关系包括实践关系、认识关系和价值关系。实践关系是最根本的关系。</li><li>主体、客体和中介是不断变化发展的，主要表现为主体客体化和客体主体化的双向运动。</li></ul></li><li><p>实践的形式包含三种基本类型：物质生产实践、社会政治实践、科学文化实践。</p><ul><li>物质生产实践是最基本的实践活动，构成全部社会生活的基础。</li><li>虚拟实践是实践活动的派生形式，具有相对独立性。</li></ul></li></ul></li><li><p>唯物主义能动反映论：认识是主体在实践基础上对客体的能动反映。</p><ul><li><p>认识既具有反映客体内容的反映性特征，也具有实践的主体能动的创造性特征。</p></li><li><p>认识的过程：</p><ul><li>从实践到认识：感性认识到理性认识的飞跃<ul><li>理性认识依赖于感性认识。</li><li>感性认识有待于发展和深化为理性认识。</li><li>感性认识和理性认识相互渗透、包含。</li></ul></li><li>从认识到实践：理性认识到实践的飞跃</li></ul></li><li><p>认识中的影响因素包含理性因素和非理性因素。</p></li><li><p>认识的两大规律：反复性和无限性。</p></li></ul></li><li><p>实践是认识的基础，对认识活动起决定作用。实践和认识是具体的历史的统一。</p><ul><li>实践是认识的来源、发展动力、目的，也是检验认识真理性的唯一标准。</li></ul></li><li><p>认识世界的目的是改造世界，改造世界分为改造客观世界和主观世界。</p><ul><li>认识必然和争取自由，是人类认识世界和改造世界的根本目标。<ul><li>自由是有条件的：认知条件和实践条件。</li></ul></li></ul></li><li><p>真理是人们对于客观事物及其规律的正确反映。</p><ul><li><p>真理的内容是客观的，标准也是客观的，真理的客观性决定了它是一元的。</p></li><li><p>真理是个发展过程，既是绝对的，也是相对的。真理的绝对性和相对性相互依存、相互包含。</p><ul><li>真理的发展就是由相对性向绝对性转化。</li></ul></li><li><p>实践是检验真理的唯一标准，但一定历史阶段的具体实践具有局限性。</p><ul><li>原因：真理的本性是主观和客观的一致，实践是主观见之于客观的物质活动。</li></ul></li></ul></li><li><p>价值是反映主体和客体之间意义关系的范畴。</p><ul><li>价值的基本特性：主体性、客观性、多维性、社会历史性。</li><li>价值判断的基本特点：<ul><li>以主客体之间价值关系为认识对象。</li><li>评价结果与评价主体直接相关。</li><li>正确与否依赖于对客体状况和主体需要的认识。</li><li>有科学和非科学之分。</li></ul></li></ul></li><li><p>真理和价值的辩证统一：实践受真理尺度（规律性）和价值尺度（目的性）制约。</p></li></ol><h3 id="唯物史观">唯物史观</h3><h4 id="人类社会发展规律">人类社会发展规律</h4><ol type="1"><li><p>社会历史观的基本问题是社会存在和社会意识的关系问题。</p><ul><li><p>社会存在主要包括物质生产方式、自然地理环境和人口因素。</p><ul><li>物质生产方式是劳动者和劳动资料结合的特殊方式，生产力和生产关系的统一体。<ul><li>物质生产方式集中体现了人类社会的物质性，是社会历史发展的决定力量。</li></ul></li><li>自然地理环境是人类社会生存和发展永恒的、必要的条件，是人们生活和生产的自然基础。</li></ul></li><li><p>社会意识是社会生活的精神方面，是社会存在的反映。</p><ul><li>社会意识按层次划分为社会心理和社会意识形式，社会意识形式分为意识形态和非意识形态。<ul><li>社会心理以人们的感性认识为主。</li><li>社会意识形式以人们的理性认识为主，以社会心理为基础，指导和影响社会心理。<ul><li>意识形态：反映一定经济政治关系的思想体系，思想道德、艺术哲学等。</li><li>非意识形态：不具有社会经济政治性质，自然科学、形式逻辑等。</li></ul></li></ul></li></ul></li></ul></li><li><p>社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在。</p><ul><li><p>先进的社会意识对社会发展起积极的促进作用，落后的社会意识对社会发展起消极的阻碍作用。</p></li><li><p>方法论意义：</p><ul><li>两个划分：从社会生活各领域中划分出经济领域，从一切社会关系中划分出生产关系。</li><li>两个归结：把一切社会关系归结于生产关系，并进一步归结于生产力发展。</li></ul></li></ul></li><li><p>社会基本矛盾是生产力和生产关系的矛盾、经济基础和上层建筑的矛盾。</p><ul><li>生产力和生产关系矛盾是更根本的矛盾，决定了经济基础和上层建筑矛盾的产生和发展，又受到经济基础和上层建筑矛盾的制约，前者的解决有赖于后者的解决。</li><li>社会基本矛盾是历史发展的根本动力。</li></ul></li><li><p>阶级斗争是社会基本矛盾在阶级社会中的直接表现，是阶级社会发展的直接动力。</p><ul><li><p>阶级和阶级斗争是唯物史观的基本观点。</p></li><li><p>阶级斗争根源于阶级之间物质利益的根本对立，根源于社会经济关系的冲突。</p></li><li><p>革命是阶级斗争的最高形式，实质是革命阶级推翻反动阶级统治，用新社会制度代替旧社会制度。</p></li></ul></li><li><p>改革是在统一社会形态内，通过调整、变革不合适生产力发展要求的生产关系和上层建筑的某些部分或环节，实现该社会形态的自我发展和自我完善。是推动社会发展的又一重要动力。</p></li><li><p>生产方式的发展变革是世界历史形成和发展的基础，普遍交往是世界历史的基本特征。</p><ul><li><p>交往是一定历史条件下现实的个人、群体之间在物质和精神上相互来往、作用，彼此联系的活动。</p><ul><li>交往是与生产力的发展相伴随的。</li></ul></li><li><p>人类历史向世界历史转变是资本主义生产方式向世界扩张的结果，世界历史的形成又反过来促进了生产力的普遍发展和人类的普遍交往。</p></li></ul></li><li><p>人的发展最根本的是人的自由程度的提高。</p><ul><li>三个阶段：人的依赖关系占统治地位、人的独立性以物的依赖关系为基础、自由个性</li><li>只有在共产主义社会，人才能真正得到自由而全面的发展。</li></ul></li><li><p>社会形态是社会的经济形态、政治形态和意识形态的具体的、历史的统一。</p><ul><li>社会形态更替的特点：统一性和多样性、必然性和人们的历史选择性、前进性和曲折性</li></ul></li><li><p>在社会历史发展过程中，人民群众起决定性作用。</p><ul><li><p>从质上说，人民群众是指一切对社会历史发展起推动的人；</p><p>从量上说，人民群众是指社会人口中的绝大多数。</p><ul><li>人民群众中最稳定的主体部分始终是从事物质资料生产的劳动群众。</li></ul></li><li><p>人民群众是社会历史实践的主体，是历史的创造者。</p><ul><li>人民群众是社会物质、精神财富的创造者。</li><li>人民群众是社会变革的决定力量。</li><li>人民群众既是先进生产力和先进文化的创造主体，也是实现自身利益的根本力量。</li><li>人民群众创造历史的活动受到经济、政治、精神文化等社会历史条件的制约。</li></ul></li><li><p>群众观点：</p><ul><li>坚信人民群众自己解放自己的观点</li><li>全心全意为人民服务的观点</li><li>一切向人民群众负责的观点</li><li>虚心向人民群众学习的观点</li></ul></li><li><p>群众路线：一切为了群众，一切依靠群众，从群众中来，到群众中去。</p><ul><li>群众路线是无产阶级政党的根本工作路线，也是党的根本领导方法和工作方法。</li><li>群众是划分为阶级的，阶级通常是由政党领导的，政党是由领袖来主持的。</li></ul></li></ul></li><li><p>历史人物都要受到社会发展客观规律的制约，不能决定和改变历史发展的总进程和方向。</p><ul><li>任何历史人物的出现都体现了必然性和偶然性的统一。</li></ul></li></ol><h4 id="人类社会基本矛盾">人类社会基本矛盾</h4><ol type="1"><li><p>生产力标志了人类改造自然的实际程度和实际能力范畴，表示人与自然的关系。</p><ul><li>生产力的基本要素：生产资料（劳动资料和劳动对象）、劳动者<ul><li>劳动资料：劳动过程中用以改变劳动对象的物质资料或条件，其中最重要的是生产工具。</li><li>劳动对象：通过劳动加工变为使用价值的物质资料。</li><li>劳动者：运用劳动资料作用劳动对象的人，是生产力中最活跃的因素。</li></ul></li></ul></li><li><p>生产关系是物质生产过程中不以人意志转移的经济关系，是社会关系中最基本的关系。</p><ul><li>狭义生产关系是直接生产过程中的相互关系。<ul><li>包括生产资料所有制关系、生产中人与人的关系和产品分配关系。</li><li>生产资料所有制关系是最基本、决定性的。它构成全部生产关系的基础，是区分不同生产方式，判定社会经济结构性质的客观依据。</li></ul></li></ul></li><li><p>生产力决定生产关系，生产关系反作用于生产力。</p><ul><li><p>生产力是生产的物质内容，生产关系是生产的社会形式，二者有机统一构成社会的生产方式。</p></li><li><p>生产力和生产关系的矛盾运动及其规律：生产关系一定要适合生产力状况。</p><ul><li>生产力的状况决定生产关系的产生及其变化发展的方向和形式。</li><li>生产关系适合生产力时对生产力发展起促进作用，反之起阻碍作用。</li><li>方法论意义：确认生产力发展是社会进步的最高标准。</li></ul></li></ul></li><li><p>经济基础是社会一定发展阶段的生产力所决定的生产关系的总和。</p><p>上层建筑是建立在一定经济基础上的意识形态及与之相适应的制度、组织和设施。</p><ul><li>观念上层建筑即意识形态。</li><li>政治上层建筑即政治法律制度、设施和政治组织。<ul><li>政治上层建筑是在一定意识形态指导下建立起来的，是统治阶级意志的体现。</li><li>政治上层建筑一经形成，就影响和制约人们的思想理论观点。</li><li>政治上层建筑在上层建筑中占主导地位，国家政权是核心。</li></ul></li></ul></li><li><p>经济基础决定上层建筑，上层建筑对经济基础有反作用。</p><ul><li>这种反作用表现在为自己的经济基础服务，它的性质取决于经济基础的性质。</li></ul></li><li><p>经济基础和上层建筑的矛盾运动及其规律：</p><ul><li>矛盾：<ul><li>新上层建筑不完全适应经济基础的要求。</li><li>上层建筑相对独立，有脱离经济基础的倾向。</li><li>经济基础总会变化，造成上层建筑落后。</li><li>维护旧经济基础的上层建筑成为发展新经济基础的阻碍。</li></ul></li><li>规律：经济基础决定上层建筑的产生、性质和发展变化的方向，上层建筑反作用取决于和服务于经济基础的性质和要求。</li></ul></li></ol><h2 id="政治经济学">政治经济学</h2><h3 id="商品和价值规律">商品和价值规律</h3><ol type="1"><li><p>商品是用来交换的、能满足人们某种需要的<strong>劳动产品</strong>。</p><ul><li>使用价值是商品能满足人的某种需要的属性，是商品的自然属性，为一切劳动产品所共有。</li><li>价值是凝结在商品中的无差别的一般人类劳动，是商品特有的社会属性。<ul><li>商品的价值在质的规定性上是相同的。</li><li>交换价值是不同使用价值之间交换的量的关系。取决于价值。</li></ul></li><li>价值和使用价值是对立统一的关系。<ul><li>对立性体现在二者不可兼得。</li><li>统一性体现在没有使用价值的物品没有价值，有使用价值但不是劳动产品也没有价值。</li></ul></li></ul></li><li><p>生产商品的劳动可区分为具体劳动和抽象劳动，它们是同一劳动的两种规定。</p><ul><li>具体劳动是生产一定使用价值的具体形式的劳动，抽象劳动是无差别的一般人类劳动。</li><li>具体劳动形成商品的使用价值，抽象劳动形成商品的价值。</li></ul></li><li><p>社会必要劳动时间是现有社会正常生产条件下，在社会平均劳动熟练程度和劳动强度下制造某种使用价值所需要的劳动时间。社会必要劳动时间决定商品价值的量。</p><ul><li><p>商品的价值量与生产商品所耗费的社会必要劳动时间成正比，和劳动生产率成反比。</p><ul><li>影响劳动生产率的因素：劳工熟练程度、科技发展水平。</li><li>商品的价值量以简单劳动为尺度计量，复杂劳动等于多倍的简单劳动。</li></ul></li></ul></li><li><p>商品价值形式：简单的或偶然的价值形式、总和的或扩大的价值形式、一般的价值形式、货币形式。</p></li><li><p>货币是长期交换过程中形成的固定充当一般等价物的商品。</p><ul><li><p>货币的五种基本职能：</p><ul><li>价值尺度、流通手段（最基本）</li><li>贮藏手段、支付手段、世界货币</li></ul></li><li><p>货币产生后整个世界分化为具体商品和货币的两极。</p><ul><li><p>商品内在的使用价值和价值的矛盾成为外在的商品和货币的矛盾。</p></li><li><p>货币的出现并没有也不可能消除商品经济的矛盾，反而有可能使矛盾扩大和加深。</p></li></ul></li></ul></li><li><p>价值规律是商品经济的基本经济规律。</p><ul><li>基本内容：商品的价值量由生产商品的社会必要劳动时间决定</li><li>客观要求：商品交换以价值量为基础，按照等价交换的原则进行。</li><li>表现形式：商品的价格围绕价值自发波动。</li><li>积极作用：<ul><li>自发地调节生产资料和劳动力在社会各生产部门之间的分配比例。</li><li>自发地刺激社会生产力的发展。</li><li>自发地调节社会收入的分配。</li></ul></li><li>消极作用：导致社会资源浪费、收入两极分化，阻碍技术进步。</li></ul></li></ol><h3 id="剩余价值和资本">剩余价值和资本</h3><ol type="1"><li><p>劳动力是人的劳动能力，是人的脑力和体力的总和。劳动力的使用即劳动。</p><ul><li>劳动力成为商品的两个基本条件：劳动者在法律上是自由人，且没有任何生产资料。</li><li>劳动力商品价值包括维持劳动者及家属生存所必需生活资料价值和劳动者接受教育训练支出费用。</li><li>劳动力商品的使用价值是价值的源泉，它在消费过程中能够创造比本身价值更大的新价值。<ul><li>剩余价值是工人创造的超过劳动力价值的部分价值。</li><li>货币所有者购买劳动力商品后能获得剩余价值，货币也就转化为资本。</li></ul></li></ul></li><li><p>绝对剩余价值指必要劳动时间不变，延长工作日长度或提高劳动强度而生产的剩余价值。</p><p>相对剩余价值指工作日长度不变，缩短必要劳动时间而相对延长剩余劳动时间所生产的剩余价值。</p><ul><li>超额剩余价值指企业由于提高劳动生产率使商品的个别价值低于社会价值的差额。</li></ul><p>资本家提高对工人剥削程度最基本的方法是绝对剩余价值和相对剩余价值的生产。</p></li><li><p>资本是能够带来剩余价值的价值，本质不是物，而是一定历史社会形态下的生产关系。</p><ul><li><p>不变资本是以生产资料形态存在的资本，通过工人的具体劳动转移到新产品中去。</p></li><li><p>可变资本是用来购买劳动力的部分资本，不被转移到新产品中去，而是由工人的劳动再生产出来。</p><ul><li><spanclass="math inline">\(剩余价值率=\frac{剩余价值}{可变资本}\)</span>。</li></ul></li></ul></li><li><p>资本积累就是剩余价值的资本化，它的源泉是剩余价值。</p><ul><li>资本积累是社会财富占有两极分化的重要原因，也是资本主义社会失业现象产生的根源。</li><li>资本积累的历史趋势是资本主义制度的必然灭亡和社会主义制度的必然胜利。</li><li>资本的原始积累指暴力掠夺生产资料和货币财富作为资本。</li></ul></li><li><p>资本技术构成指由生产技术水平决定的生产资料和劳动力之间的比例。</p><p>资本价值构成指不变资本和可变资本的比例，由资本的技术构成决定并反映技术构成变化。</p><p>资本价值构成也称资本有机构成。</p><ul><li>资本有机构成在资本主义生产过程中呈现不断提高的趋势。有机构成提高，可变资本减少，导致劳动力需求降低，工人失业，形成相对过剩人口。<ul><li>相对过剩人口的形式包括流动过剩人口、潜在过剩人口、停滞过剩人口。</li></ul></li></ul></li><li><p>资本循环指资本从一种形式出发，经过一系列形式的变化又回到出发点的运动。</p><ul><li><p>产业资本循环的三个阶段和资本的三种不同职能：</p><ul><li>购买阶段：货币资本</li><li>生产阶段：生产资本</li><li>售卖阶段：商品资本</li></ul></li><li><p>产业资本运动的两个前提条件：产业资本的三种职能形式在空间上并存、在时间上继起。</p></li><li><p>资本周转指资本周而复始的循环。</p><ul><li>影响资本周转快慢的因素：资本周转时间、生产资本中固定资本和流动资本的构成。</li></ul></li></ul></li><li><p>社会总产品又称社会总价值，包括生产资料转移价值、劳动力价值和剩余价值。</p><ul><li>社会总产品的第1部类由生产生产资料的部门构成，第2部类由生产消费资料的部门构成。</li></ul><p>社会再生产指连续不断重复的社会生产。它的核心问题是社会总产品的价值补偿和实物补偿问题。</p><ul><li><p>社会再生产顺利进行的条件：</p><ul><li><p>生产资料生产满足两大部类对消耗生产资料的补偿、扩大生产规模后对追加生产资料的需求。</p></li><li><p>消费资料生产满足两大部类劳动者个人和社会消费、扩大生产规模后对追加消费资料的需求。</p></li></ul></li></ul></li></ol><h3 id="资本主义制度">资本主义制度</h3><h4 id="经济基础">经济基础</h4><ol type="1"><li><p>所有制指生产资料的归属与支配，所有权指法律规定的人对占有物行使权利的界限。</p><ul><li>所有制是所有权的基础，所有权是所有制的法律形态。</li></ul></li><li><p>商品经济是以交换为目的而进行生产的经济形式。</p><ul><li>商品经济产生的社会历史条件：社会分工的存在；生产资料和劳动产品属于不同的所有者。</li><li>私有制基础上商品经济基本矛盾是私人劳动和社会劳动的矛盾，进一步发展成资本主义基本矛盾。</li></ul></li><li><p>资本主义生产关系产生的两个途径：从小商品经济中分化而出、从商人和高利贷者转化而来。</p><ul><li>资本主义生产过程是劳动过程和价值增殖过程的统一。<ul><li>劳动过程生产物质资料，价值增殖过程生产剩余价值。</li><li>价值增殖过程中劳动分为必要劳动和剩余劳动，剩余劳动是剩余价值的唯一源泉。</li></ul></li><li>资本主义简单再生产指资本家获得剩余价值后全部用于个人消费。</li><li>资本主义扩大再生产指资本家将获得剩余价值的一部分转化为资本，使生产在扩大的规模上进行。<ul><li>资本主义扩大再生产的源泉是资本积累。</li></ul></li></ul></li><li><p>工资是劳动力的价值，利润是剩余价值的转化形式。</p><ul><li>资本从利润率低的部门流向利润率高的部门使利润率趋于平均化，转化为平均利润。</li><li>商品价值转化成生产价格，即成本价格加平均利润，不再以价值而是以生产价格为基础进行交换。<ul><li>利润平均化规律反映了资本家在瓜分剩余价值上存在竞争和矛盾。</li></ul></li></ul></li><li><p>资本主义的基本矛盾是生产资料资本主义私人占有和生产社会化之间的矛盾。</p><ul><li>两个具体方面：<ul><li>生产无限扩大的趋势与劳动人民支付能力需求相对缩小的矛盾。</li><li>单个企业内部生产的有组织性和整个社会生产的无政府状态之间的矛盾。</li></ul></li><li>资本主义经济危机是资本主义条件下以强制的方式解决社会再生产的实现问题的途径。<ul><li>根本原因是资本主义的基本矛盾，本质特征是生产相对过剩。</li><li>经济危机周期爆发使得社会再生产也呈现周期性，包括危机、萧条、复苏、高涨四个阶段。</li></ul></li></ul></li></ol><h4 id="上层建筑">上层建筑</h4><ol type="1"><li><p>国家的实质是阶级统治的工具。</p></li><li><p>资本主义国家职能以服务于资本主义制度和资产阶级利益为根本内容，是资产阶级政治统治的工具。</p><ul><li><p>对内进行政治统治和社会管理。</p></li><li><p>对外进行国际交往和维护国家安全及利益。</p></li></ul></li><li><p>资本主义民主制度：资本主义法律制度、政权组织形式、选举制度、政党制度等。</p><ul><li>法律制度的基本原则包括私有制、主权在民、分权制衡和人权。</li><li>政权组织形式为立法权、行政权、司法权三权分立。</li></ul></li><li><p>资本主义意识形态为资本主义经济基础服务，是资产阶级阶级意识的集中体现。</p></li></ol><h4 id="垄断资本主义">垄断资本主义</h4><ol type="1"><li><p>生产集中指生产资料、劳动力与商品生产日益集中于少数大企业。</p><p>资本集中指许多小资本合并成大资本的过程。</p></li><li><p>垄断指资本主义大企业通过联合，对特定商品的生产、销售和价格进行操纵和控制。</p><ul><li><p>价格协定是最简单的垄断组织形式。</p></li><li><p>垄断利润指凭借垄断而获得的超过平均利润的利润。</p><ul><li>垄断价格=成本价格+平均利润+垄断利润。</li></ul></li></ul></li><li><p>垄断条件下存在竞争的原因：</p><ul><li>垄断没有消除产生竞争的经济条件（商品经济）。</li><li>垄断必须通过竞争来维持。</li><li>社会生产是复杂多样的。</li></ul><p>垄断条件下竞争的新特点：</p><ul><li>目的：获得高额垄断利润，巩固扩大垄断地位。</li><li>手段：不仅采用经济手段，也使用更复杂、残酷的手段。</li><li>范围：各个领域、各个国家。</li></ul><p>垄断资本向世界范围内扩展的基本形式：借贷资本输出、生产资本输出、商品资本输出。</p></li><li><p>金融资本：工业垄断资本和银行垄断资本融合而成的垄断资本。</p><ul><li>形成途径：金融联系、资本参与和人事参与。</li><li>形成条件：金融自由化和金融创新。</li></ul><p>金融资本扩张的后果：</p><ul><li>金融垄断资本脱离实体经济发展。</li><li>金融垄断资本控制能力提升。</li></ul><p>金融寡头控制社会的方式：操纵国民经济命脉，实际上控制国家政权。</p><ul><li>经济：通过控股层层控制企业。</li><li>政治：亲自担任或指派代理人。</li><li>此外，还会建立政策咨询机构，通过新闻出版、文化教育等领域左右国家。</li></ul></li><li><p>资本主义的发展经过了自由竞争资本主义和垄断资本主义两个阶段。</p><ul><li>垄断资本主义包括私人垄断资本主义和国家垄断资本主义两种形式。</li></ul></li><li><p>国家垄断资本主义是国家政权和私人垄断资本融合的垄断资本主义。</p><ul><li>形成原因：生产力发展、经济危机的深化、缓和社会矛盾的需求。</li><li>主要形式：<ul><li>国营企业、国家与私人合营企业。</li><li>国家参与私人垄断资本的再生产过程。</li><li>宏观调节使用财政、货币等经济手段。</li><li>微观调节使用反托拉斯法、公共事业规制、社会经济规制等法律手段。</li></ul></li><li>国家垄断资本主义是资本主义经济制度内的经济关系调整。</li></ul></li><li><p>垄断资本国际化产生的组织促进了经济全球化的发展，但根本上是为资产阶级攫取高额利润服务的。</p><ul><li>国际垄断同盟：国际卡特尔、七国集团、欧盟。</li><li>国际经济调节体系：国际货币基金组织、世界银行、世界贸易组织。</li></ul></li></ol><h4 id="资本主义变化">资本主义变化</h4><ol type="1"><li><p>二战后资本主义的变化实质上是资本主义制度基本框架内的变化。</p><ul><li>生产资料所有制：<ul><li>二战前：私人资本所有制、私人股份资本所有制。</li><li>二战后：国家资本所有制、法人资本所有制。</li></ul></li><li>劳资关系与分配关系：资本家采取职工持股、社会福利等激励制度。</li><li>社会阶层和阶级结构：资本所有权和经营权分离、知识型和服务型劳动者增加</li><li>经济危机形态：去工业化和产业空心化、高度金融化、财政严重债务化。</li></ul><p>原因：科技和生产力发展、工人阶级争取自身权益的斗争、资本主义改良。</p></li><li><p>当代资本主义的变化：</p><ul><li>科技创新加速资本主义生产方式变化。</li><li>国际金融资本的垄断成为当代资本主义最突出、最鲜明、最主要的特征。<ul><li>金融垄断寡头化、金融垄断国际化、经济虚拟化和产业空心化。</li></ul></li><li>发达资本主义国家实行霸权主义和强权政治。</li><li>资本主义国家经济发展失调、政治体制失灵、社会融合机制失效。</li></ul></li><li><p>经济全球化：生产全球化、贸易全球化、金融全球化。</p><ul><li><p>原因：科技进步和生产力发展、跨国公司发展、各国经济体制变革和国际经济组织发展。</p></li><li><p>对发展中国家影响：</p><ul><li><p>积极影响：提供先进技术和管理经验、更多就业机会，推动国际贸易和跨国公司发展。</p></li><li><p>消极影响：增加经济风险，加剧发展中国家资源短缺和环境污染，发达/发展中国家地位不平等、收益不平衡。</p></li></ul></li></ul></li></ol><h2 id="社会主义">社会主义</h2><h3 id="历史">历史</h3><ol type="1"><li><p>空想社会主义的局限性在于，未能揭示资本主义必然灭亡的经济根源，看不到埋葬资本主义的力量，找不到通往理想社会的道路。</p><ul><li>早期空想社会主义：1516托马斯·莫尔《乌托邦》、1602康帕内拉《太阳城》</li><li>空想平均社会主义：18世纪，摩莱里《自然法典》、马布利《论法制或法律的原则》</li><li>批判的空想社会主义是科学社会主义的直接思想来源：19世纪初，圣西门、傅立叶、欧文</li></ul></li><li><p>科学社会主义创立的基础是唯物史观、剩余价值学说，创立的标志是1848年2月的《共产党宣言》。</p></li><li><p>1864年，第一国际：马恩指导下建立的国际工人运动联合组织。</p><p>1871年，巴黎公社失败的教训：</p><ul><li>无产阶级革命成功的首要条件是有革命的武装。</li><li>必须建立无产阶级的新型国家，必须建立无产阶级政党，发挥党的政治领导作用。</li><li>无产阶级政权要为人民服务。</li></ul></li><li><p>列宁根据资本主义发展中经济政治不平衡发展的规律，提出了社会主义革命可能在一国或数国首先发生的论断。</p><p>1917年11月7日（俄历10月25日）：十月革命。</p><ul><li>建立了世界上第一个社会主义国家。</li><li>激励了殖民地半殖民地的民族民主革命。</li><li>促进了马克思列宁主义的传播。</li></ul><p>历史条件：科技进步；资本主义进入垄断阶段；资本主义各国间经济政治发展不平衡加剧引发一战。</p></li><li><p>列宁领导的苏维埃俄国对社会主义的探索：</p><ul><li><p>巩固政权时期：制定社会主义过渡计划，提出社会主义改造方法。</p></li><li><p>战时共产主义时期：余粮收集制、取消商品货币关系、经济强制措施。</p></li><li><p>新经济政策时期：1921年，俄共十大。标志着列宁正在探索符合俄国情况的建设社会主义的道路。</p><ul><li>粮食税取代余粮收集制，允许私人自由贸易。</li><li>恢复商品货币关系，允许私人小工业企业发展。</li><li>采取一些国家资本主义的形式来发展生产。</li></ul></li><li><p>列宁的论述：</p><ul><li>建设社会主义是一个长期探索、不断实践的过程。</li><li>大力发展生产力、提高劳动生产率为首位。</li><li>在多种经济成分并存的条件下，利用商品、货币和市场发展经济。</li><li>利用资本主义建设社会主义。</li></ul></li></ul></li><li><p>苏联模式：1936年，苏维埃第八次非常代表大会通过的宪法中，宣布苏联已经建成社会主义。</p><ul><li>经济上：单一的生产资料公有制，过度集中的指令性计划经济模式。</li><li>政治上：过度集权的领导体制、自上而下的干部任命制、软弱而低效的监督机制。</li></ul></li></ol><h3 id="科学社会主义">科学社会主义</h3><ol type="1"><li><p>科学社会主义基本原则是马克思主义的核心内容：</p><ul><li>资本主义必然灭亡，社会主义必然胜利。</li><li>无产阶级是最先进最革命的阶级，肩负推翻资本主义、建设社会主义的历史使命。</li><li>无产阶级政党是无产阶级的先锋队，社会主义事业必须始终坚持无产阶级政党的领导。</li><li>无产阶级革命是无产阶级斗争的最高形式，以建立无产阶级专政的国家政权为目的。</li><li>在生产资料公有制的基础上组织生产，满足全体社会成员需要为生产的根本目的。</li><li>对社会生产进行有计划的指导和条件，实行按劳分配。</li><li>大力解放和发展生产力，消灭剥削和两极分化，实现共同富裕。</li><li>坚持科学理论指导，大力发展社会主义先进文化。</li><li>合乎自然规律地改造和利用自然，努力实现人与自然的和谐共生。</li><li>实现共产主义是最高理想。</li></ul></li><li><p>中国特色社会主义既坚持了科学社会主义基本原则，又根据时代和国情赋予其鲜明的中国特色。</p><ul><li>这是中国特色社会主义蓬勃发展的根本原因。</li></ul></li><li><p>如何正确把握科学社会主义基本原则：</p><ul><li>坚持科学社会主义基本原则，将其与本国实际和时代特征相结合。</li><li>紧跟时代和实践的发展，进一步丰富和发展科学社会主义基本原则。</li></ul></li><li><p>社会主义建设具有艰巨性、长期性，发展道路具有多样性；社会主义发展具有前进性和曲折性。</p></li><li><p>社会主义如何改革：</p><ul><li>要坚持正确理论指导和改革方向，选择正确改革方式，妥善处理改革、发展和稳定的关系。</li></ul></li></ol><h3 id="共产主义">共产主义</h3><ol type="1"><li><p>实现共产主义是历史发展的必然，是长期的历史过程。共产主义的特征有：</p><ul><li>物质财富极大丰富，消费资料按需分配。</li><li>社会关系高度和谐，人民精神境界提高。</li><li>根本特征是每个人自由而全面地发展。</li></ul></li><li><p>共产主义远大理想和中国特色社会主义共同理想：</p><ul><li><p>两者关系：最终理想和阶段性理想、最高纲领和较低纲领、全人类理想和全体中国人民理想。</p></li><li><p>坚持远大理想和共同理想的辩证统一。</p></li><li><p>坚定理想信念，投身新时代中国特色社会主义事业。</p></li></ul></li><li><p>预见未来社会的方法论原则：</p><ul><li>揭示人类社会发展一般规律。</li><li>剖析旧世界，阐发新世界。</li><li>在社会主义社会发展中不断深化对未来社会的认识。</li><li>立足于一般特征，不具体描述细节。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今客沧桑登舞榭，万灵且待命无疆！&lt;/p&gt;</summary>
    
    
    
    <category term="大学政治" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>软件质量管理_工程技术</title>
    <link href="http://example.com/2024/06/24/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/4.%20%E5%B7%A5%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2024/06/24/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/4.%20%E5%B7%A5%E7%A8%8B%E6%8A%80%E6%9C%AF/</id>
    <published>2024-06-24T04:00:00.000Z</published>
    <updated>2024-06-27T12:26:01.951Z</updated>
    
    <content type="html"><![CDATA[<p>高堂明镜悲白发，朝如青丝暮成雪。</p><span id="more"></span><h1 id="工程技术">4. 工程技术</h1><h2 id="需求">4.1 需求</h2><ol type="1"><li>需求开发</li></ol><p>需求是一切工程活动的基础。</p><p>需求类别：</p><ul><li>客户需求</li><li>产品需求</li><li>产品组件需求</li></ul><ol start="2" type="1"><li>需求获取</li></ol><p>客户所受到的限制也应当作为需求开发过程中需要重点关注的内容。</p><ul><li><p>通常采取所谓的需求“诱导”方式进行。</p></li><li><p>“诱导”一词的含义不仅仅是普通的需求采集，它隐含了应更加积极地、前瞻性地识别那些客户没有明确提供的额外需求。</p></li></ul><ol start="3" type="1"><li>需求汇总</li></ol><ul><li>整理各种来源的信息，识别缺失的信息</li><li>解决冲突的需求</li><li>需求的整理和转化</li><li>推导未显式描述的需求内容</li></ul><ol start="4" type="1"><li>需求验证</li></ol><p>对需求进行分析和确认，以确保符合使用者预期</p><p>典型活动包括</p><ul><li>建立和维护操作概念和相关的场景</li><li>分析需求</li><li>确认需求</li></ul><ol start="5" type="1"><li>需求文档</li></ol><p>需求开发工作完成的一个基本标志是形成了一份完整的、规范的、经过评审的需求规格说明书。</p><p>需求规格说明书的编制是为了使用户和软件开发者双方对该软件的初始规定有一个共同的理解，使之成为整个开发工作的基础。</p><p>特征：内聚、完整、一致、原子、可跟踪、非过期、可行性、非二义性、强制、可验证</p><h2 id="设计">4.2 设计</h2><p>考虑点：</p><ol type="1"><li><p>团队智慧</p><p>发挥团队智慧两大挑战：</p><ul><li>确定整体架构之前很难进行分工</li><li>鼓励团队成员在讨论和评审会议中的参与程度</li></ul></li><li><p>设计标准</p><p>命名规范、接口标准、系统出错信息、设计表示标准</p></li><li><p>复用</p><p>建立一套复用管理流程，具体而言，包括</p><ul><li><p>复用接口标准</p></li><li><p>复用文档标准</p></li><li><p>复用质量保证机制</p></li></ul></li><li><p>可测试性</p><p>尽可能减少测试代码的数量，制作合理的测试计划。</p></li><li><p>可用性</p><ul><li>在设计阶段就开始考虑。</li><li>针对每一个关键功能都定义操作概念和操作场景。</li><li>可以邀请最终用户参与场景的评审，使用模拟、原型等技术，更好的把握用户真实意图。</li></ul></li></ol><h2 id="实现">4.3 实现</h2><p>考虑点：评审、复用、可用性。</p><h2 id="集成">4.4 集成</h2><ul><li>大爆炸集成策略</li><li>逐一添加集成策略</li><li>集簇集成策略</li><li>扁平化集成策略</li></ul><h2 id="验证和确认">4.5 验证和确认</h2><p>都是为了提升最终产品的质量而采取的措施。</p><p>目的不同。</p><ul><li><p>验证是目的是确保选定的工作产品与事先指定给该工作产品的需求一致。</p></li><li><p>确认的目标则是确保开发完成的产品或者产品组件在即将要使用该产品或者产品组件的环境中工作正确。</p></li></ul><p>验证和确认活动：</p><ol type="1"><li><p>环境准备</p></li><li><p>对象选择</p></li><li><p>活动实施</p></li><li><p>结果分析</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;高堂明镜悲白发，朝如青丝暮成雪。&lt;/p&gt;</summary>
    
    
    
    <category term="软件质量管理" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>软件质量管理_质量管理</title>
    <link href="http://example.com/2024/06/23/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/3.%20%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2024/06/23/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/3.%20%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/</id>
    <published>2024-06-23T04:00:00.000Z</published>
    <updated>2024-06-27T15:20:59.245Z</updated>
    
    <content type="html"><![CDATA[<p>高堂明镜悲白发，朝如青丝暮成雪。</p><span id="more"></span><h1 id="质量管理">3. 质量管理</h1><h2 id="概念">3.0 概念</h2><p>软件质量：</p><p>与软件产品满足规定的和隐含的需求能力有关的特征或者特性的全体。</p><h3 id="面向用户的质量观">3.0.1 面向用户的质量观</h3><p>定义质量为满足用户需求的程度。在这个定义中，就需要进一步明确：</p><ul><li>用户究竟是谁？</li><li>用户需求的优先级是什么？</li><li>这种用户的优先级对软件产品的开发过程产生什么样的影响？</li><li>怎样来度量这种质量观下的质量水平？</li></ul><h3 id="质量管理策略">3.0.2 质量管理策略</h3><p>用缺陷管理来替代质量管理。</p><ul><li><p>高质量产品也就意味着要求组成软件产品的各个组件基本无缺陷。</p></li><li><p>PSP：各个组件的高质量是通过高质量评审来实现的</p></li></ul><h4 id="测试消除缺陷流程">测试消除缺陷流程</h4><ol type="1"><li>发现异常行为</li><li>理解工作方式</li><li>找出出错原因</li><li>确定修改方案</li><li>测试修改有效</li></ol><h4 id="评审发现缺陷流程">评审发现缺陷流程</h4><ol type="1"><li>理解程序流程</li><li>发现缺陷的位置和原因</li><li>修正缺陷</li></ol><h2 id="评审">3.1 评审</h2><h3 id="质量控制指标">3.1.1 质量控制指标</h3><h4 id="yield">Yield</h4><p>度量每个阶段在消除缺陷方面的效率。</p><ul><li>Phase Yield = <spanclass="math inline">\(100\times\frac{某阶段发现的缺陷个数}{某阶段注入的缺陷个数+进入该阶段前遗留的缺陷个数}\)</span></li><li>Process Yield = <spanclass="math inline">\(100\times\frac{第一次编译前发现的缺陷个数}{第一次编译前注入的缺陷个数}\)</span></li></ul><h4 id="afr">A/FR</h4><p>PSP质检成本/PSP失效成本。</p><ul><li>理论上，A/FR的值越大，往往意味着越高的质量。</li><li>过高的A/FR往往意味着做了过多的评审，反而会导致开发效率的下降。</li><li>作为指南，在PSP中A/FR的期望值就是2.0。</li></ul><h4 id="pqi">PQI</h4><p>5个数据乘积：</p><ul><li>设计质量：设计的时间应该大于编码的时间</li><li>设计评审质量：设计评审的时间应该大于设计时间的50%</li><li>代码评审质量：代码评审时间应该大于编码时间的50%</li><li>代码质量：代码的编译缺陷密度应当小于10个/千行</li><li>程序质量：代码单元测试缺陷密度应当小于5个/千行</li></ul><h4 id="评审速度">评审速度</h4><p>评审速度(Review Rate)是一个用以指导软件工程师开展有效评审的指标。</p><ul><li>高质量的评审需要软件工程师投入足够的时间进行评审。</li><li>在PSP的实践中，代码评审速度小于200 LOC/小时，文档评审速度小于4Page/小时。</li></ul><h4 id="drl">DRL</h4><p>缺陷消除效率比，度量的是不同缺陷消除手段消除缺陷的效率。</p><ul><li><p>计算方式：</p><p>以某个测试阶段（一般为单元测试）每小时发现的缺陷数为基础，其他阶段每小时发现缺陷数与该测试阶段每小时发现的缺陷的比值就是DRL。</p></li></ul><h3 id="其他因素">3.1.2 其他因素</h3><p>打印后评审往往效果更好</p><ul><li>单个屏幕可以展现的内容比较有限</li><li>评审人员的注意力</li></ul><p>评审时机选择：编译（UT）之前 VS. 之后</p><p>个人评审和小组评审</p><ul><li><p>小组评审意义</p></li><li><p>先后顺序</p></li></ul><h2 id="质量路径">3.2 质量路径</h2><h3 id="质量路径-1">3.2.1 质量路径</h3><p>Step 1：各种测试</p><p>Step 2：进入测试之前的产物质量提升</p><p>Step 3：评审过程度量和稳定</p><p>Step 4：质量意识和主人翁态度</p><p>Step 5：个体review的度量和稳定</p><p>Step 6：诉诸设计</p><p>Step 7：缺陷预防</p><p>Step 8：用户质量观——其他质量属性</p><h3 id="设计">3.2.2 设计</h3><h4 id="设计内容">设计内容</h4><table><thead><tr class="header"><th></th><th><strong>动态信息</strong></th><th><strong>静态信息</strong></th></tr></thead><tbody><tr class="odd"><td><strong>外部信息</strong></td><td>交互信息（服务、消息等）</td><td>功能（继承、类结构等）</td></tr><tr class="even"><td><strong>内部信息</strong></td><td>行为信息（状态机）</td><td>结构信息（属性、业务逻辑等）</td></tr></tbody></table><h5 id="psp设计模板">PSP设计模板</h5><ul><li><p>操作规格模板（Operational Specification Template，简称OST）</p></li><li><p>功能规格模板（Functional Specification Template，简称FST）</p></li><li><p>状态规格模板（State Specification Template，简称SST）</p></li><li><p>逻辑规格模板（Logical Specification Template，简称LST）</p></li></ul><table><thead><tr class="header"><th></th><th><strong>动态信息</strong></th><th><strong>静态信息</strong></th></tr></thead><tbody><tr class="odd"><td><strong>外部信息</strong></td><td>OST/FST</td><td>FST</td></tr><tr class="even"><td><strong>内部信息</strong></td><td>SST</td><td>LST</td></tr></tbody></table><h5 id="uml图">UML图</h5><table><thead><tr class="header"><th></th><th><strong>动态信息</strong></th><th><strong>静态信息</strong></th></tr></thead><tbody><tr class="odd"><td><strong>外部信息</strong></td><td>用例图、时序图</td><td>类图</td></tr><tr class="even"><td><strong>内部信息</strong></td><td>状态机图</td><td>？</td></tr></tbody></table><h4 id="设计层次">设计层次</h4><figure><img src="/image/软件质量管理/设计层次.png" alt="设计层次" /><figcaption aria-hidden="true">设计层次</figcaption></figure><p>PSP模板</p><figure><img src="/image/软件质量管理/PSP设计模板.png" alt="PSP设计模板" /><figcaption aria-hidden="true">PSP设计模板</figcaption></figure><h3 id="设计评审">3.2.3 设计评审</h3><h4 id="状态机验证">状态机验证</h4><p>正确状态机：完整、正交</p><p>验证方法：</p><ul><li>检验状态机，消除死循环和陷阱状态。</li><li>检查状态转换，验证完整性和正交性。</li><li>评价状态机，检验是否体现设计意图。</li></ul><h4 id="符号化执行">符号化执行</h4><p>符号化验证方法的基本思想是将描述设计的逻辑规格（一般用伪代码程序表示）用代数符号来表示，然后系统地开展分析和验证。具体步骤如下：</p><ol type="1"><li>识别伪码程序中的关键变量</li><li>将这些变量用代数符号表示，重写伪码程序</li><li>分析伪码程序的行为</li></ol><p>优缺点：</p><ol type="1"><li><p>实施简单，可以给出一般化的验证结果。</p></li><li><p>通常用在验证一些复杂算法中，特别是对遗留系统的改造中，往往应用这种方法来识别和理解原有的设计。</p></li><li><p>不适用于有复杂逻辑的场合，而且，纯手工的验证方法也容易引入一些人为的错误。</p></li></ol><h4 id="执行表">执行表</h4><p>用一种有序的方法来跟踪伪码程序的执行状况，分析程序行为，从而验证设计。具体步骤如下：</p><ol type="1"><li>识别伪码程序的关键变量</li><li>构建表格，表格左侧填入主要程序步骤，右侧填入关键变量</li><li>初始化被选定的变量</li><li>跟踪被选择的关键变量的变化情况，从而判断程序行为。</li></ol><h4 id="跟踪表">跟踪表</h4><p>跟踪表验证方法是对执行表验证方法的一种扩充。具体步骤如下：</p><ol type="1"><li>识别伪码程序的关键变量</li><li>构建表格，表格左侧填入主要程序步骤，右侧填入关键变量</li><li>初始化被选定的变量</li><li>识别将伪码程序符号化的机会，并加以符号化</li><li>定义并且优化用例组合</li><li>跟踪被选择的关键变量的变化情况，从而判断程序行为。</li></ol><h4 id="正确性检验">正确性检验</h4><p>将伪码程序当成数学定理，采用形式化方法加以推理和验证。这种方法的步骤如下：</p><ol type="1"><li>分析和识别用例</li><li>对于复杂伪码程序的结构，应用正确性检验的标准问题逐项加以验证</li><li>对于不能明确判断的复杂程序结构，使用跟踪表等辅助验证。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;高堂明镜悲白发，朝如青丝暮成雪。&lt;/p&gt;</summary>
    
    
    
    <category term="软件质量管理" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>软件质量管理_项目管理</title>
    <link href="http://example.com/2024/06/22/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/2.%20%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2024/06/22/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/2.%20%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</id>
    <published>2024-06-22T04:00:00.000Z</published>
    <updated>2024-06-27T15:19:31.254Z</updated>
    
    <content type="html"><![CDATA[<p>高堂明镜悲白发，朝如青丝暮成雪。</p><span id="more"></span><h1 id="项目管理">2. 项目管理</h1><p>管理的三大关键要素：</p><ul><li>目标</li><li>状态</li><li>纠偏</li></ul><h2 id="概念">2.0 概念</h2><p>应用方法、工具、技术以及人员能力来完成软件项目，实现项目目标的过程。</p><h3 id="三大目标">三大目标</h3><p>成本、质量、工期。</p><h2 id="团队动力学">2.1 团队动力学</h2><h3 id="知识工作">2.1.1 知识工作</h3><p>软件开发是一项既复杂又富有创造性的知识工作。</p><ul><li>处理和讨论极其抽象的概念</li><li>把不同的部分（不可见）整合成一个可以工作的系统</li></ul><h4 id="知识工作管理">知识工作管理</h4><p>关键规则：管理者无法管理工作者，知识工作者必须实现并且学会自我管理。</p><p>知识工作者必须</p><ul><li>有积极性</li><li>能做出准确的估算和计划</li><li>懂得协商承诺</li><li>有效跟踪他们的计划</li><li>持续地按计划交付高质量产物</li></ul><h4 id="领导者">领导者</h4><p>知识工作者的管理需要的是领导者，而不是经理。</p><h4 id="激励手段">激励手段</h4><p>三种主要手段</p><ol type="1"><li>威逼</li><li>利诱</li><li>鼓励承诺</li></ol><h5 id="领导方式">领导方式</h5><p>交易型</p><ul><li>承诺奖励激励</li><li>人们通常能找到新的方式来获得奖励，同时少做工作。</li><li>威逼和利诱属于交易型领导方式。</li></ul><p>转变型</p><ul><li>用成就激励</li><li>鼓励承诺属于转变型领导方式。</li></ul><p>交易型领导方式很少能产生成功并且有创造性的团队，因此转变型领导方式是首选。</p><h6 id="承诺激励">承诺激励</h6><p>个人级别的差异</p><ul><li>有些人对待承诺十分认真。</li><li>有些人对待承诺十分轻率。</li></ul><p>当满足以下情况，团队承诺比个人承诺的激励作用更大</p><ul><li>所有团队成员共同参与作出承诺。</li><li>团队依赖于每一位成员履行自己的承诺。</li></ul><p>一个软件开发团队在制定承诺时，要保证</p><ul><li>承诺是自愿的</li><li>承诺是公开的</li><li>承诺是可信（行）的</li><li>向团队承诺</li></ul><h6 id="维持激励">维持激励</h6><p>维持激励需要及时的绩效反馈。</p><p>包括</p><ul><li>根据一个详细计划衡量进度</li><li>当前计划不准确时重做计划</li><li>为漫长而富有挑战性的项目提供中间反馈，即里程碑</li></ul><h5 id="马斯洛需求层次理论">马斯洛需求层次理论</h5><figure><img src="/image/软件质量管理/maslo.png" alt="maslo" /><figcaption aria-hidden="true">maslo</figcaption></figure><ol type="1"><li>自我实现是最高的层次</li><li>激励来自为没有满足的需求而努力奋斗</li><li>低层次的需求必须在高层次需求满足之前得到满足</li><li>满足高层次的需求的途径比满足低层次的途径更为广泛</li></ol><h5 id="期望理论">期望理论</h5><ol type="1"><li><p>海兹伯格：</p><ul><li>激励因素（内在因素）：<ul><li>成就感，责任感，晋升，被赏识、认可</li></ul></li><li>保健因素（外在因素）：<ul><li>工作环境，薪金，工作关系，安全等</li></ul></li></ul></li><li><p>麦克勒格X理论</p><ul><li>不喜欢他们的工作并努力逃避工作</li><li>缺乏进取心，没有解决问题与创造的能力</li><li>更喜欢经常的指导，避免承担责任，缺乏主动性</li><li>自我中心，对组织需求反应淡漠，反对变革</li></ul><p>用马斯洛的底层需求（生理和安全）进行激励。</p></li><li><p>麦克勒格Y理论</p><ul><li>如果给予适当的激励和支持性的工作氛围，会达到很高的绩效预期</li><li>具有创造力，想象力，雄心和信心来实现组织目标</li><li>能够自我约束，自我导向与控制，渴望承担责任</li></ul><p>用马斯洛的高层需求（自尊和自我实现）进行激励。</p></li><li><p>期望理论</p><p>人们在下列情况下能够受到激励并且出大量成果<spanclass="math inline">\(M=V\times E\)</span></p><ul><li>相信他们的努力很可能会产生成功的结果（V）</li><li>他们也相信自己会因为成功得到相应的回报（E）</li></ul></li></ol><h3 id="自主团队">2.1.2 自主团队</h3><p>自主团队具备如下的特点：</p><ul><li>自行定义项目的目标</li><li>自行决定团队组成形式以及成员的角色</li><li>自行决定项目的开发策略</li><li>自行定义项目的开发过程</li><li>自行制定项目的开发计划</li><li>自行度量、管理和控制项目工作</li></ul><h4 id="外部环境">外部环境</h4><p>项目启动阶段获得管理层的支持。</p><ul><li>体现出已经尽最大的可能在满足管理层的需求的工作态度。</li><li>在计划中体现定期需要向管理层报告的内容。</li><li>向管理层证明他们所制定的工作计划是合理的。</li><li>在计划中体现为了追求高质量而开展的工作。</li><li>在工作计划中允许必要的项目变更。</li><li>向管理层寻求必要的帮助。</li></ul><p>在项目进展过程中获得管理层的支持</p><ul><li>严格遵循定义好的开发过程开展项目开发工作。</li><li>维护和更新项目成员的个人计划和团队计划。</li><li>对产品质量进行管理。</li><li>跟踪项目进展，并定期向管理层报告。</li><li>持续地向管理层展现优异的项目表现。</li></ul><h4 id="tsp启动过程">TSP启动过程</h4><ol type="1"><li>第一次会议：建立产品目标和业务目标</li><li>第二次会议：角色分配、小组目标定义</li><li>第三次会议：开发流程定义与策略选择</li><li>第四次会议：整体计划</li><li>第五次会议：质量计划</li><li>第六次会议：个人计划以及计划平衡</li><li>第七次会议：风险评估</li><li>第八次会议：准备向管理层汇报计划</li><li>第九次会议：向管理层汇报计划内容</li><li>启动总结</li></ol><h4 id="tsp角色和职责">TSP角色和职责</h4><p>领导者和经理的区别</p><table><thead><tr class="header"><th><strong>角色经理</strong></th><th><strong>团队领导者</strong></th></tr></thead><tbody><tr class="odd"><td>告知</td><td>倾听</td></tr><tr class="even"><td>指导</td><td>询问</td></tr><tr class="odd"><td>说服</td><td>激励/挑战</td></tr><tr class="even"><td>决定</td><td>促进达成一致</td></tr><tr class="odd"><td>控制</td><td>教练</td></tr><tr class="even"><td>监控</td><td>授权</td></tr><tr class="odd"><td>设定目标</td><td>挑战</td></tr></tbody></table><ol type="1"><li><p>项目组长：</p><ul><li>建设和维持高效率的团队。</li><li>激励团队成员积极工作。</li><li>合理处理团队成员的问题。</li><li>向管理层提供项目进度相关的完整信息。</li><li>充当合格的会议组织者和协调者。</li></ul></li><li><p>计划经理：</p><p>开发完整的、准确的团队计划和个人计划，每周准确的报告项目小组状态。</p></li><li><p>开发经理：</p><p>开发优秀的软件产品，充分利用团队成员的技能。</p></li><li><p>质量经理：</p><ul><li><p>项目团队严格按照质量计划开展工作，开发出高质量的软件产品</p></li><li><p>所有的小组评审工作都正常开展，并且都形成了评审报告</p></li></ul></li><li><p>过程经理：</p><ul><li>所有团队成员准确的记录、报告和跟踪过程数据。</li><li>所有的团队会议都有相应会议记录。</li></ul></li><li><p>支持经理</p><ul><li>项目小组在整个开发过程中都有合适的工具和环境</li><li>跟踪项目小组的风险和问题</li><li>项目小组在开发过程中满足复用目标</li></ul></li><li><p>开发人员</p></li></ol><h4 id="scrum角色和职责">SCRUM角色和职责</h4><p>典型SCRUM团队由一名产品负责人、开发团队和一名SCRUM Master组成。</p><ul><li>SCRUM团队是跨职能的自组织团队</li></ul><ol type="1"><li><p>产品负责人：</p><p>职责：将开发团队开发的产品价值最大化。</p><p>工作：管理产品待办列表的唯一负责人。</p></li><li><p>开发团队：</p><p>负责在每个 Sprint 结束时交付潜在可发布并且“完成”的产品增量。</p></li><li><p>Scrum Master：</p><p>促进和支持SCRUM，帮助每个人理解 SCRUM理论、实践、规则和价值。</p></li></ol><h2 id="估算计划和跟踪">2.2 估算、计划和跟踪</h2><h3 id="估算">2.2.1 估算</h3><p>目的：给各类计划提供决策依据</p><p>对象：规模、时间和日程</p><p>怎么做估算？</p><ol type="1"><li><p>估算要的是过程，而非结果；估算的过程是相关干系人达成一致共识的过程</p></li><li><p>最终目标是达成共识</p></li><li><p>建立信心</p><ul><li><p>足够详细</p></li><li><p>依赖数据</p></li><li><p>最好的猜测（注意检验猜测所依据的假设）</p></li></ul></li></ol><h4 id="probe估算方法">PROBE估算方法</h4><p>精确度量往往不便于早期估算，有助于早期估算的度量往往难以产生精确结果。</p><p>PROBE：精确度量和早期规划之间的桥梁。</p><p>PROBE估算流程：</p><ol type="1"><li>概要设计</li><li>代理识别和代理规模</li><li>估算并调整程序规模/资源</li><li>计算预测区间</li></ol><p>概要设计过程：</p><ol type="1"><li>确定产品功能，以及产生这些功能所需的程序组件/模块</li><li>将这些程序组件/模块与你以前写的程序相比较，估算它们的规模</li><li>将程序组件/模块估算综合给出总规模</li></ol><p>估算结果整合：</p><ul><li>整合一个开发人员做的多个估算<ul><li>累积各个部分的估算</li><li>进行一次线性回归计算</li><li>计算一个预测区间</li></ul></li><li>多个开发人员可以整合独立进行的估算，通过以下方式<ul><li>进行单独的线性回归预测</li><li>将计划的规模或者时间相加</li><li>将个人范围的平方相加，再对其计算平方根获得预测区间</li></ul></li></ul><h4 id="srum故事点">SRUM故事点</h4><p>度量实现一个故事需要付出的工作量。</p><ul><li><strong>抽象：</strong>混合了对于开发特性所要付出的努力、开发复杂度、个中风险以及类似东西</li><li><strong>相对：</strong>设定标准之后，考虑其他特性与标准之间的相对大小关系</li></ul><h3 id="计划">2.2.2 计划</h3><h4 id="工作分解结构">工作分解结构</h4><p>创建方法：</p><ol type="1"><li>识别和分析可交付成果及相关工作；</li><li>确定工作分解结构的结构与编排方法；</li><li>自上而下逐层细化分解；</li><li>为工作分解结构组成部分制定和分配标志编码；</li><li>核实工作分解的程度是必要且充分的。</li></ol><p>检查标准：</p><ol type="1"><li>最底层要素不能重复，即任何一个工作包只应该在 WBS中的一个地方出现。</li><li>所有要素必须清晰完整定义，即相应的数据词典必须完整定义。</li><li>最底层要素必须有定义清晰的责任人，可以支持成本估算和进度安排。</li><li>最底层的要素是实现目标的成分必要条件，即项目的工作范围得到完整体现。</li></ol><h4 id="通用计划框架">通用计划框架</h4><figure><img src="/image/软件质量管理/通用计划框架.png" alt="通用计划框架" /><figcaption aria-hidden="true">通用计划框架</figcaption></figure><h4 id="各类计划">各类计划</h4><ol type="1"><li><p>质量计划</p><ul><li><p>确定需要开展的质量保证活动。</p></li><li><p>典型的质量保证活动：个人评审、团队评审、单元测试、集成测试、系统测试、验收测试等。</p></li><li><p>需要解决的关键问题：该开展哪些活动，以及这些活动开展的程度，如时间、人数和目标。</p></li></ul></li><li><p>风险计划</p><ul><li>目的：在风险发生前，识别出潜在的问题，以便在产品或项目的生命周期中规划和实施风险管理活动，以消除潜在问题对项目产生的负面影响。</li><li>风险管理：<ul><li>风险识别<ul><li>识别与成本、进度及绩效相关的风险，审查可能影响项目的环境因素、工作分解结构的所有组件、项目计划的所有组件</li><li>记录风险的内容、条件及可能的结果，识别每一风险相关的干系人</li><li>利用已定义的风险参数，评估已识别的风险，依照定义的风险类别，将风险分类并分组，排列降低风险的优先级</li></ul></li><li>风险应对：制定相应的风险管理策略。<ul><li>风险转嫁</li><li>风险解决</li><li>风险缓解</li></ul></li></ul></li></ul></li></ol><h3 id="跟踪">2.2.3 跟踪</h3><p>目的：了解项目进度。</p><ul><li><p>在项目实际进展与计划产生严重偏离时，可采取适当的纠正措施。</p></li><li><p>项目进度滞后与否需要参照物，即项目计划。</p></li><li><p>项目跟踪需要管理针对偏差而采取的纠偏措施。</p></li></ul><h4 id="挣值管理方法">挣值管理方法</h4><p>Earned Value Management，简称EVM。</p><ul><li><p>每项任务实现附以一定价值</p></li><li><p>100%完成该项任务，就获得相应价值</p></li></ul><p>采用与进度计划、成本预算和实际成本相联系的三个独立的变量，进行项目绩效测量。</p><ul><li><p>简单实现：</p><p>仅仅关注进度信息。</p><ol type="1"><li><p>建立 WBS，定义工作范围</p></li><li><p>为 WBS 中每一项工作定义一个价值（PV）</p></li><li><p>最后按照一定的规则将某一数值赋给已经完成的工作或者正在进行的工作。</p><p>常用规则分别为 0-100 规则和 50-50规则，前者只有当某项任务完成时，该任务的 PV 值将转化成 EV值；后者只需要开始某项任务，即可以赋原 PV 值的 50%作为 EV值，完成时，再加上另外的 50%。而实际完成的工作所需成本 AC 不对 EV值产生任何影响。</p></li></ol></li><li><p>中级实现在简单实现的基础上，加入日程偏差的计算。典型计算方式有：</p><ul><li>日程偏差 SV = EV – PV；</li><li>日程偏差指数 SPI = EV/PV；</li></ul></li><li><p>高级实现在中级实现的基础上，还需要考察项目的实际成本。</p></li></ul><h5 id="常用evm度量">常用EVM度量</h5><p>BAC表示按照PV值的曲线，当项目完成的时候所需预算或者时间</p><p>成本差异CV = EV-AC</p><p>成本差异指数CPI = EV/AC</p><p>日程偏差SV = EV – PV</p><p>日程偏差指数SPI = EV/PV</p><p>预计完成成本EAC = AC+(BAC-EV)/CPI = BAC/CPI</p><h5 id="燃尽图">燃尽图</h5><p>纵坐标为总估计时间，横坐标为迭代时间线，估计曲线为估计的剩余任务，实际曲线为实际的剩余任务。</p><h5 id="局限性">局限性</h5><p>EVM 一般不能应用软件项目的质量管理。</p><p>EVM需要定量化的管理机制，这就使其在一些探索型项目以及常用的敏捷开发方法中的应用受到限制</p><p>EVM完全依赖项目的准确估算，然而在项目早期，很难对项目进行非常准确的估算。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;高堂明镜悲白发，朝如青丝暮成雪。&lt;/p&gt;</summary>
    
    
    
    <category term="软件质量管理" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>软件质量管理_概述</title>
    <link href="http://example.com/2024/06/21/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/1.%20%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2024/06/21/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/1.%20%E6%A6%82%E8%BF%B0/</id>
    <published>2024-06-21T04:00:00.000Z</published>
    <updated>2024-06-27T08:42:17.823Z</updated>
    
    <content type="html"><![CDATA[<p>高堂明镜悲白发，朝如青丝暮成雪。</p><span id="more"></span><h1 id="概述">1. 概述</h1><h2 id="软件危机">1.0 软件危机</h2><p>软件在改变（定义？颠覆？）我们的世界。</p><p>软件自身的变化：规模、比例。</p><h3 id="软件四大本质困难和挑战">软件四大本质困难和挑战</h3><p>复杂性、不可见性、可变性、一致性</p><ul><li>除了不可见性，其他三个本质难题因项目而异</li><li>四大本质难题相互促进</li><li>本质难题变化带动软件方法（过程）演变</li></ul><h3 id="软件危机-1">软件危机</h3><p>软件危机是指落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象。</p><h3 id="软件工程">软件工程</h3><p>一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。</p><p>软件工程的两大视角</p><ul><li>管理视角——能否复制成功？</li><li>技术视角——是否可以将问题解决得更好？</li></ul><h2 id="软件项目与过程管理">1.1 软件项目与过程管理</h2><p>管理的三大关键要素：</p><ul><li>目标</li><li>状态</li><li>纠偏</li></ul><h3 id="软件项目管理">1.1.1 软件项目管理</h3><p>应用方法、工具、技术以及人员能力来完成软件项目，实现项目目标的过程。</p><ul><li>三大目标：成本、质量、工期</li><li>估算、计划、跟踪、风险管理、范围管理、人员管理、沟通管理，等等</li></ul><p>核心问题：复制成功</p><h4 id="软件过程">软件过程</h4><p>为了实现一个或者多个事先定义的目标而建立起来的一组实践的集合</p><ul><li>这组实践间往往有一定先后顺序，作为整体来实现事先定义的一个或者多个目标。</li></ul><h4 id="广义软件过程">广义软件过程</h4><p>理论基石：软件产品和服务的质量，很大程度上取决于生产维护该软件或者服务的过程的质量。</p><p>广义软件过程包括技术、人员以及狭义过程。</p><ul><li>也称软件开发方法、软件开发过程。</li><li>极限编程方法、SCRUM方法、Gate方法</li><li>敏捷软件过程／方法、轻量型过程／方法以及重型过程／方法等</li></ul><h4 id="生命周期模型">生命周期模型</h4><p>对软件过程的一种人为的划分。</p><ul><li>生命周期模型是软件开发过程的主框架，是对软件开发过程的一种粗粒度划分。</li><li>生命周期模型往往不包括技术实践。</li><li>瀑布模型、迭代式模型、增量模型、螺旋模型、原型法等等</li></ul><h3 id="软件过程管理">1.1.2 软件过程管理</h3><p>管理对象：软件过程</p><p>目的：让软件过程在开发效率、质量等方面有着更好性能绩效</p><ul><li>软件项目管理：产品生产管理（SCRUM、Kanban）</li><li>软件过程管理：流水线的设计、建设、维护、优化（CMMI、SPICE）</li></ul><h4 id="软件过程改进">软件过程改进</h4><ul><li>管理参考模型：CMM/CMMI、SPICE</li><li>改进参考元模型：PDCA、IDEAL</li></ul><h2 id="软件发展三大阶段">1.2 软件发展三大阶段</h2><ol type="1"><li>软硬件一体化阶段（50年代~70年代）</li></ol><ul><li>软件完全依附于硬件</li><li>软件作坊</li></ul><ol start="2" type="1"><li>软件成为独立的产品（70年代~90年代）</li><li>网络化和服务化（90年代中期迄今）</li></ol><h3 id="软硬件一体化">1.2.1 软硬件一体化</h3><h4 id="软件完全依附于硬件">软件完全依附于硬件</h4><p>软件应用典型特征：</p><ul><li><p>软件支持硬件完成计算任务</p></li><li><p>功能单一</p></li><li><p>复杂度有限</p></li><li><p>几乎不需要需求变更</p></li></ul><p>软件开发典型特征</p><ul><li>硬件太贵</li><li>团队以硬件工程师和数学家为主</li></ul><p>实践：Measure twice, cut once</p><h4 id="软件作坊">软件作坊</h4><p>软件应用典型特征</p><ul><li>功能简单</li><li>规模小</li></ul><p>软件开发典型特征</p><ul><li>很多非专业领域的人员涌入软件开发领域</li><li>高级程序语言出现</li><li>质疑权威文化盛行</li></ul><p>实践：Code and fix</p><h3 id="软件成为独立产品">1.2.2 软件成为独立产品</h3><p>软件应用特征</p><ul><li>摆脱了硬件束缚</li><li>功能强大</li><li>规模和复杂度剧增</li><li>个人电脑出现，普通人成为软件用户<ul><li>需求多变</li><li>兼容性要求</li></ul></li><li>来自市场的压力</li></ul><p>实践：</p><ul><li>形式化方法</li><li>结构化程序设计、瀑布模型</li><li>CMM/CMMI</li></ul><h3 id="网格化和服务化">1.2.3 网格化和服务化</h3><p>软件应用特征</p><ul><li>功能更复杂，规模更大</li><li>用户数量急剧增加（这会带来什么问题？）</li><li>快速演化和需求不确定</li><li>分发方式的变化（SaaS）</li></ul><p>典型软件过程和实践</p><ul><li><p>迭代式</p></li><li><p>敏捷宣言</p><ul><li>个体和互动胜过流程和工具</li><li>可以工作的软件胜过详尽的文档</li><li>客户合作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul></li><li><p>XP、SCRUM、Kanban</p></li><li><p>开源软件开发方法</p></li></ul><h3 id="软件发展现状">1.2.4 软件发展现状</h3><p>软件应用典型特征</p><ul><li><p>进一步服务化和网络化（移动是主流）</p></li><li><p>用户需求多样性进一步凸显</p></li><li><p>软件产品和服务的地位变化</p></li><li><p>错综复杂的部署环境</p></li><li><p>近乎苛刻的用户期望</p><ul><li>多：功能丰富，个性化</li><li>快：快速使用，及时更新，快速解决问题</li><li>好：稳定，可靠，安全，可信</li><li>省：用户的获得成本低，最好免费</li></ul></li></ul><p>软件开发典型特征</p><ul><li>空前强大的开发和部署环境——XaaS<ul><li>IaaS</li><li>PaaS</li><li>SaaS, FaaS</li></ul></li><li>盛行共享和开源</li><li>潜在支撑获得了长足进步（AI，Bigdata， Cloud，etc.）</li></ul><p>典型DevOps实践和方法</p><ul><li>方法论基础：敏捷软件开发、精益思想以及Kanban方法。</li><li>以领域驱动设计为指导的微服务架构方式</li><li>大量虚拟化技术的使用</li><li>一切皆服务的理念指导</li><li>构建了强大的工具链，支持高水平自动化</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;高堂明镜悲白发，朝如青丝暮成雪。&lt;/p&gt;</summary>
    
    
    
    <category term="软件质量管理" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>软件系统设计_软件架构复习</title>
    <link href="http://example.com/2024/06/14/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2024/06/14/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%A4%8D%E4%B9%A0/</id>
    <published>2024-06-14T04:00:00.000Z</published>
    <updated>2024-06-23T16:49:06.534Z</updated>
    
    <content type="html"><![CDATA[<p>天生我材必有用，千金散尽还复来。</p><span id="more"></span><h1 id="软件架构复习">软件架构复习</h1><h2 id="总览">0. 总览</h2><ol type="1"><li>软件架构</li><li>质量属性</li><li>架构模式</li><li>架构设计</li><li>架构文档化</li><li>架构评价</li><li>微服务</li></ol><h2 id="软件架构">1. 软件架构</h2><h3 id="什么是软件架构">1.1 什么是软件架构？</h3><p>程序或计算系统的结构，由软件元素、这些元素外部可⻅的属性、这些元素的关系组成。</p><h3 id="软件架构师做什么">1.2 软件架构师做什么？</h3><p>联络：客户、技术团队和业务需求分析师</p><p>软件工程</p><p>技术知识</p><p>风险管理。</p><h3 id="架构来自哪里">1.3 架构来自哪里？</h3><p>NFRs、ASRs、质量要求、涉众、组织、技术环境、业务目标</p><h3 id="架构41视图">1.4 架构4+1视图</h3><p>逻辑视图：描述架构中重要的元素及其之间的关系</p><p>进程视图：描述架构的并发和通信元素</p><p>物理视图：描述主要过程和元素是如何被映射到应⽤程序硬件</p><p>开发视图：捕获软件组件的内部组织</p><p>架构⽤例：捕获架构的需求；与多个特定视图关联</p><h3 id="架构活动和过程">1.5 架构活动和过程</h3><h4 id="架构活动">架构活动</h4><ul><li><p>创造系统的商业案例</p></li><li><p>理解需求</p></li><li><p>创造和选择架构</p></li><li><p>与包括开发者在内的涉众沟通架构</p></li><li><p>分析或评估架构</p><ul><li><p>总的⽅法</p></li><li><p>质量特定技术</p></li></ul></li><li><p>实现架构</p></li><li><p>确保架构符合要求</p></li></ul><h4 id="架构过程">架构过程</h4><ol type="1"><li>确定ASRs</li><li>架构设计</li><li>文档化</li><li>架构评估</li></ol><h3 id="软件架构知识领域">1.6 软件架构知识领域</h3><p>软件设计基本概念</p><ul><li><p>总体设计概念</p></li><li><p>上下⽂：软件开发⽣命周期——需求、设计、构建和测试</p></li><li><p>设计过程（⻆⾊、活动、⼯作产品）</p></li><li><p>软件设计的可⽤⼯具</p></li></ul><p>关键技术问题：并⾏性、事件控制和处理、分布式、异常处理、交互式系统、持久化</p><p>软件结构和架构</p><ul><li><p>架构结构和视点</p></li><li><p>架构样式和模式（宏观架构）</p></li><li><p>设计模式（微观架构）</p></li></ul><p>软件设计⽅法</p><ul><li><p>架构⽅法（如属性驱动设计）</p></li><li><p>设计⽅法（如动态系统开发⽅法）</p></li></ul><p>软件设计质量分析和评估</p><ul><li><p>质量属性</p></li><li><p>质量分析和评估⽅法、技术、⼯具</p><ul><li><p>设计审查（如 SEI 的架构权衡分析⽅法）</p></li><li><p>静态分析和动态分析</p></li><li><p>模拟和原型</p></li></ul></li><li><p>度量</p><ul><li><p>指标：架构层次</p></li><li><p>与技术有关的度量</p></li></ul></li></ul><p>设计建模和表示</p><ul><li><p>架构和设计标记（架构描述语⾔ ADL Architecture DescriptionLanguages）</p></li><li><p>统⼀建模语⾔（UML）</p></li><li><p>设计⽂档（视图和超越视图）</p></li><li><p>其他：视能⼒、关注点和领域⽽定</p></li></ul><h2 id="质量属性">2. 质量属性</h2><h3 id="软件需求">2.1 软件需求</h3><h4 id="功能需求">功能需求</h4><p>系统必须完成的、为涉众提供价值的内容。</p><ul><li>功能的实现可能⽤了很多的结构，但功能是与结构⽆关的。</li></ul><h4 id="质量需求nfrs">质量需求（NFRs）</h4><p>整个系统的期望特征，在功能需求之上。</p><ul><li>如果质量属性很重要，软件架构将约束功能的分配到不同的结构。</li></ul><h4 id="约束">约束</h4><p>0 ⾃由度、预定义的设计决定</p><ul><li>接受设计决定、协调其他受影响的设计决定，如此来满⾜约束</li></ul><h3 id="质量属性-1">2.2 质量属性</h3><p>内部/外部属性</p><h4 id="建模质量属性场景">建模质量属性场景</h4><p>源、刺激、制品、环境、响应、度量</p><h4 id="举例">举例</h4><p>可用性、互操作性、可修改性、性能、安全性、可测试性、其他</p><h4 id="质量属性战术">质量属性战术</h4><p>战术是影响质量属性响应控制的设计决定。</p><ul><li>战术的集合被称为架构策略。</li></ul><h4 id="架构设计决策检查列表">架构设计决策检查列表</h4><h3 id="架构重要需求">2.3 架构重要需求</h3><p>在架构上有深刻影响的需求。</p><p>如何收集、确认ASRs：</p><ol type="1"><li>从需求文档收集</li><li>采访涉众</li><li>理解业务目标</li><li>质量属性效用树</li></ol><h2 id="架构模式">3. 架构模式</h2><h3 id="架构模式-1">3.1 架构模式</h3><p>⼀系列在实践中能反复地看到的设计决定。</p><ul><li>上下文：经常出现的、普遍的、引起问题的情形</li><li>问题：适当地概括的，在给定上下⽂中出现</li><li>解决方案：成功的、适当抽象的架构解决⽅案</li></ul><h3 id="模块模式">3.2 模块模式</h3><p>分层模式（微内核模式）</p><h3 id="组件-连接件模式">3.3 组件-连接件模式</h3><p>代理人模式、MVC模式、管道、过滤器模式、C/S模式、P2P模式、SO模式、发布-订阅模式、数据共享模式</p><h3 id="分配模式">3.4 分配模式</h3><p>Map-Reduce模式、Multi-Tier模式</p><h3 id="模式与战术">3.5 模式与战术</h3><ol type="1"><li><p>战术⽐模式简单：使⽤单⼀的结构或机制来处理单⼀的架构要求</p></li><li><p>模式通常将多个设计决定合并到⼀个包</p></li><li><p>模式和战术⼀起构成了软件架构师的主要⼯具</p></li><li><p>战术是设计的建造⽅块，⽤来创建架构模式</p></li><li><p>⼤多数模式由⼏个不同的战术组成</p><ul><li><p>所有战术为了⼀个共同⽬的</p></li><li><p>经常被选择来保证不同的质量属性</p></li></ul></li></ol><h2 id="架构设计">4. 架构设计</h2><h3 id="通用设计策略">4.1 通用设计策略</h3><p>抽象、分解、迭代、重用</p><h3 id="设计决策分类">4.2 设计决策分类</h3><p>职责、协调、数据、资源、元素映射、技术</p><h3 id="属性驱动设计add">4.3 属性驱动设计（ADD）</h3><p>输⼊：需求</p><p>输出：软件元素、⻆⾊、职责、属性、关系</p><p>步骤：</p><ol type="1"><li>确认需求</li><li>选择并分解元素</li><li>识别ASR</li><li>选择满足ASR的设计<ul><li>确认关注点</li><li>列出可选项（模式/战术）</li><li>选择模式/战术</li><li>决定模式/战术和ASR间关系</li><li>捕捉初步架构视图</li><li>解决不一致</li></ul></li><li>实例化元素，分配职责</li><li>定义元素接口</li><li>验证、细化需求</li><li>重复2-7直到所有架构重要需求被满足</li></ol><h2 id="架构文档化">5. 架构文档化</h2><h3 id="视图">5.1 视图</h3><h4 id="样式模式和视图">样式、模式和视图</h4><p>架构样式：元素和关系类型的专⻔化，以及如何使⽤它们的⼀组约束。</p><p>架构模式：软件系统中的基础结构组织⽅法的表达。</p><ul><li>架构模式关注问题和上下午，样式侧重方法。</li></ul><p>样式的三个分类：</p><ul><li>一组样式单元：模块样式</li><li>一组有运行时行为和交互的元素：组件-连接件样式</li><li>与环境中的非软件结构关联：分配样式</li></ul><p>架构视图：⼀组系统元素及其关系的表示。</p><ul><li>视图让我们将系统实体划分成感兴趣和易于管理的系统表示。</li><li>不同的视图⽀持不同的⽬标和⽤户，凸显出不同系统元素和关系</li><li>不同视图在不同程度上展现不同的质量属性</li></ul><h4 id="结构性视图">结构性视图</h4><h5 id="模块视图">模块视图</h5><p>模块是提供⼀套连贯的职责的实现单元。</p><p>包含：</p><ul><li>分解视图 Decomposition view</li><li>使⽤视图 Uses view</li><li>概括视图 Generalization view</li><li>分层视图 Layered view</li><li>⽅⾯视图 Aspects view</li><li>数据模型视图 Data model view</li></ul><p>元素：模块，提供⼀套连贯职责的实现单元</p><p>关系：</p><ul><li><p>“⼀部分”：部分⼦模块和整体聚合模块之间的部分、整体关系</p></li><li><p>“依赖于”：两个模块之间的依赖关系。特定的模块视图详细说明了依赖关系的含义</p></li><li><p>“是”：更具体的⼦模块和更⼀般的⽗模块之间的泛化、专⻔化关系</p></li></ul><p>约束：不同模块视图可能会施加特定的拓扑约束，例如限制模块之间的可⻅性。</p><p>⽤途</p><ul><li><p>代码构建蓝图</p></li><li><p>变更影响分析</p></li><li><p>规划增量开发</p></li><li><p>需求追踪分析</p></li></ul><h5 id="组件-连接件视图">组件-连接件视图</h5><p>显示运行时组件。</p><ul><li><p>例如进程、对象、客户机、服务器和数据存储</p></li><li><p>“连接”指明了哪些连接器连接到哪些组件。</p></li></ul><p>包含：</p><ul><li>管道-过滤器视图 Pipe-and-filter view</li><li>客户机-服务端视图 Client-server view</li><li>点对点视图 Peer-to-peer view</li><li>⾯向服务架构视图 Service-oriented view</li><li>发布-订阅视图 Publish-subscribe view</li><li>共享数据视图 Shared-data view</li><li>多层视图 Multi-tier view</li></ul><p>元素：</p><ul><li><p>组件。主要处理单元和数据存储。组件有⼀组端⼝，通过这些端⼝与其他组件进⾏交互（通过连接器）</p></li><li><p>连接器。组件间交互的途径。连接器有⼀组⻆⾊（接⼝），指示组件如何在交互中使⽤连接器</p></li></ul><p>约束：</p><ul><li><p>组件只能连接到连接器，⽽不是直连其他组件</p></li><li><p>连接器只能连接到组件，⽽不是直连其他连接器</p></li><li><p>连接只能在相容的端⼝和⻆⾊上建⽴</p></li><li><p>接⼝委托只能在两个相容端⼝或⻆⾊上定义</p></li><li><p>连接器不能孤⽴出现，必须连接到组件</p></li></ul><p>⽤途</p><ul><li><p>演示系统如何⼯作</p></li><li><p>通过指定运⾏时元素的结构和⾏为来指导开发</p></li><li><p>帮助解释运⾏时系统质量属性，如性能和可⽤性</p></li></ul><h5 id="分配视图">分配视图</h5><p>描述了软件单元到软件开发或执⾏环境元素的映射。</p><p>包含：</p><ul><li>部署视图 Deployment view</li><li>安装视图 Install view</li><li>⼯作安排视图 Work assignment view</li><li>其他分配视图 Other allocation view</li></ul><p>元素</p><ul><li><p>软件元素。软件元素具有环境所需的属性</p></li><li><p>环境元素。环境元素具有提供给软件的属性</p></li></ul><p>关系：被分配。软件元素被分配到环境元素，属性取决于特定视图。</p><p>⽤途：</p><ul><li><p>⽤于对性能、可⽤性、安全性 security 和安全性 safety进⾏解释</p></li><li><p>⽤于解释分布式开发和将⼯作分配给团队</p></li><li><p>⽤于解释软件版本的并⾏访问</p></li><li><p>⽤于解释系统安装的形式和机制</p></li></ul><h4 id="质量视图">质量视图</h4><p>包含</p><ul><li><p>安全视图 Security view</p></li><li><p>性能视图 Performance view</p></li><li><p>可靠性视图 Reliability view</p></li><li><p>通信视图 Communication view</p></li><li><p>异常视图 Exception view（错误处理视图 error- handlingview）</p></li></ul><h3 id="视图文档化">5.2 视图文档化</h3><h3 id="选择视图">选择视图</h3><h4 id="选择视图-1">选择视图</h4><ol type="1"><li><p>构建涉众-视图表</p></li><li><p>组合视图</p><ol type="1"><li>确定上表中的边缘视图</li><li>通过将⼀个视图的元素与另⼀个视图中的元素相关联，将每个边缘视图与另⼀个更具⽀持性的视图相结合</li></ol></li><li><p>确定优先级和阶段</p><ul><li><p>分解视图</p></li><li><p>⼋⼆开原则</p></li><li><p>按顺序完成所有视图</p></li></ul></li></ol><h4 id="涉众文档">涉众文档</h4><p>左列是涉众的类别，右列是对应涉众如何使⽤这个⽂档。</p><h4 id="涉众-视图表">涉众-视图表</h4><p>左边是涉众，右边每⼀列都是⼀个视图，值分别表示：</p><ul><li>d 详细信息</li><li>s ⼀些细节</li><li>o ⼤概信息</li><li>x ⽆所谓。</li></ul><h3 id="超越视图">5.3 超越视图</h3><p>文档信息、架构信息、视图间映射。</p><h2 id="架构评价">6. 架构评价</h2><h3 id="架构分析评价方法">6.1 架构分析+评价方法</h3><p>软件架构分析⽅法 SAAM，Software Architecture Analysis Method</p><p>架构层级可修改性分析 ALMA，Architecture Level ModifiabilityAnalysis</p><p>软件架构性能评估 PASA，Performance Assessment of SoftwareArchitecture</p><p>架构权衡分析⽅法 ATAM，Architecture Trade-off Analysis Method</p><h3 id="atam">6.2 ATAM</h3><p>架构权衡分析⽅法，Architecture Tradeoff Analysis Method</p><ol start="0" type="1"><li><p>合作与准备</p><p>参与者：团队领导和主要项目决策者</p><p>输入：架构文档</p><p>输出：评价计划</p></li><li><p>评估1</p><p>参与者：评估团队和项目决策者</p><p>输出：架构展示、业务驱动因素、质量属性需求优先级列表、效用树、风险、敏感点和权衡点</p><ol type="1"><li>展示 ATAM</li><li>展示业务驱动因素</li><li>展示架构</li><li>识别架构⽅法</li><li>⽣成效⽤树</li><li>分析架构⽅法</li></ol></li><li><p>评估2</p><p>参与者：评估团队、项目决策者、架构涉众</p><p>输出：涉众社区的优先级场景列表、风险主题和受威胁的业务驱动因素</p><ol type="1"><li>展示 ATAM 和结果</li><li>头脑⻛暴和定优先级</li><li>分析架构⽅法</li><li>展示结果</li></ol></li><li><p>后续⾏动</p><p>参与者：评估团队和主要涉众</p><p>输出：最终评估报告</p></li></ol><h4 id="atam输出">ATAM输出</h4><ul><li>架构的简短展示</li><li>业务⽬标的表达</li><li>由质量属性场景表达的定优先级的质量属性需求</li><li>效⽤树</li><li>⼀组⻛险和⾮⻛险</li><li>⼀组⻛险主题</li><li>从架构决定到质量需求的映射</li><li>⼀组确定的敏感点和权衡点</li><li>最终评估报告</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;天生我材必有用，千金散尽还复来。&lt;/p&gt;</summary>
    
    
    
    <category term="软件系统设计" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>软件系统设计_详细设计复习</title>
    <link href="http://example.com/2024/06/13/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2024/06/13/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0/</id>
    <published>2024-06-13T04:00:00.000Z</published>
    <updated>2024-06-23T08:50:39.269Z</updated>
    
    <content type="html"><![CDATA[<p>天生我材必有用，千金散尽还复来。</p><span id="more"></span><h1 id="详细设计复习">详细设计复习</h1><h2 id="软件模式">1. 软件模式</h2><p>软件开发的总体指导思路或参照样板。</p><ul><li>软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等。</li><li>在软件生存期的每一个阶段都存在着一些被认同的模式。</li></ul><h3 id="组成">组成</h3><ul><li>问题描述</li><li>前提条件(环境或约束条件)</li><li>解法</li><li>效果。</li></ul><h3 id="大三律">大三律</h3><p>只有经过三个以上不同类型(或不同领域)系统的校验，一个解决方案才能从候选模式升格为模式。</p><h2 id="设计模式">2.设计模式</h2><p>被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><h3 id="基本要素">基本要素</h3><ul><li>模式名称 (Pattern name)</li><li>问题 (Problem)</li><li>解决方案 (Solution)</li><li>效果 (Consequences)</li></ul><h3 id="分类">分类</h3><p>根据其目的分为</p><ul><li>创建型（Creational）：创建对象</li><li>结构型（Structural）：处理类或对象的组合</li><li>行为型（Bahavioral）：描述对类或对象怎样交互和分配职责</li></ul><p>根据范围，即模式主要用于处理类/对象之间关系分为</p><ul><li>类模式：处理类和子类的关系，这些关系在编译时确定，是静态的</li><li>对象模式：处理对象间关系，这些关系在运行时变化，是动态的</li></ul><h3 id="考察内容">考察内容</h3><table><thead><tr class="header"><th>范围/目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr class="odd"><td>类模式</td><td>工厂方法模式</td><td>（类）适配器模式</td><td>模板方法模式</td></tr><tr class="even"><td>对象模式</td><td>抽象工厂模式<br />原型模式</td><td>（对象）适配器模式<br />组合模式<br />装饰模式<br />外观模式</td><td>命令模式<br />中介者模式<br />观察者模式<br />状态模式<br />策略模式</td></tr></tbody></table><h3 id="设计模式与类库框架">设计模式与类库框架</h3><ol type="1"><li><p>设计模式比库的层次更高。设计模式告诉我们如何构建类和对象以解决特定问题。</p></li><li><p>框架和库不是设计模式；它们提供了具体的实现，我们将这些实现链接到我们的代码中。</p></li></ol><h2 id="设计原则">3. 设计原则</h2><p>对于面向对象的软件系统设计来说，在支持可维护性的同时，需要提高系统的可复用性。</p><ul><li>软件的复用可以提高软件的开发效率和软件质量，节约开发成本。</li><li>恰当的复用还可以改善系统的可维护性。</li></ul><p>目标：开闭原则</p><p>指导：最小知识原则</p><p>基础：单一职责原则、可变性封装原则</p><p>实现：依赖倒转原则、合成复用原则、里氏代换原则、接口隔离原则</p><ol type="1"><li><p>开闭原则：一个软件实体应当对扩展开放，对修改关闭。</p></li><li><p>单一职责原则：一个类只负责一个功能领域中的相应职责。</p></li><li><p>里氏代换原则：在软件中如果能够使用基类对象，那么一定能够使用其子类对象。</p></li><li><p>依赖倒转原则：</p><p>抽象不应该依赖于细节，细节应该依赖于抽象</p><p>针对接口编程，不要针对实现编程。</p></li><li><p>接口隔离原则：客户端不应该依赖那些它不需要的接口。</p><ul><li>将一些大的接口细化成一些小的接口供客户端使用。</li></ul></li><li><p>合成复用原则：复用时尽量使用对象组合，而不使用继承。</p></li><li><p>迪米特法则：一个软件实体应当尽可能少的与其他实体发生相互作用。</p></li></ol><h2 id="表驱动法">4. 表驱动法</h2><h3 id="目标">目标</h3><p>将复杂逻辑从代码中⽴出来，以便于单独维护。</p><h3 id="原理">原理</h3><p>从表⾥⾯查找信息⽽不使⽤逻辑语句。</p><h3 id="查询">查询</h3><h4 id="直接访问">直接访问</h4><p>通过索引值（如下标）直接从表中找到对应的条⽬。</p><h4 id="索引访问">索引访问</h4><p>当⽆法直接从表中查询需要的条⽬时，就需要借助其他⽅法先获取表键值</p><ul><li>⽅法：先⽤⼀个基本类型的数据从索引表中查出⼀个键值，然后再⽤这⼀键值查出主数据。</li></ul><h4 id="阶梯访问">阶梯访问</h4><p>基本思想：通过确定每项命中的阶梯层次确定其归类。</p><ul><li>⽐索引访问⽅法节省空间，当阶梯多了⽐较次数就多。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;天生我材必有用，千金散尽还复来。&lt;/p&gt;</summary>
    
    
    
    <category term="软件系统设计" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>软件系统设计_设计模式</title>
    <link href="http://example.com/2024/06/12/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/06/12/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-06-12T04:00:00.000Z</published>
    <updated>2024-06-23T08:37:10.042Z</updated>
    
    <content type="html"><![CDATA[<p>天生我材必有用，千金散尽还复来。</p><span id="more"></span><h1 id="设计模式">设计模式</h1><p>被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><h2 id="概念">0. 概念</h2><h3 id="基本要素">基本要素</h3><ul><li>模式名称 (Pattern name)</li><li>问题 (Problem)</li><li>解决方案 (Solution)</li><li>效果 (Consequences)</li></ul><h3 id="分类">分类</h3><p>根据其目的分为</p><ul><li>创建型（Creational）：创建对象</li><li>结构型（Structural）：处理类或对象的组合</li><li>行为型（Bahavioral）：描述对类或对象怎样交互和分配职责</li></ul><p>根据范围，即模式主要用于处理类/对象之间关系分为</p><ul><li>类模式：处理类和子类的关系，这些关系在编译时确定，是静态的</li><li>对象模式：处理对象间关系，这些关系在运行时变化，是动态的</li></ul><h3 id="设计模式与类库框架">设计模式与类库框架</h3><ol type="1"><li><p>设计模式比库的层次更高。设计模式告诉我们如何构建类和对象以解决特定问题。</p></li><li><p>框架和库不是设计模式；它们提供了具体的实现，我们将这些实现链接到我们的代码中。</p></li></ol><h3 id="考察内容">考察内容</h3><table><thead><tr class="header"><th>范围/目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr class="odd"><td>类模式</td><td>工厂方法模式</td><td>（类）适配器模式</td><td>模板方法模式</td></tr><tr class="even"><td>对象模式</td><td>抽象工厂模式<br />原型模式</td><td>（对象）适配器模式<br />组合模式<br />装饰模式<br />外观模式</td><td>命令模式<br />中介者模式<br />观察者模式<br />状态模式<br />策略模式</td></tr></tbody></table><h2 id="工厂模式">1. 工厂模式</h2><h3 id="简单工厂模式">简单工厂模式</h3><p>专门定义一个类来负责创建其他类的实例，根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。</p><ul><li><p>又称静态工厂模式。</p></li><li><p>将对象的创建和对象本身业务处理分离可以降低系统的耦合度。</p></li></ul><h3 id="工厂方法模式">工厂方法模式</h3><p>简单工厂模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类，加入必要的处理逻辑，这违背了开闭原则。</p><h4 id="概念-1">概念</h4><p>工厂方法模式（Factory Method Pattern）又称为工厂模式。</p><ul><li>也叫虚拟构造器（Virtual Constructor）模式、多态工厂（PolymorphicFactory）模式。</li></ul><ol type="1"><li>工厂父类负责定义创建产品对象的公共接口</li><li>工厂子类则负责生成具体的产品对象</li></ol><p>通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><ul><li>允许系统在不修改工厂角色的情况下引进新产品。</li></ul><h4 id="优缺点">优缺点</h4><p>优点：</p><ol type="1"><li>用户只需要关心所需产品对应的工厂，无须关心创建细节、具体产品类名。</li><li>工厂可以自主确定创建何种对象、如何创建对象。</li><li>在系统中加入新产品时，只要添加具体工厂和具体产品。</li></ol><p>缺点：</p><ol type="1"><li>添加新产品时系统中类的个数成对增加，提高了系统复杂度。</li><li>系统中加入抽象层，提高了系统理解难度和实现难度。</li></ol><h4 id="适用环境">适用环境</h4><ol type="1"><li>一个类不知道它所需要的对象的类。</li><li>一个类通过其子类来指定创建哪个对象。</li><li>客户端不需要关心是哪一个工厂子类，需要时动态指定。<ul><li>可将具体工厂类名存储在数据库或配置文件中。</li></ul></li></ol><h4 id="配置文件实例化具体工厂">配置文件实例化具体工厂</h4><p>将具体类的类名写入配置文件中，再通过Java的反射机制，读取XML格式的配置文件，根据存储在XML文件中的类名字符串生成对象。</p><h3 id="抽象工厂模式">抽象工厂模式</h3><p>有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p><ul><li>产品等级结构：产品的继承结构</li><li>产品族：由同一个工厂生产的 ，位于不同产品等级结构中的一组产品</li></ul><h4 id="问题">问题</h4><p>系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品。</p><h4 id="概念-2">概念</h4><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</p><ul><li><p>又称为Kit模式。</p></li><li><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p></li><li><p>工厂方法模式针对一个产品等级结构，而抽象工厂模式需要面对多个。</p></li></ul><h4 id="优缺点-1">优缺点</h4><p>优点：</p><ol type="1"><li>隔离了具体类的生成，只需改变具体工厂的实例，就在某种程度上改变整个软件系统的行为。</li><li>实现高内聚低耦合的设计目的。</li><li>保证客户端始终只使用同一个产品族中的对象。</li><li>增加新的具体工厂和产品族修改已有系统，符合开闭原则。</li></ol><p>缺点：</p><p>添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品。</p><ul><li>即：增加新的工厂和产品族容易，增加新的产品等级结构麻烦。</li></ul><h4 id="和工厂方法模式区别">和工厂方法模式区别</h4><p>工厂模式创建同一个产品的不同类型，抽象工厂模式创建不同类的产品。</p><ul><li>产品种类单一，适合用工厂模式。</li><li>有多个种类，各种类型时，适合抽象工厂模式。</li></ul><h4 id="适用环境-1">适用环境</h4><p>对所有的工厂模式：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节。</p><ol type="1"><li>系统中有多于一个的产品族，属于同一个产品族的产品将在一起使用。</li><li>所有的产品以同样的接口出 现，从而使客户端不依赖于具体实现。</li></ol><h3 id="模式扩展">模式扩展</h3><h4 id="开闭原则的倾斜性">开闭原则的倾斜性</h4><ol type="1"><li><p>增加产品族：对于增加新的产品族，工厂模式很好的支持了开闭原则，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</p></li><li><p>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持开闭原则。</p></li></ol><h4 id="工厂模式的退化">工厂模式的退化</h4><ol type="1"><li>只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式。</li><li>工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</li></ol><h2 id="原型模式">2. 原型模式</h2><h3 id="概念-3">概念</h3><p>用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p><ul><li><p>基本工作原理：</p><p>将一个原型对象传给要发动创建的对象，该对象请求原型对象拷贝原型自身来实现创建。</p></li><li><p>包含角色：抽象原型类、具体原型类、客户类</p></li><li><p>类包含一些成员对象，在使用原型模式克隆对象时，根据其成员对象是否也克隆，原型模式可以分为深克隆和浅克隆。</p></li><li><p>clone()满足：</p><ol type="1"><li>对任何的对象x，都有x.clone() !=x，即克隆对象与原对象不是同一个对象。</li><li>对任何的对象x，都有x.clone().getClass()==x.getClass()，克隆对象与原对象类型一样。</li><li>如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</li></ol></li></ul><h3 id="优缺点-2">优缺点</h3><p>优点：</p><ol type="1"><li>简化对象的创建过程，通过已有实例提高新实例的创建效率。</li><li>动态增加或减少产品类。</li><li>可以使用深克隆保存对象的状态。</li></ol><p>缺点：</p><ol type="1"><li>需要为每一个类配备一个克隆方法。</li><li>实现深克隆的代码较为复杂。</li></ol><h3 id="适用环境-2">适用环境</h3><ol type="1"><li>创建新对象成本较大。</li><li>系统要保存对象的状态。</li><li>避免使用分层次的工厂类来创建分层次的对象。</li></ol><h3 id="模式扩展-1">模式扩展</h3><p>相似对象复制：通过原型模式获得相同对象后再对其属性进行修改，从而获取所需对象。</p><h2 id="适配器模式">3. 适配器模式</h2><h3 id="概念-4">概念</h3><p>将一个接口转换成客户希望的另一个接口。</p><ul><li>也称包装器（Wrapper）。</li><li>既可以作为类结构型模式，也可以作为对象结构型模式。</li><li>包含角色：目标抽象类、适配器类、适配者类、客户类</li></ul><h3 id="优缺点-3">优缺点</h3><p>适配器模式优点：</p><ol type="1"><li>将目标类和适配者类解耦。<ul><li>通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li></ul></li><li>增加了类的透明性和复用性。</li><li>灵活性和扩展性好。<ul><li>通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合开闭原则。</li></ul></li></ol><p>类适配器：</p><p>优点：适配器类是适配者类的子类，可以置换一些适配者的方法，灵活性强。</p><p>缺点：在很多编程语言中适配器类不能同时适配多个适配者类。</p><p>对象适配器：</p><p>优点：同一个适配器可以把适配者类和它的子类都适配到目标接口。</p><p>缺点：不容易置换适配者类的方法。</p><h3 id="适用环境-3">适用环境</h3><ol type="1"><li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ol><h3 id="模式扩展-2">模式扩展</h3><h4 id="默认适配器模式">默认适配器模式</h4><p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现(空方法)，那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求，它适用于一个接口不想使用其所有的方法的情况。因此也称为单接口适配器模式。</p><h4 id="双向适配器">双向适配器</h4><p>如果在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器。</p><h2 id="组合模式">4. 组合模式</h2><h3 id="概念-5">概念</h3><p>组合多个对象形成树形结构以表示“整体-部分”的结构层次。</p><ul><li><p>对单个对象（叶子对象）和组合对象（容器对象）的使用具有一致性。</p></li><li><p>又称“整体-部分”（Part-Whole）模式</p></li><li><p>包含角色：抽象构件、叶子构件、容器构件、客户类</p></li><li><p>关键：</p><p>定义一个抽象构件类，既可以代表叶子，又可以代表容器，递归组合成树形结构。</p><p>而客户端针对该抽象构件类进行编程。</p></li></ul><h3 id="优缺点-4">优缺点</h3><p>优点：</p><ol type="1"><li>清楚地定义分层次的复杂对象。</li><li>客户端可以一致的使用组合结构或其中单个对象。</li><li>定义了包含叶子对象和容器对象的类层次结构，递归组合成树形结构。</li><li>更容易在组合体内加入对象构件。</li></ol><p>缺点：</p><ol type="1"><li>设计更加抽象困难。</li><li>很难对容器中的构件类型进行限制。</li></ol><h3 id="适用环境-4">适用环境</h3><ol type="1"><li>需要表示一个对象整体或部分层次。</li><li>客户端可以针对抽象构件编程，无须关心对象层次结构的细节。</li><li>对象的结构是动态的并且复杂程度不一样，但客户需要一致地处理它们。</li></ol><h2 id="装饰模式">5. 装饰模式</h2><h3 id="概念-6">概念</h3><p>动态地给一个对象增加一些额外的职责。</p><ul><li><p>又称包装器（Wrapper），和适配器别名相同，但使用场合不同。</p></li><li><p>包含角色：抽象构件、具体构件、抽象装饰类、具体装饰类</p></li><li><p>与继承关系相比，关联关系的主要优势在于不会破坏类的封装性。</p><ul><li>继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展。</li><li>关联关系使系统具有较好的松耦合性， 因此使得系统更加容易维护。</li><li>关联关系的缺点是比继承关系要创建更多的对象。</li></ul></li></ul><h3 id="优缺点-5">优缺点</h3><p>优点：</p><ol type="1"><li>提供比继承更多的灵活性。</li><li>通过一种动态的方式来扩展一个对象的功能。</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。</li><li>具体构件类与具体装饰类可以独立变化。</li></ol><p>缺点：</p><ol type="1"><li>产生很多小对象。</li><li>装饰模式比继承更加易于出错，排错也很困难。<ul><li>对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li></ul></li></ol><h3 id="适用环境-5">适用环境</h3><ol type="1"><li>以动态、透明的方式给单个对象添加职责。</li><li>动态地给一个对象增加、撤销功能。</li><li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。<ul><li>系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长</li><li>类定义不能继承（final类）。</li></ul></li></ol><h3 id="模式扩展-3">模式扩展</h3><h4 id="装饰模式简化">装饰模式简化</h4><ol type="1"><li>一个装饰类的接口必须与被装饰类的接口保持相同。</li><li>不要把太多的逻辑和状态放在具体构件类中。</li><li>如果只有一个具体构件类而没有抽象构件类，抽象装饰类可以作为具体构件类的直接子类。</li></ol><h4 id="透明装饰模式和半透明装饰模式">透明装饰模式和半透明装饰模式</h4><ul><li>透明装饰模式：完全针对抽象编程，不应该声明具体构件类型和具体装饰类型，而应该全部声明为抽象构件类型。</li><li>半透明装饰模式：允许声明具体装饰者类型的对象，调用在具体装饰者中新增的方法。</li></ul><h2 id="外观模式">6. 外观模式</h2><h3 id="概念-7">概念</h3><p>外部与一个子系统的通信通过统一的外观对象进行，为子系统中的一组接口提供一致的界面。</p><ul><li><p>Facade Pattern</p></li><li><p>包含角色：外观、子系统</p></li><li><p>在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性。</p></li><li><p>通过引入一个新的外观类降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。</p></li></ul><h3 id="优缺点-6">优缺点</h3><p>优点：</p><ol type="1"><li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。</li><li>实现了子系统与客户之间的松耦合关系。</li><li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程。</li><li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li></ol><p>缺点：</p><ol type="1"><li>不能很好地限制客户使用子系统类。</li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了开闭原则。</li></ol><h3 id="适用环境-6">适用环境</h3><ol type="1"><li>为一个复杂子系统提供一个简单接口。</li><li>客户程序与多个子系统之间存在很大的依赖性。</li><li>使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li></ol><h3 id="模式扩展-4">模式扩展</h3><ol type="1"><li>在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互。</li><li>不要试图通过外观类为子系统增加新行为。</li><li>抽象外观类。</li></ol><h2 id="模板方法模式">7. 模板方法模式</h2><h3 id="概念-8">概念</h3><p>定义一个操作中算法的骨架，而将一些步骤延迟到子类中。</p><ul><li><p>使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></li><li><p>包含角色：抽象类、具体子类</p></li><li><p>只有类之间的继承关系，没有对象关联关系</p></li><li><p>模板方法：</p><p>定义在抽象类中的、把基本操作方法组合在一起形成一个总算法或一个总行为的方法。</p></li></ul><h3 id="优缺点-7">优缺点</h3><p>优点：</p><ol type="1"><li>在一个类中抽象地定义算法，而由它的子类实现细节的处理。</li><li>是代码复用的一项基本技术。</li><li>导致一种反向的控制结构，通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，符合开闭原则。</li></ol><p>缺点：</p><p>导致类的个数增加。</p><h3 id="适用环境-7">适用环境</h3><ol type="1"><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</li><li>各子类中公共的行为应被提取出来并集中到一个公共父类。</li><li>对一些复杂的算法进行分割。</li><li>控制子类的扩展。</li></ol><h3 id="模式扩展-5">模式扩展</h3><h4 id="好莱坞原则">好莱坞原则</h4><p>子类不显式调用父类的方法，而是通过覆盖父类的方法来实现某些具体的业务逻辑，父类控制对子类的调用。</p><h4 id="钩子方法的使用">钩子方法的使用</h4><p>使得子类可以控制父类的行为。</p><ol type="1"><li><p>最简单的钩子方法就是空方法，也可以在钩子方法中定义一个默认的实现，如果子类不覆盖钩子方法，则执行父类的默认实现代码。</p></li><li><p>比较复杂一点的钩子方法可以对其他方法进行约束，这种钩子方法通常返回一个boolean类型，即返回true或false，用来判断是否执行某一个基本方法。</p></li></ol><h2 id="命令模式">8. 命令模式</h2><p>动机：对发送者和接收者完全解耦，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。</p><h3 id="概念-9">概念</h3><p>将请求封装为对象，从而使我们可用不同的请求对客户进行参数化。</p><ul><li><p>对请求排队或者记录请求日志，以及支持可撤销的操作。</p></li><li><p>包含如下角色：抽象命令类、具体命令类、调用者、接收者、客户类</p></li><li><p>本质：对命令进行封装，将发出命令的责任和执行命令的责任分割开。</p></li><li><p>允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口。</p></li><li><p>关键：引入了抽象命令接口，发送者针对抽象命令接口编程。</p></li></ul><h3 id="优缺点-8">优缺点</h3><p>优点：</p><ol type="1"><li>降低系统的耦合度。</li><li>新的命令可以很容易地加入到系统中。</li><li>可以比较容易地设计一个命令队列和宏命令（组合命令）。</li><li>可以方便地实现对请求的Undo和Redo。</li></ol><p>缺点：</p><p>可能会导致某些系统有过多的具体命令类。</p><h3 id="适用环境-8">适用环境</h3><ol type="1"><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销操作和恢复操作。</li><li>系统需要将一组操作组合在一起，即支持宏命令。</li></ol><h2 id="中介者模式">9. 中介者模式</h2><p>动机：</p><p>对于一个模块，可能由很多对象构成，而且这些对象之间可能存在相互的引用，为了减少对象两两之间复杂的引用关系，使之成为一个松耦合的系统，我们需要使用中介者模式。</p><h3 id="概念-10">概念</h3><p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><ul><li><p>Mediator Pattern</p></li><li><p>又称调停者模式</p></li><li><p>包含如下角色：抽象中介者、具体中介者、抽象同事类、具体同事类</p></li><li><p>职责：中转与协调</p></li></ul><h3 id="优缺点-9">优缺点</h3><p>优点：</p><ol type="1"><li>简化对象之间交互。</li><li>将各同事解耦。</li><li>减少子类生成。</li><li>可以简化各同事类的设计和实现。</li></ol><p>缺点：</p><p>具体中介者类非常复杂，使得系统难以维护。</p><h3 id="适用环境-9">适用环境</h3><ol type="1"><li><p>系统中对象间存在复杂引用关系。</p></li><li><p>一个对象由于引用了其他很多对象并且直接和这些对象通信而难以复用。</p></li><li><p>通过一个中间类来封装多个类中的行为。</p></li></ol><h2 id="观察者模式">10. 观察者模式</h2><p>动机：</p><p>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系。</p><h3 id="概念-11">概念</h3><p>定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</p><ul><li><p>又称发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p></li><li><p>让主题和观察者之间松耦合。</p></li></ul><h3 id="优缺点-10">优缺点</h3><p>优点：</p><ol type="1"><li>实现表示层和数据逻辑层的分离。<ul><li>定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</li></ul></li><li>在观察目标和观察者之间建立一个抽象的耦合。</li><li>支持广播通信。</li><li>符合开闭原则的要求。</li></ol><p>缺点：</p><ol type="1"><li>如果观察者太多，将所有的观察者都通知到会花费很多时间。</li><li>观察者和观察目标之间的循环依赖会导致系统崩溃。</li><li>没有相应的机制让观察者知道所观察的目标对象如何发生变化。</li></ol><h3 id="适用环境-10">适用环境</h3><ol type="1"><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li></ol><h2 id="状态模式">11. 状态模式</h2><p>在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的（stateful）对象。</p><h3 id="概念-12">概念</h3><p>一个对象在其内部状态改变时改变它的行为。</p><ul><li><p>包含角色：环境类、抽象状态类、具体状态类。</p></li><li><p>关键：引入抽象状态类，并在不同具体状态类中实现了不同状态的行为，包括各种状态之间的转换。</p></li><li><p>环境类与抽象状态类：</p><ul><li><p>环境类：拥有状态的对象</p></li><li><p>环境类有时候可以充当状态管理器(StateManager)的角色，可以在环境类中对状态进行切换操作。</p></li><li><p>状态类的产生是由于环境类存在多个状态，并且</p><ul><li>这些状态经常需要切换， 在不同的状态下对象的行为不同</li></ul><p>因此将不同对象下的行为单独提取出来封装在具体的状态类中，使得环境类对象在其内部状态改变时可以改变它的行为。</p></li></ul></li></ul><h3 id="优缺点-11">优缺点</h3><p>优点：</p><ol type="1"><li>封装了转换规则。</li><li>枚举可能的状态，可以方便地增加新的状态。</li><li>状态转换逻辑与状态对象合成一体。</li><li>让多个环境对象共享一个状态对象。</li></ol><p>缺点：</p><ol type="1"><li>增加系统类和对象的个数</li><li>使用不当将导致程序结构和代码的混乱。</li><li>对开闭原则的支持并不太好<ul><li>增加新的状态类需要修改那些负责状态转换的源代码。</li></ul></li></ol><h3 id="适用环境-11">适用环境</h3><ol type="1"><li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。</li><li>代码中包含大量与对象状态有关的条件语句。</li></ol><h3 id="模式扩展-6">模式扩展</h3><ol type="1"><li>共享状态</li><li>简单状态模式（状态不变）</li><li>可切换状态的状态模式</li></ol><h2 id="策略模式">12. 策略模式</h2><h3 id="概念-13">概念</h3><p>一组各自封装的算法族，可以相互替换。策略让算法可以独立于使用它的用户而变化。</p><h3 id="适用环境-12">适用环境</h3><ol type="1"><li>当许多相关类仅在其行为上有所不同时。</li><li>算法的不同变体。</li><li>算法使用用户不应知道的数据。</li><li>一个类定义了许多行为，而这些行为在它的操作中表现为多个条件语句。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;天生我材必有用，千金散尽还复来。&lt;/p&gt;</summary>
    
    
    
    <category term="软件系统设计" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>软件系统设计_面向对象设计原则</title>
    <link href="http://example.com/2024/06/11/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://example.com/2024/06/11/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2024-06-11T04:00:00.000Z</published>
    <updated>2024-06-23T08:37:17.503Z</updated>
    
    <content type="html"><![CDATA[<p>天生我材必有用，千金散尽还复来。</p><span id="more"></span><h1 id="面向对象设计原则">面向对象设计原则</h1><p>需求：系统需要满足的目标</p><p>规约：系统的外部可观察到的行为</p><p>架构：</p><ul><li><p>系统一级的主要组成部分</p></li><li><p>各部分的交互方法</p></li><li><p>使用的技术</p></li></ul><p>设计：</p><ul><li>如何完成任务</li><li>需要写的代码<ul><li>可维护、可复用</li></ul></li></ul><p>面向对象软件设计：将实现的约束条件应用到面向对象分析所产生的概念模型的过程。</p><ul><li><p>用方法和属性来描述用于构成系统的类</p></li><li><p>添加不明显属于领域的类，比如接口</p></li><li><p>描述类是如何构成组件的</p></li></ul><p>难点：将一个系统分解成对象</p><h2 id="面向对象设计原则概述">0. 面向对象设计原则概述</h2><p>目标：提高软件的可维护性和可复用性</p><p>Robert C.Martin认为一个软件设计可维护性较低通常的4个原因：</p><ul><li><p>过于僵硬（Rigidity）</p></li><li><p>过于脆弱（Fragility）</p></li><li><p>复用率低（Immobility）</p></li><li><p>黏度过高（Viscosity）</p></li></ul><p>Peter Coad认为，一个好的系统设计具备的三个性质:</p><ul><li>可扩展性（Extensibility）</li><li>灵活性（Flexibility）</li><li>可插入性（Pluggability）</li></ul><p>软件的复用拥有众多优点，如可以提高软件的开发效率，提高软件质量，节约开发成本。</p><p>恰当的复用还可以改善系统的可维护性。</p><p>面向对象设计复用的目标在于实现支持可维护性的复用。</p><p>在面向对象的设计里面，可维护性复用都是以面向对象设计原则为基础的，这些设计原则首先都是复用的原则，遵循这些设计原则可以有效地提高系统的复用性，同时提高系统的可维护性。</p><p>面向对象设计原则也是对系统进行合理重构的指南针，重构是在不改变软件现有功能的基础上，通过调整程序代码改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性。</p><p>常用的7个面向对象设计原则：</p><ul><li>单一职责原则</li><li>开闭原则</li><li>里氏代换原则</li><li>依赖倒转原则</li><li>接口隔离原则</li><li>合成复用原则</li><li>迪米特法则</li></ul><p>这些原则并不是孤立存在的，它们相互依赖，相互补充。</p><h2 id="单一职责原则">1. 单一职责原则</h2><p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类里。</p><ul><li>对一个类而言，应该仅有一个引起它变化的原因。</li></ul><p>一个类承担的职责越多，它被复用的可能性越小。让一个类承担过多的职责相当于将这些职责耦合，当其中一个职责变化时，可能会影响其他职责的运作。</p><p>数据职责（属性）和行为职责（方法）。</p><h2 id="开闭原则">2. 开闭原则</h2><p>一个软件实体应当对扩展开放，对修改关闭。</p><ul><li><p>在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展，即实现在不修改源代码的情况下改变这个模块的行为。</p></li><li><p>软件实体可以指一个软件模块，一个由多个类组成的局部结构或一个独立的类。</p></li></ul><p>抽象化是开闭原则的关键。</p><p>对可变性封装原则：找到系统的可变因素并将其封装起来。</p><h2 id="里氏代换原则">3. 里氏代换原则</h2><p>如果对每一个类型为<span class="math inline">\(S\)</span>的对象<spanclass="math inline">\(o_1\)</span>，都有类型为<spanclass="math inline">\(T\)</span>的对象<spanclass="math inline">\(o_2\)</span>，使得以<spanclass="math inline">\(T\)</span>定义的所有程序<spanclass="math inline">\(P\)</span>在所有的对象<spanclass="math inline">\(o_2\)</span>都代换成<spanclass="math inline">\(o_1\)</span>时，程序<spanclass="math inline">\(P\)</span>的行为没有变化，那么类型<spanclass="math inline">\(S\)</span>是类型<spanclass="math inline">\(T\)</span>的子类型。</p><ul><li>所有引用基类的地方必须能透明地使用其子类的对象。</li></ul><p>里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p><h2 id="依赖倒转原则">4. 依赖倒转原则</h2><p>高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><ul><li><p>要针对接口编程，不要针对实现编程。</p></li><li><p>代码要依赖于抽象的类，而不要依赖于具体的类；要针对接口或抽象类编程，而不是针对具体类编程。</p></li></ul><p>如果说开闭原则是面向对象设计的目标的话，那么依赖倒转原则就是面向对象设计的主要手段。</p><p>依赖倒转原则的常用实现方式之一是在代码中使用抽象类，而将具体类放在配置文件中。</p><p>类之间的耦合：</p><ul><li>零耦合关系</li><li>具体耦合关系</li><li>抽象耦合关系</li></ul><p>依赖倒转原则要求客户端依赖于抽象耦合，以抽象方式耦合是依赖倒转原则的关键。</p><h2 id="接口隔离原则">5. 接口隔离原则</h2><p>客户端不应该依赖那些它不需要的接口。</p><ul><li>一旦一个接口太大，则需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。</li></ul><p>使用多个专门的接口，而不使用单一的总接口。每一个接口应该承担一种相对独立的角色。</p><p>使用接口隔离原则拆分接口时，首先必须满足单一职责原则，将一组相关的操作定义在一个接口中，且在满足高内聚的前提下，接口中的方法越少越好。</p><ul><li>只提供用户需要的行为，而隐藏用户不需要的行为。</li></ul><h2 id="合成复用原则">6. 合成复用原则</h2><p>尽量使用对象组合，而不是继承来达到复用的目的。</p><p>合成复用原则就是指在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用其已有功能的目的。简言之：要尽量使用组合/聚合关系，少用继承。</p><h2 id="迪米特法则">7. 迪米特法则</h2><p>也称最小知识原则。几种典型定义：</p><ol type="1"><li><p>不和“陌生人”说话。</p></li><li><p>只与你的直接朋友通信。</p></li><li><p>每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。</p></li></ol><ul><li>一个软件实体应当尽可能少的与其他实体发生相互作用。</li></ul><p>对于一个对象，其朋友包括以下几类:</p><ul><li>当前对象本身</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ul><p>狭义迪米特法则：</p><p>如果两个类之间不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><p>广义的迪米特法则：</p><p>指对对象之间的信息流量、流向以及信息的影响的控制，主要是对信息隐藏的控制。</p><p>迪米特法则的主要用途在于控制信息的过载：</p><ol type="1"><li>在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及;</li><li>在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限;</li><li>在类的设计上，只要有可能，一个类型应当设计成不变类;</li><li>在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</li></ol><h2 id="小结">8. 小结</h2><ol start="0" type="1"><li><p>对于面向对象的软件系统设计来说，在支持可维护性的同时，需要提高系统的可复用性。</p></li><li><p>软件的复用可以提高软件的开发效率，提高软件质量，节约开发成本，恰当的复用还可以改善系统的可维护性。</p></li><li><p>单一职责原则要求在软件系统中，一个类只负责一个功能领域中的相应职责。</p></li><li><p>开闭原则要求一个软件实体应当对扩展开放，对修改关闭，即在不修改源代码的基础上扩展一个系统的行为。</p></li><li><p>里氏代换原则可以通俗表述为在软件中如果能够使用基类对象，那么一定能够使用其子类对象。</p></li><li><p>依赖倒转原则要求抽象不应该依赖于细节，细节应该依赖于抽象;要针对接口编程，不要针对实现编程。</p></li><li><p>接口隔离原则要求客户端不应该依赖那些它不需要的接口，即将一些大的接口细化成一些小的接口供客户端使用。</p></li><li><p>合成复用原则要求复用时尽量使用对象组合，而不使用继承。</p></li><li><p>迪米特法则要求一个软件实体应当尽可能少的与其他实体发生相互作用。</p></li></ol><p>目标：开闭原则</p><p>指导：最小知识原则</p><p>基础：单一职责原则、可变性封装原则</p><p>实现：依赖倒转原则、合成复用原则、里氏代换原则、接口隔离原则</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;天生我材必有用，千金散尽还复来。&lt;/p&gt;</summary>
    
    
    
    <category term="软件系统设计" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程_4_内核驱动</title>
    <link href="http://example.com/2024/05/04/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC4%E7%AB%A0%20%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8/"/>
    <id>http://example.com/2024/05/04/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC4%E7%AB%A0%20%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8/</id>
    <published>2024-05-04T04:00:00.000Z</published>
    <updated>2024-06-21T07:24:02.689Z</updated>
    
    <content type="html"><![CDATA[<p>飞萤扑火，向死而生。</p><span id="more"></span><h1 id="第4章-内核驱动">第4章 内核驱动</h1><h2 id="什么是内核">0. 什么是内核？</h2><p>操作系统是一系列程序的集合，其中最重要的部分构成了内核。</p><p>单内核/微内核</p><ul><li>单内核是一个很大的进程，内部可以分为若干模块，运行时是一个独立的二进制文件，模块间通讯通过直接调用函数实现</li><li>微内核中大部分内核作为独立的进程在特权下运行，通过消息传递进行通讯</li></ul><p>Linux内核的能力</p><ul><li>内存管理，文件系统，进程管理，多线程支持，抢占式，多处理支持</li></ul><p>Linux内核区别于其他UNIX商业内核的优点</p><ul><li>单内核，模块支持</li><li>免费/开源</li><li>支持多种CPU，硬件支持能力非常强大</li><li>Linux开发者都是非常出色的程序员</li><li>通过学习Linux内核的源码可以了解现代操作系统的实现原理</li></ul><h3 id="配置内核">配置内核</h3><p>下载源码、解压、make clean、<strong>make menuconfig</strong></p><figure><img src="/image/Linux系统编程/menu.png" alt="menu" /><figcaption aria-hidden="true">menu</figcaption></figure><p>编译内核：</p><ul><li>make</li><li>make zImage、make bzImage：生成压缩内核镜像</li><li>make modules：编译模块</li></ul><p>make install：将编译好的内核copy到/boot</p><h2 id="驱动">1. 驱动</h2><p>许多常见驱动的源代码集成在内核源码里，也有第三方开发的驱动，可以单独编译成模块.ko。编译需要内核头文件的支持。</p><p>驱动运行在内核态。</p><h3 id="加载模块">加载模块</h3><p>底层命令：</p><p>insmod：<code>insmod [options] module_file</code></p><ul><li><code>-f</code>: 强制加载模块，即使模块已被其他进程使用。</li><li><code>-o</code>: 指定模块的参数。</li><li><code>-v</code>: 显示详细信息。</li></ul><p>rmmod：<code>rmmod [options] module_name</code></p><ul><li><code>-f</code>: 强制卸载模块，即使模块已被其他进程使用。</li><li><code>-s</code>: 模块卸载后，不更新/proc/modules文件。</li><li><code>-w</code>: 在卸载模块之前，等待其关闭所有文件描述符。</li></ul><p>高层命令：</p><p>modprobe：<code>modprobe [options] module_name</code></p><ul><li><code>-a</code>: 自动加载所有依赖的模块。</li><li><code>-c</code>: 从 /etc/modprobe.conf 中读取配置。</li><li><code>-d</code>: 检测模块依赖，但不加载它们。</li><li><code>-e</code>: 禁止使用某些内核特性（如 SMP）。</li><li><code>-k</code>: 保留内核符号表。</li><li><code>-l</code>: 列出可以加载的模块，而不实际加载它们。</li><li><code>-n</code>: 禁止自动插入已指定名字的模块。</li><li><code>-p</code>: 使用预设的模块参数。</li><li><code>-r</code>: 删除模块及其依赖的模块。</li><li><code>-s</code>: 使模块静默加载，不输出信息。</li><li><code>-v</code>: 输出更多的信息。</li></ul><p>模块依赖</p><p>自动按需加载/卸载</p><p>moddep：列出指定内核模块所依赖的其他模块</p><p>lsmod：列出当前内核加载的所有模块及其各种信息</p><p>modinfo：显示关于内核模块的详细信息</p><h3 id="模块编写">模块编写</h3><p>不能使用c库。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/moduleparam.h&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> test;<br><span class="hljs-built_in">module_param</span>(test, <span class="hljs-type">int</span>, <span class="hljs-number">0644</span>);<span class="hljs-comment">//module_param(变量名称，类型, 访问许可掩码)</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title">hello_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printk</span>(KERN_INFO “Hello world test=%d \n” , test);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title">hello_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printk</span>(KERN_INFO <span class="hljs-string">&quot;Goodbye world\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">MODULE_LICENSE</span>(<span class="hljs-string">&quot;GPL&quot;</span>);<br><span class="hljs-built_in">MODULE_DESCRIPTION</span>(<span class="hljs-string">&quot;Test&quot;</span>);<br><span class="hljs-built_in">MODULE_AUTHOR</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br><span class="hljs-built_in">module_init</span>(hello_init);<br><span class="hljs-built_in">module_exit</span>(hello_exit);<br></code></pre></td></tr></table></figure><h4 id="导出符号">导出符号</h4><p>如果一个模块需要向其他模块导出符号（方法或全局变量），需要使用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">EXPORT_SYMBOL(<span class="hljs-params">name</span>)</span>;<br><span class="hljs-constructor">EXPORT_SYMBOL_GPL(<span class="hljs-params">name</span>)</span>;<br></code></pre></td></tr></table></figure><p>符号必须在模块文件的全局部分导出。</p><p>/proc/kallsyms 可以显示所有导出的符号。</p><h3 id="字符设备">字符设备</h3><h4 id="设备号">设备号</h4><p>一个字符设备或者块设备都有一个主设备号和次设备号。</p><ul><li>主设备号和次设备号统称为设备号。<ul><li>主设备号用来表示一个特定的驱动程序。</li><li>次设备号用来表示使用该驱动程序的各设备。</li></ul></li></ul><h4 id="cdev">cdev</h4><p>linux内核中使用cdev结构体来描述字符设备。该结构体是所有字符设备的抽象，其包含了大量字符设备所共有的特性。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">struct</span> cdev *my_cdev = cdev<span class="hljs-constructor">_alloc()</span>;<br>my_cdev-&gt;ops = &amp;my_fops;<br>void cdev<span class="hljs-constructor">_init(<span class="hljs-params">struct</span> <span class="hljs-params">cdev</span> <span class="hljs-operator">*</span><span class="hljs-params">cdev</span>, <span class="hljs-params">struct</span> <span class="hljs-params">file_operations</span> <span class="hljs-operator">*</span><span class="hljs-params">fops</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="初始化加载过程">初始化加载过程</h4><ol type="1"><li>申请设备号</li><li>定义文件操作结构体 file_operations</li><li>创建并初始化定义结构体 cdev</li><li>将cdev注册到系统，并和对应的设备号绑定</li><li>在/dev文件系统中用mknod创建设备文件，并将该文件绑定到设备号上</li></ol><p>申请释放设备号：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> register<span class="hljs-constructor">_chrdev_region(<span class="hljs-params">dev_t</span> <span class="hljs-params">first</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">count</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">name</span>)</span>;<br><span class="hljs-built_in">int</span> alloc<span class="hljs-constructor">_chrdev_region(<span class="hljs-params">dev_t</span> <span class="hljs-operator">*</span><span class="hljs-params">dev</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">firstminor</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">count</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">name</span>)</span>;<br>void unregister<span class="hljs-constructor">_chrdev_region(<span class="hljs-params">dev_t</span> <span class="hljs-params">first</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">count</span>)</span>;<br></code></pre></td></tr></table></figure><p>设备注册与释放</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> cdev<span class="hljs-constructor">_add(<span class="hljs-params">struct</span> <span class="hljs-params">cdev</span> <span class="hljs-operator">*</span><span class="hljs-params">dev</span>, <span class="hljs-params">dev_t</span> <span class="hljs-params">num</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">count</span>)</span>;<br>void cdev<span class="hljs-constructor">_del(<span class="hljs-params">struct</span> <span class="hljs-params">cdev</span> <span class="hljs-operator">*</span><span class="hljs-params">dev</span>)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;飞萤扑火，向死而生。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux系统编程" scheme="http://example.com/categories/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程_3_编程</title>
    <link href="http://example.com/2024/05/03/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC3%E7%AB%A0%20Linux%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2024/05/03/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC3%E7%AB%A0%20Linux%E7%BC%96%E7%A8%8B/</id>
    <published>2024-05-03T04:00:00.000Z</published>
    <updated>2024-06-21T07:23:49.037Z</updated>
    
    <content type="html"><![CDATA[<p>飞萤扑火，向死而生。</p><span id="more"></span><h1 id="第3章-linux编程">第3章 Linux编程</h1><h2 id="编程前的准备">0. 编程前的准备</h2><h3 id="编译命令">0.1 编译命令</h3><p>gcc -c（编译）</p><p>gcc（链接 或者 编译 + 链接）</p><p>g++（C++对应的命令，其实就是换了前端）</p><p>gcc [options] [filename]</p><p>基础可选项:</p><ul><li>-E: 只对源程序进行预处理(调用cpp预处理器)</li><li>-S: 只对源程序进行预处理、编译</li><li>-c: 执行预处理、编译、汇编而不链接</li><li>-o output_file: 指定输出文件名</li><li>-g: 产生调试工具必需的符号信息</li><li>-O/On: 在程序编译、链接过程中进行优化处理</li><li>-Wall: 显示所有的警告信息</li><li>-Idir: 指定额外的头文件搜索路径</li><li>-Ldir: 指定额外的库文件搜索路径</li><li>-lname: 链接时搜索指定的库文件</li><li>-DMACRO[=DEFN]: 定义MACRO宏</li></ul><h3 id="make">0.2 make</h3><p>make [-f Makefile] [option] [target]</p><p>makefile描述模块间的依赖关系，make命令根据makefile对程序进行管理和维护；make判断被维护文件的时序关系。</p><h4 id="make执行顺序">make执行顺序</h4><ol type="1"><li>make会在当前目录下找名字叫“Makefile” 或“makefile” 的文件。</li><li>查找文件中的第一个目标文件（target），举例中的hello</li><li>如果hello文件不存在，或是hello所依赖的文件修改时间要比hello新，就会执行后面所定义的命令来生成hello文件。</li><li>如果hello所依赖的.o文件不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（类似一个堆栈的过程）</li><li>make根据.o文件的规则生成 .o 文件，然后再用 .o文件生成hello文件。</li></ol><h4 id="makefile规则结构">Makefile规则结构</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">target <span class="hljs-string">...</span> : prerequisites <span class="hljs-string">...</span><br><span class="hljs-keyword">command</span>```<br></code></pre></td></tr></table></figure><ul><li>target是一个目标文件，可以是Object File，也可以是执行文件</li><li>prerequisites是要生成target所需要的文件或是目标</li><li>command是make需要执行的命令。（可以是任意的Shell命令）</li></ul><p>例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hello : <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> <span class="hljs-selector-tag">kbd</span><span class="hljs-selector-class">.o</span><br>gcc -o hello <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> <span class="hljs-selector-tag">kbd</span><span class="hljs-selector-class">.o</span><br><span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> : <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> defs<span class="hljs-selector-class">.h</span><br>cc -c <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br><span class="hljs-selector-tag">kbd</span><span class="hljs-selector-class">.o</span> : <span class="hljs-selector-tag">kbd</span><span class="hljs-selector-class">.c</span> defs<span class="hljs-selector-class">.h</span> command<span class="hljs-selector-class">.h</span><br>cc -c <span class="hljs-selector-tag">kbd</span><span class="hljs-selector-class">.c</span><br>clean :<br>rm edit <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> <span class="hljs-selector-tag">kbd</span>.o<br></code></pre></td></tr></table></figure><p>伪目标：clean</p><p>取名不能和文件名重名，可以使用一个特殊的标记“.PHONY”来显示地指明一个目标是“伪目标”。</p><ul><li><p>一般没有依赖的文件，但也可以为伪目标指定所依赖的文件。</p></li><li><p>伪目标同样可以作为“默认目标”，只要将其放在第一个。</p></li></ul><h4 id="预定义变量">预定义变量</h4><ul><li>$&lt; 第一个依赖文件的名称</li><li>$?所有的依赖文件，以空格分开，这些依赖文件的修改日期比目标的创建日期晚</li><li>$+所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖文件</li><li>$^ 所有的依赖文件，以空格分开，不包含重复的依赖文件</li><li>$* 不包括扩展名的目标文件名称</li><li>$@ 目标的完整名称</li><li>$% 如果目标是归档成员，则该变量表示目标的归档成员名称</li></ul><h4 id="多目标扩展">多目标扩展</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">targets</span> <span class="hljs-attr">...</span>&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">target-pattern</span>&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">prereq-patterns</span> <span class="hljs-attr">...</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">commands</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">objects = foo.o bar.o<br><span class="hljs-section">all: <span class="hljs-variable">$(objects)</span></span><br><span class="hljs-variable">$(objects)</span>: %.o: %.c<br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$(CFLAGS)</span> <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><ul><li>目标从$object中获取</li><li>“%.o”表明要所有以“.o”结尾的目标，即“foo.obar.o”，就是变量$object集合的模式</li><li>依赖模式“%.c”则取模式“%.o”的“%”，也就是“foobar”，并为其加下“.c”的后缀，于是依赖的目标就是“foo.c bar.c”</li></ul><h4 id="函数">函数</h4><p>调用语法：</p><ul><li><p><code>$(&lt;function&gt; &lt;arguments&gt;)</code></p></li><li><p><code>$&#123;&lt;function&gt; &lt;arguments&gt;&#125;</code></p></li><li><p>字符串处理函数</p><ul><li><code>$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</code></li><li><code>$(strip &lt;string&gt;)</code></li></ul></li><li><p>文件名操作函数</p><ul><li><code>$(dir &lt;names...&gt;)</code></li><li><code>$(basename &lt;names...&gt;)</code></li></ul></li><li><p>foreach函数：<code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</code></p></li><li><p>if函数：<code>$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</code></p></li><li><p>call函数：<code>$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)</code></p></li></ul><h2 id="文件系统">1. 文件系统</h2><p>文件：可以被读写的对象。</p><ul><li>文件的属性包含访问权限、文件类型。</li></ul><p>文件系统：文件及其属性的集合。</p><h3 id="文件类型和结构">1.1 文件类型和结构</h3><p>文件类型：</p><ul><li>-：常规文件</li><li>d：目录</li><li>l：链接</li><li>c：字符设备文件</li><li>b：块设备文件</li><li>p：管道</li><li>s：套接字</li></ul><p>文件结构：字节流</p><h3 id="vfsvirtual-file-system-switch">1.2 VFS：Virtual File SystemSwitch</h3><p>用户程序系统调用的统一接口，连接Ext2、FAT等多种不同的文件系统。</p><p>虚拟、只存在于内存。</p><p>组件：</p><ul><li>超级块：文件系统的元数据，它包含了文件系统的全局信息，如块大小、inode和数据块的数量、分配策略等。</li><li>i-node：文件的元数据，如文件的大小、创建时间、最后访问时间、最后修改时间、文件权限等，但不包括文件名和文件数据本身。</li><li>文件：打开的文件，包含了读写文件的当前位置、文件的状态等。</li><li>dentry：文件系统中的一个目录入口，即一个路径名与一个i-node的映射。</li></ul><h3 id="硬链接和符号链接">1.3 硬链接和符号链接</h3><p>硬链接：</p><ul><li>不同的文件名对应同一个inode</li><li>不能跨越文件系统</li><li>对应系统调用link</li></ul><p>符号链接</p><ul><li>存储被链接文件的文件名(而不是inode)实现链接</li><li>可跨越文件系统</li><li>对应系统调用symlink</li></ul><h3 id="系统调用和库函数">1.4 系统调用和库函数</h3><p>都是C函数。</p><p>系统调用：Linux内核的对外接口；用户程序和内核之间唯一的接口。</p><p>库函数：依赖于系统调用，提供较复杂功能。</p><h4 id="基础io系统调用">基础I/O系统调用</h4><ul><li>文件描述符：非负整数<ul><li>STDIN_FILENO (0)、STDOUT_FILENO (1)、STDERR_FILENO (2)</li></ul></li><li>基础I/O函数<ul><li>open/creat、close、read、write、lseek</li><li>dup/dup2</li><li>fcntl</li><li>ioctl</li></ul></li></ul><h5 id="opencreat">open/creat</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, <span class="hljs-type">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">creat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span></span>;<br>(Return: a <span class="hljs-keyword">new</span> file descriptor <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><p>flags：文件访问模式。</p><ul><li>O_RDONLY：只读</li><li>O_WRONLY：只写</li><li>O_RDWR：读写</li><li>O_APPEND：追加</li><li>O_TRUNC：如果文件存在，截断到0字节</li><li>O_CREAT：文件不存在则创建</li><li>O_EXCL：与 <code>O_CREAT</code>标志结合使用。如果文件已存在则报错。</li></ul><p>mode：八进制数，文件权限。</p><figure><img src="/image/Linux系统编程/权限.png" alt="权限" /><figcaption aria-hidden="true">权限</figcaption></figure><p>umask：一个环境变量，决定了文件创建时的权限掩码。</p><ul><li>mode &amp; ~umask，得到最终创建的文件权限。</li></ul><h5 id="close">close</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">close</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><h5 id="readwrite">read/write</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span></span>;<br>(返回值: 读到的字节数，若已到文件尾为<span class="hljs-number">0</span>，若出错为<span class="hljs-number">-1</span>)<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span></span>;<br>(返回值: 若成功为已写的字节数，若出错为<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><h5 id="lseek">lseek</h5><p>改变文件读写位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">off_t</span> <span class="hljs-title">lseek</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence)</span></span>;<br>(Return: the resulting offset location <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><p>whence（出发点）：</p><ul><li>SEEK_SET</li><li>SEEK_CUR</li><li>SEEK_END</li></ul><h5 id="dupdup2">dup/dup2</h5><p>复制文件描述符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dup</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dup2</span><span class="hljs-params">(<span class="hljs-type">int</span> oldfd, <span class="hljs-type">int</span> newfd)</span></span>;<br>(Return: the <span class="hljs-keyword">new</span> file descriptor <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><h5 id="fcntl">fcntl</h5><p>管理文件描述符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, <span class="hljs-type">long</span> arg)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fcntl</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, <span class="hljs-keyword">struct</span> flock *lock)</span></span>;<br>(返回值: 若成功则依赖于cmd，若出错为<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><p>cmd：</p><ul><li>F_DUPFD：复制文件描述符</li><li>F_GETFD/F_SETFD：获取设置文件描述符控制标志</li><li>F_GETFL/F_SETFL：获取设置文件描述符状态标志</li><li>F_GETOWN/F_SETOWN：获取设置I/O可用性标志</li><li>F_GETLK/F_SETLK/F_SETLKW：获取设置文件锁</li></ul><h5 id="ioctl">ioctl</h5><p>控制设备。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ioctl</span><span class="hljs-params">(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> request, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>重定向用到了哪些系统调用？</p><h4 id="标准io库">标准I/O库</h4><p>主要考察缓冲。</p><p>文件流</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs julia">FILE* fp;<br>// <span class="hljs-literal">stdin</span> <span class="hljs-literal">stdout</span> <span class="hljs-literal">stderr</span><br></code></pre></td></tr></table></figure><p>三种缓冲：</p><ul><li>块缓冲</li><li>线性缓冲</li><li>无缓冲</li></ul><p>setbuf、setvbuf</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setbuf</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">char</span> *buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">setvbuf</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> mode, <span class="hljs-type">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure><p>mode：_IOFBF（满缓冲）、_IOLBF（行缓冲）、_IONBF（无缓冲）</p><p>流式I/O函数：</p><ul><li><p>open/close</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FILE *<span class="hljs-title">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fclose</span><span class="hljs-params">(FILE *stream)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><p>mode：r w a r+(读写) w+(读写，无则新建，有则清空)a+(读与追加，无则新建)</p></li><li><p>read/write</p><ul><li><p>每次一个字符的I/O</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getc</span>(<span class="hljs-params">FILE *fp</span>)</span>;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">fgetc</span>(<span class="hljs-params">FILE *fp</span>)</span>;<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getchar</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>;<br>（Result: Reads the next character <span class="hljs-keyword">from</span> a stream <span class="hljs-keyword">and</span> returns it <span class="hljs-keyword">as</span> an unsigned <span class="hljs-built_in">char</span> cast to an <span class="hljs-built_in">int</span>, <span class="hljs-keyword">or</span> EOF <span class="hljs-keyword">on</span> end of file <span class="hljs-keyword">or</span> error.）<br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">ungetc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> c, FILE *stream</span>)</span>; <span class="hljs-comment">// 将字符插回流中</span><br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">int</span> putc(<span class="hljs-built_in">int</span> c, <span class="hljs-keyword">FILE</span> *fp);<br><span class="hljs-built_in">int</span> fputc(<span class="hljs-built_in">int</span> c, <span class="hljs-keyword">FILE</span> *fp);<br><span class="hljs-built_in">int</span> putchar(<span class="hljs-built_in">int</span> c);<br>(<span class="hljs-keyword">Return</span>: the <span class="hljs-keyword">character</span> <span class="hljs-keyword">if</span> success; -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure></li><li><p>每次一行的I/O</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> size, FILE *stream)</span></span>;<br><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">gets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span></span>; <span class="hljs-comment">//not recommended.</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, FILE *stream)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>直接I/O(二进制I/O)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">fread</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, FILE *stream)</span></span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">fwrite</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, FILE *stream)</span></span>;<br>(Return: the number of a items successfully read <span class="hljs-keyword">or</span> written.)<br></code></pre></td></tr></table></figure></li><li><p>格式化I/O</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">scanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fscanf</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fprintf</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>reposition</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fseek</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">long</span> <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> whence)</span></span>;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">ftell</span><span class="hljs-params">(FILE *stream)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rewind</span><span class="hljs-params">(FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fgetpos</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">fpos_t</span> *pos)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fsetpos</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">const</span> <span class="hljs-type">fpos_t</span> *pos)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>flush</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fflush</span><span class="hljs-params">(FILE *stream)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>流与文件描述符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fileno</span><span class="hljs-params">(FILE *fp)</span></span>;<br><span class="hljs-function">FILE *<span class="hljs-title">fdopen</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>临时文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">char *<span class="hljs-built_in">tmpnam</span>(char *s);<br>(返回值: 指向唯一路径名的指针)<br>FILE *<span class="hljs-built_in">tmpfile</span>(void);<br>(返回值: 若成功为文件指针，若出错为NULL)<br></code></pre></td></tr></table></figure></li></ul><h4 id="高级系统调用">高级系统调用</h4><p>stat、fstat：返回文件状态信息，存储在buf中</p><p>lstat：获取符号链接本身的状态信息，存储在buf中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-keyword">struct</span> stat *buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fstat</span><span class="hljs-params">(<span class="hljs-type">int</span> filedes, <span class="hljs-keyword">struct</span> stat *buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lstat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file_name, <span class="hljs-keyword">struct</span> stat *buf)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> &#123;<br><span class="hljs-type">mode_t</span> st_mode; <span class="hljs-comment">/*file type &amp; mode*/</span><br><span class="hljs-type">ino_t</span> st_ino; <span class="hljs-comment">/*inode number (serial number)*/</span><br><span class="hljs-type">dev_t</span> st_rdev; <span class="hljs-comment">/*device number (file system)*/</span><br><span class="hljs-type">nlink_t</span> st_nlink; <span class="hljs-comment">/*link count*/</span><br><span class="hljs-type">uid_t</span> st_uid; <span class="hljs-comment">/*user ID of owner*/</span><br><span class="hljs-type">gid_t</span> st_gid; <span class="hljs-comment">/*group ID of owner*/</span><br><span class="hljs-type">off_t</span> st_size; <span class="hljs-comment">/*size of file, in bytes*/</span><br><span class="hljs-type">time_t</span> st_atime; <span class="hljs-comment">/*time of last access*/</span><br><span class="hljs-type">time_t</span> st_mtime; <span class="hljs-comment">/*time of last modification*/</span><br><span class="hljs-type">time_t</span> st_ctime; <span class="hljs-comment">/*time of last file status change*/</span><br><span class="hljs-type">long</span> st_blksize; <span class="hljs-comment">/*Optimal block size for I/O*/</span><br><span class="hljs-type">long</span> st_blocks; <span class="hljs-comment">/*number 512-byte blocks allocated*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>测试文件类型：sys/stat.h</p><ul><li>S_ISREG()</li><li>S_ISDIR()</li><li>S_ISCHAR()</li><li>S_ISBLK()</li><li>S_ISFIFO()</li><li>S_ISLNK()</li><li>S_ISSOCK()</li></ul><p>文件权限</p><ul><li><p>rwx</p></li><li><p>SUID：需要有效uid</p></li><li><p>SGID：需要有效gid</p></li><li><p>Sticky bit：只有owner</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">chmod</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fchmod</span><span class="hljs-params">(<span class="hljs-type">int</span> fildes, <span class="hljs-type">mode_t</span> mode)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">chown</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fchown</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lchown</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">uid_t</span> owner, <span class="hljs-type">gid_t</span> group)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">mode_t</span> <span class="hljs-title">umask</span><span class="hljs-params">(<span class="hljs-type">mode_t</span> mask)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">unlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">symlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span></span>;<br>(Return: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success; <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">readlink</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> bufsiz)</span></span>;<br>(Return: the count of characters placed in the buffer <span class="hljs-keyword">if</span> success;<span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><p>目录</p><ul><li>mkdir/rmdir</li><li>chdir/fchdir, getcwd</li><li>读取目录：DIR数据结构<ul><li>opendir/closedir</li><li>readdir</li><li>telldir</li><li>seekdir</li></ul></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mkdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">mode_t</span> mode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rmdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">chdir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fchdir</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span></span>;<br><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">getcwd</span><span class="hljs-params">(<span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DIR *<span class="hljs-title">opendir</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">closedir</span><span class="hljs-params">(DIR *dir)</span></span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dirent</span> *<span class="hljs-built_in">readdir</span>(DIR *dir);<br><span class="hljs-function"><span class="hljs-type">off_t</span> <span class="hljs-title">telldir</span><span class="hljs-params">(DIR *dir)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">seekdir</span><span class="hljs-params">(DIR *dir, <span class="hljs-type">off_t</span> offset)</span></span>;<br></code></pre></td></tr></table></figure><p>文件锁 important</p><ul><li><p>记录锁</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">fcntl</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> fd, <span class="hljs-built_in">int</span> cmd, <span class="hljs-keyword">struct</span> flock *<span class="hljs-keyword">lock</span></span>)</span>;<br>(返回值: 若成功则依赖于cmd，若出错为<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure></li><li><p>劝告锁</p><ul><li>检查，加锁有应用程序自己控制</li></ul></li><li><p>强制锁</p><ul><li>检查，加锁由内核控制</li><li>影响[open() read() write()]等</li></ul></li><li><p>共享锁</p></li><li><p>排他锁</p></li><li><p>共享模式强制锁</p></li><li><p>租借锁</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">flock</span>&#123;<br>...<br><span class="hljs-type">short</span> l_type; <span class="hljs-comment">/* Type of lock: F_RDLCK, F_WRLCK, F_UNLCK */</span><br><span class="hljs-type">short</span> l_whence; <span class="hljs-comment">/* How to interpret l_start: SEEK_SET, SEEK_CUR,</span><br><span class="hljs-comment">SEEK_END */</span><br><span class="hljs-type">off_t</span> l_start; <span class="hljs-comment">/* Starting offset for lock */</span><br><span class="hljs-type">off_t</span> l_len; <span class="hljs-comment">/* Number of bytes to lock */</span><br><span class="hljs-type">pid_t</span> l_pid; <span class="hljs-comment">/* PID of process blocking our lock (F_GETLK only) */</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>cmd</p><ul><li>F_GETLK：获得文件的封锁信息</li><li>F_SETLK：对文件的某个区域封锁或解除封锁</li><li>F_SETLKW：功能同F_SETLK，wait方式。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/file.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lockf</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> cmd, <span class="hljs-type">off_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="多核编程">2. 多核编程</h2><h3 id="exec">exec</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execl</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg0, ..., (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execlp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg0, ..., (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *arg0, ..., (<span class="hljs-type">char</span> *)<span class="hljs-number">0</span>, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execv</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execvp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span></span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>execl</code>、<code>execlp</code>和<code>execle</code>：可变参数为逐个列举。<code>execl</code>和<code>execle</code>带有环境变量，而<code>execlp</code>不带环境变量。实际上会调用对应的v系列函数。</p></li><li><p><code>execv</code>、<code>execvp</code>和<code>execve</code>：可变参数为NULL结尾的指针数组。<code>execv</code>和<code>execvp</code>不带环境变量，而<code>execve</code>可以传递环境变量。前两者最终会调用execve函数。</p></li></ul><h3 id="fork">fork</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">pid_t</span> <span class="hljs-title">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><br><span class="hljs-keyword">if</span>(fork()==<span class="hljs-number">0</span>)<br>&#123;子进程执行的代码段；&#125;<br><span class="hljs-keyword">else</span><br>&#123;父进程执行的代码段；&#125;<br></code></pre></td></tr></table></figure><h3 id="wait-waitpid">wait &amp; waitpid</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">pid_t</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-type">int</span> *status)</span></span>;<br><span class="hljs-function"><span class="hljs-type">pid_t</span> <span class="hljs-title">waitpid</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> *status, <span class="hljs-type">int</span> options)</span></span>;<br></code></pre></td></tr></table></figure><p>wait：调用wait函数的进程会被挂起，等待任意一个子进程结束，如果该子进程结束了，此函数会回收子进程的资源。</p><ul><li>如果成功，wait会返回被收集的子进程的进程ID；</li><li>如果调用进程没有子进程，调用就会失败，此时wait返回-1，同时errno被置为ECHILD。</li></ul><p>waitpid：回收指定进程号的子进程，可以设置是否阻塞。</p><ul><li><p>pid=0，等待任意子进程。</p></li><li><p>pid=-1，回收所有子进程。</p></li><li><p>pid&lt;-1，其绝对值为某个进程组的组id，回收该进程组的所有进程。</p></li><li><p>status用来保存被收集进程退出时的一些状态，它是一个指向int类型的指针。</p></li><li><p>options：WNOHANG，非阻塞。</p></li></ul><ol type="1"><li><p>当正常返回的时候，waitpid返回收集到的子进程的进程ID；</p></li><li><p>如果设置了选项WNOHANG，而调用中waitpid发现没有已退出的子进程可收集，则返回0；　　</p></li><li><p>如果调用中出错，则返回-1，这时errno会被设置成相应的值以指示错误所在；</p><p>当pid所指示的子进程不存在，或此进程存在，但不是调用进程的子进程，waitpid就会出错返回，这时errno被设置为ECHILD。</p></li></ol><h3 id="signal">Signal</h3><p>信号处理</p><ul><li><p>忽略信号</p></li><li><p>不能忽略的信号： SIGKILL, SIGSTOP、一些硬件异常信号</p></li><li><p>执行系统默认动作</p></li><li><p>捕捉信号</p></li></ul><p>signal函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*<span class="hljs-type">sighandler_t</span>)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">sighandler_t</span> <span class="hljs-title">signal</span><span class="hljs-params">(<span class="hljs-type">int</span> signum, <span class="hljs-type">sighandler_t</span> handler)</span></span>;<br>(Returned Value: the previous handler <span class="hljs-keyword">if</span> success, SIG_ERR <span class="hljs-keyword">if</span> error)<br></code></pre></td></tr></table></figure><p>handler为用户定义的函数。</p><h4 id="kill和raise">kill和raise</h4><p>kill向进程发送信号，raise向当前进程发送信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kill</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">int</span> sig)</span></span>;<br>(Returned Value: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success, <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">raise</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span></span>;<br>(Returned Value: <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> success, <span class="hljs-number">-1</span> <span class="hljs-keyword">if</span> failure)<br></code></pre></td></tr></table></figure><h4 id="alarm和pause">alarm和pause</h4><p>alarm：一定时间后发送SIGALRM信号。</p><p>pause：挂起等待信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pause</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>组合两者可以让进程等待一段时间后执行。</p><h4 id="可靠信号机制">可靠信号机制</h4><h3 id="可重入函数">可重入函数</h3><p>可以被中断的函数。</p><p>不可重入函数：</p><ul><li>系统资源</li><li>全局变量</li><li>使用静态数据结构</li><li>malloc、free</li><li>标准IO函数</li></ul><h3 id="posix-thread">POSIX Thread</h3><p>编译：gcc thread.c –o thread –lpthread</p><h4 id="创建和终止">创建和终止</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_create</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">pthread_t</span> *thread,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">pthread_attr_t</span> *attr,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">void</span> *(*start_routine)(<span class="hljs-type">void</span> *),</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">void</span> *arg)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pthread_exit</span><span class="hljs-params">(<span class="hljs-type">void</span> *retval)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="等待和分离">等待和分离</h4><p>Joinable Thread：可连接线程</p><ul><li>可以被其他线程等待（join）的线程。</li></ul><p>Detached Thread：分离线程</p><ul><li>启动后独立运行的线程。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;pthread.h&gt;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_join(<span class="hljs-params">pthread_t</span> <span class="hljs-params">th</span>, <span class="hljs-params">void</span> <span class="hljs-operator">**</span><span class="hljs-params">thread_return</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_detach(<span class="hljs-params">pthread_t</span> <span class="hljs-params">th</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="线程同步">线程同步</h4><h5 id="信号量">信号量</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;semaphore.h&gt;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_init(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>, <span class="hljs-params">int</span> <span class="hljs-params">pshared</span>, <span class="hljs-params">unsigned</span> <span class="hljs-params">int</span> <span class="hljs-params">value</span>)</span>;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_wait(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>)</span>;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_post(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>)</span>;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_destroy(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>)</span>;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_trywait(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>)</span>;<br><span class="hljs-built_in">int</span> sem<span class="hljs-constructor">_getvalue(<span class="hljs-params">sem_t</span> <span class="hljs-operator">*</span><span class="hljs-params">sem</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">sval</span>)</span>;<br></code></pre></td></tr></table></figure><p>生产者-消费者问题：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/wait.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;fcntl.h&gt;</span><br><span class="hljs-comment">#include &lt;semaphore.h&gt;</span><br><br><span class="hljs-comment">#define BUFFER_SIZE 10</span><br><span class="hljs-comment">#define PRODUCER_COUNT 3</span><br><span class="hljs-comment">#define CONSUMER_COUNT 2</span><br><br>sem_t empty, full, mutex;<br>int buffer[BUFFER_SIZE];<br>int <span class="hljs-keyword">in</span> = <span class="hljs-number">0</span>;<br>int out = <span class="hljs-number">0</span>;<br><br>void produce(int index) &#123;<br>    sem_wait(&amp;empty);<br>    sem_wait(&amp;mutex);<br><br>    printf(<span class="hljs-string">&quot;生产者%d生产了一个产品\n&quot;</span>, index);<br>    buffer[<span class="hljs-keyword">in</span>] = index;<br>    <span class="hljs-keyword">in</span> = (<span class="hljs-keyword">in</span> + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br><br>    sem_post(&amp;mutex);<br>    sem_post(&amp;full);<br>&#125;<br><br>void consume(int index) &#123;<br>    sem_wait(&amp;full);<br>    sem_wait(&amp;mutex);<br><br>    printf(<span class="hljs-string">&quot;消费者%d消费了一个产品\n&quot;</span>, index);<br>    buffer[out] = -<span class="hljs-number">1</span>; <span class="hljs-regexp">//</span> 或者可以用某种方式标记为已消费<br>    out = (out + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br><br>    sem_post(&amp;mutex);<br>    sem_post(&amp;empty);<br>&#125;<br><br>int main() &#123;<br>    <span class="hljs-regexp">//</span> 初始化信号量<br>    <span class="hljs-keyword">if</span> (sem_init(&amp;empty, <span class="hljs-number">1</span>, BUFFER_SIZE) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;sem_init&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (sem_init(&amp;full, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;sem_init&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (sem_init(&amp;mutex, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;sem_init&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    pid_t pid;<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; PRODUCER_COUNT; i++) &#123;<br>        pid = fork();<br>        <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>            <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-regexp">//</span> 子进程，生产者<br>            <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>                produce(i);<br>                sleep(rand() % <span class="hljs-number">3</span>); <span class="hljs-regexp">//</span> 随机睡眠以模拟不同生产者生产速度<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; CONSUMER_COUNT; i++) &#123;<br>        pid = fork();<br>        <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>            <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-regexp">//</span> 子进程，消费者<br>            <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>                consume(i);<br>                sleep(rand() % <span class="hljs-number">3</span>); <span class="hljs-regexp">//</span> 随机睡眠以模拟不同消费者消费速度<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 等待所有生产者和消费者结束<br>    <span class="hljs-keyword">while</span> (wait(NULL) &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-regexp">//</span> 销毁信号量<br>    sem_destroy(&amp;empty);<br>    sem_destroy(&amp;full);<br>    sem_destroy(&amp;mutex);<br><br>    <span class="hljs-keyword">exit</span>(EXIT_SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="互斥量">互斥量</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_mutex_init</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex, <span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span> *mutexattr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_mutex_lock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_mutex_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_mutex_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_mutex_trylock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 10</span><br><br><span class="hljs-type">int</span> buffer[BUFFER_SIZE];<br><span class="hljs-type">int</span> in = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> out = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 互斥量初始化</span><br><span class="hljs-type">pthread_mutex_t</span> mutex, empty, full;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 等待有空余位置</span><br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;empty);<br>        <span class="hljs-keyword">while</span> (in == BUFFER_SIZE) &#123;<br>            <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;empty);<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">3</span>); <span class="hljs-comment">// 生产者等待</span><br>            <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;empty);<br>        &#125;<br><br>        <span class="hljs-comment">// 生产产品</span><br>        buffer[in] = *(<span class="hljs-type">int</span>*)arg;<br>        in = (in + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;生产者生产了产品 %d\n&quot;</span>, *(<span class="hljs-type">int</span>*)arg);<br><br>        <span class="hljs-comment">// 通知消费者有新产品</span><br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;empty);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;full);<br>        full++;<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;full);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 等待有产品</span><br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;full);<br>        <span class="hljs-keyword">while</span> (out == in) &#123;<br>            <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;full);<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">3</span>); <span class="hljs-comment">// 消费者等待</span><br>            <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;full);<br>        &#125;<br><br>        <span class="hljs-comment">// 消费产品</span><br>        <span class="hljs-type">int</span> product = buffer[out];<br>        out = (out + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消费者消费了产品 %d\n&quot;</span>, product);<br><br>        <span class="hljs-comment">// 通知生产者有空余位置</span><br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;full);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;empty);<br>        empty++;<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;empty);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化互斥量</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_mutex_init</span>(&amp;mutex, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; mutex init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_mutex_init</span>(&amp;empty, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; empty init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_mutex_init</span>(&amp;full, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; full init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-type">pthread_t</span> pid, cid;<br>    <span class="hljs-type">int</span> producer_arg = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> consumer_arg = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建生产者线程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_create</span>(&amp;pid, <span class="hljs-literal">NULL</span>, producer, &amp;producer_arg)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread creation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建消费者线程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_create</span>(&amp;cid, <span class="hljs-literal">NULL</span>, consumer, &amp;consumer_arg)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread creation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 等待线程结束</span><br>    <span class="hljs-built_in">pthread_join</span>(pid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">pthread_join</span>(cid, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 销毁互斥量</span><br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;mutex);<br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;empty);<br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;full);<br></code></pre></td></tr></table></figure><h5 id="条件变量">条件变量</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cond_init(<span class="hljs-params">pthread_cond_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cond</span>, <span class="hljs-params">pthread_condattr_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cond_attr</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cond_destory(<span class="hljs-params">pthread_cond_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cond</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cond_wait(<span class="hljs-params">pthread_cond_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cond</span>, <span class="hljs-params">pthread_mutex_t</span> <span class="hljs-params">mutex</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cond_signal(<span class="hljs-params">pthread_cond_t</span> <span class="hljs-params">cond</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cond_broadcast(<span class="hljs-params">pthread_cond_t</span> <span class="hljs-params">cond</span>)</span>;<br></code></pre></td></tr></table></figure><p>条件变量使用：与互斥量结合</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 10</span><br><br><span class="hljs-type">int</span> buffer[BUFFER_SIZE];<br><span class="hljs-type">int</span> in = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> out = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 互斥量初始化</span><br><span class="hljs-type">pthread_mutex_t</span> mutex;<br><br><span class="hljs-comment">// 条件变量初始化</span><br><span class="hljs-type">pthread_cond_t</span> empty, full;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 等待有空余位置</span><br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mutex);<br>        <span class="hljs-keyword">while</span> (in == BUFFER_SIZE) &#123;<br>            <span class="hljs-built_in">pthread_cond_wait</span>(&amp;empty, &amp;mutex);<br>        &#125;<br><br>        <span class="hljs-comment">// 生产产品</span><br>        buffer[in] = *(<span class="hljs-type">int</span>*)arg;<br>        in = (in + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;生产者生产了产品 %d\n&quot;</span>, *(<span class="hljs-type">int</span>*)arg);<br><br>        <span class="hljs-comment">// 通知消费者有新产品</span><br>        <span class="hljs-built_in">pthread_cond_signal</span>(&amp;full);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mutex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 等待有产品</span><br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mutex);<br>        <span class="hljs-keyword">while</span> (out == in) &#123;<br>            <span class="hljs-built_in">pthread_cond_wait</span>(&amp;full, &amp;mutex);<br>        &#125;<br><br>        <span class="hljs-comment">// 消费产品</span><br>        <span class="hljs-type">int</span> product = buffer[out];<br>        out = (out + <span class="hljs-number">1</span>) % BUFFER_SIZE;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消费者消费了产品 %d\n&quot;</span>, product);<br><br>        <span class="hljs-comment">// 通知生产者有空余位置</span><br>        <span class="hljs-built_in">pthread_cond_signal</span>(&amp;empty);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mutex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化互斥量</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_mutex_init</span>(&amp;mutex, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; mutex init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化条件变量</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_cond_init</span>(&amp;empty, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; empty init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_cond_init</span>(&amp;full, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; full init failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-type">pthread_t</span> pid, cid;<br>    <span class="hljs-type">int</span> producer_arg = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> consumer_arg = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建生产者线程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_create</span>(&amp;pid, <span class="hljs-literal">NULL</span>, producer, &amp;producer_arg)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread creation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建消费者线程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_create</span>(&amp;cid, <span class="hljs-literal">NULL</span>, consumer, &amp;consumer_arg)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread creation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 等待线程结束</span><br>    <span class="hljs-built_in">pthread_join</span>(pid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">pthread_join</span>(cid, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 销毁互斥量</span><br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;mutex);<br>    <span class="hljs-built_in">pthread_cond_destroy</span>(&amp;empty);<br>    <span class="hljs-built_in">pthread_cond_destroy</span>(&amp;full);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程取消">线程取消</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_cancel(<span class="hljs-params">pthread_t</span> <span class="hljs-params">thread</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_setcancelstate(<span class="hljs-params">int</span> <span class="hljs-params">state</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">oldstate</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_setcanceltype(<span class="hljs-params">int</span> <span class="hljs-params">type</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">oldtype</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="线程局部存储-tls">线程局部存储 TLS</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_key_create(<span class="hljs-params">pthread_key_t</span> <span class="hljs-operator">*</span><span class="hljs-params">key</span>, <span class="hljs-params">void</span> (<span class="hljs-operator">*</span><span class="hljs-params">destructor</span>)</span>(void*));<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_key_delete(<span class="hljs-params">pthread_key_t</span> <span class="hljs-params">key</span>)</span>;<br>void *pthread<span class="hljs-constructor">_getspecific(<span class="hljs-params">pthread_key_t</span> <span class="hljs-params">key</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_setspecific(<span class="hljs-params">pthread_key_t</span> <span class="hljs-params">key</span>, <span class="hljs-params">const</span> <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">value</span>)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;飞萤扑火，向死而生。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux系统编程" scheme="http://example.com/categories/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程_2_Shell</title>
    <link href="http://example.com/2024/05/02/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC2%E7%AB%A0%20Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2024/05/02/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC2%E7%AB%A0%20Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2024-05-02T04:00:00.000Z</published>
    <updated>2024-06-21T07:23:33.201Z</updated>
    
    <content type="html"><![CDATA[<p>飞萤扑火，向死而生。</p><span id="more"></span><h1 id="第2章-shell编程">第2章 Shell编程</h1><p>Shell：指令解释器和编程环境。</p><p>用户和操作系统之间的接口，作为核外程序存在。</p><p>Shell的双重角色：</p><ul><li>命令解释程序<ul><li>Linux的开机启动过程；进程树</li><li>Shell的工作步骤</li><li>打印提示符；得到命令行；解析命令；查找文件；准备参数；执行命令</li></ul></li><li>独立的程序设计语言解释器</li></ul><p>Shell列举：ash、bsh、bash、sh、csh、zsh</p><h2 id="脚本文件">脚本文件</h2><p>注释：#</p><p>退出码：</p><ul><li>0：正常返回</li><li>1~128：错误码</li><li>129+：信号量</li></ul><h3 id="执行脚本文件">执行脚本文件</h3><ol type="1"><li><p>$ sh script_file</p></li><li><p>chmod +x script_file</p><p>./script_file</p></li><li><p>source script_file或 . script_file</p></li></ol><h3 id="用户环境">用户环境</h3><ol type="1"><li>.bash_profile，.bash_logout，.bashrc<ul><li>.bash_profile：用户登录时被读取，其中命令被bash执行</li><li>.bashrc：启动一个新的shell时被读取并执行</li><li>.bash_logout：登录退出时读取执行</li></ul></li><li>Alias：alias/unalias</li><li>环境变量<ul><li>export/env/set</li></ul></li></ol><h3 id="变量">变量</h3><ul><li>用户变量</li><li>环境变量</li><li>参数变量和内部变量</li></ul><h4 id="用户变量">用户变量</h4><p>用户在shell脚本里定义的变量。</p><ul><li><p>变量的赋值与使用：var=value echo $var</p></li><li><p>read命令：read var（读取用户输入并赋值给var）</p><ul><li>-p：在提示符后添加文本</li><li>-s：不显示用户输入</li><li>-r：用户输入不能修改</li><li>-n[字符数]：指定读取字符数，例如-n1</li></ul></li><li><p>引号</p><ul><li>单引号内的所有字符保持本身字符的意思，不被bash解释</li><li>除了$、``（不是单引号）、，双引号内的所有字符将保持字符本身含义，不被bash解释</li></ul></li></ul><h4 id="环境变量">环境变量</h4><p>Shell环境提供的变量，通常使用大写字母做名称。</p><table><thead><tr class="header"><th>环境变量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>$HOME</td><td>当前用户登录目录</td></tr><tr class="even"><td>$PATH</td><td>以冒号分隔的用来搜索命令的目录清单</td></tr><tr class="odd"><td><span class="math inline">\(PS1 |命令行提示符，通常是”\)</span>”字符</td><td></td></tr><tr class="even"><td>$PS2</td><td>辅助提示符，用来提示后续输入，通常是”&gt;”字符</td></tr><tr class="odd"><td>$IFS</td><td>输入区分隔符。当shell读取输入数据时会把一组字符看成是单词之间的分隔符，通常是空格、制表符、换行符等。</td></tr></tbody></table><h4 id="参数变量和内部变量">参数变量和内部变量</h4><p>调用脚本程序时如果带有参数，对应的参数和额外产生的一些变量。</p><table><thead><tr class="header"><th>环境变量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>$#</td><td>传递到脚本程序的参数个数</td></tr><tr class="even"><td>$0</td><td>脚本程序的名字</td></tr><tr class="odd"><td>$1</td><td>脚本程序的参数</td></tr><tr class="even"><td>$*</td><td>一个全体参数组成的清单，它是一个独立的变量，各个参数之间用环境变量IFS中的第一个字符分隔开</td></tr><tr class="odd"><td><span class="math inline">\(@ |“\)</span>*”的一种变体，它不使用IFS环境变量。</td><td></td></tr></tbody></table><h3 id="条件测试">条件测试</h3><p>test expression 或 [ expression ]</p><ul><li>字符串比较</li><li>算术比较</li><li>文件相关测试</li><li>逻辑操作</li></ul><table><thead><tr class="header"><th>字符串比较</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>str1 = str2</td><td>相同则为真</td></tr><tr class="even"><td>str1!=str2</td><td>不同则为真</td></tr><tr class="odd"><td>-z str</td><td>字符串为空则结果为真</td></tr><tr class="even"><td>-n str</td><td>字符串不为空则结果为真</td></tr></tbody></table><table><thead><tr class="header"><th>算术比较</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>expr1 –eq expr2</td><td>两个表达式相等则结果为真</td></tr><tr class="even"><td>expr1 –ne expr2</td><td>两个表达式不等则结果为真</td></tr><tr class="odd"><td>expr1 –gt expr2</td><td>expr1 大于 expr2 则结果为真</td></tr><tr class="even"><td>expr1 –ge expr2</td><td>expr1 大于或等于 expr2 则结果为真</td></tr><tr class="odd"><td>expr1 –lt expr2</td><td>expr1 小于 expr2 则结果为真</td></tr><tr class="even"><td>expr1 –le expr2</td><td>expr1 小于或等于 expr2 则结果为真</td></tr></tbody></table><table><thead><tr class="header"><th>文件条件测试</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>-e file</td><td>文件存在则结果为真</td></tr><tr class="even"><td>-d file</td><td>文件是一个子目录则结果为真</td></tr><tr class="odd"><td>-f file</td><td>文件是一个普通文件则结果为真</td></tr><tr class="even"><td>-s file</td><td>文件的长度不为零则结果为真</td></tr><tr class="odd"><td>-r file</td><td>文件可读则结果为真</td></tr><tr class="even"><td>-w file</td><td>文件可写则结果为真</td></tr><tr class="odd"><td>-x file</td><td>文件可执行则结果为真</td></tr></tbody></table><table><thead><tr class="header"><th>逻辑操作</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>! expr</td><td>逻辑表达式求反</td></tr><tr class="even"><td>expr1 –a expr2</td><td>两个逻辑表达式“And”（“与”）</td></tr><tr class="odd"><td>expr1 –o expr2</td><td>两个逻辑表达式“Or”（“或”）</td></tr></tbody></table><h3 id="条件语句">条件语句</h3><h4 id="if语句">if语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ expression ]<br><span class="hljs-keyword">then</span><br>statements<br><span class="hljs-keyword">elif</span> [ expression ]<br><span class="hljs-keyword">then</span><br>statements<br><span class="hljs-keyword">elif</span> …<br><span class="hljs-keyword">else</span><br>statements<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h4 id="case语句">case语句</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">case</span> str <span class="hljs-built_in">in</span><br>str1 | <span class="hljs-type">str2</span>) statements;;<br>str3 | <span class="hljs-type">str4</span>) statements;;<br>*) statements;;<br>esac<br></code></pre></td></tr></table></figure><h3 id="重复语句">重复语句</h3><h4 id="for语句">for语句</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span> <span class="hljs-keyword">var</span> <span class="hljs-keyword">in</span> list<br><span class="hljs-keyword">do</span><br>statements<br>done<br></code></pre></td></tr></table></figure><h4 id="while语句">while语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span><br>statements<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="until语句">until语句</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">until</span> condition<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">statements</span><br>done<br></code></pre></td></tr></table></figure><h4 id="select语句">select语句</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">select</span> item in itemlist<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">statements</span><br>done<br></code></pre></td></tr></table></figure><p>生成菜单列表</p><h3 id="命令表">命令表</h3><p>命令的组合。</p><ul><li><p>分号串联：command1 ; command2 ; …</p></li><li><p>条件组合，AND和OR：</p><p><code>statement1 &amp;&amp; statement2 &amp;&amp; …</code>和<code>statement1 || statement2 || …</code></p></li></ul><h3 id="语句块">语句块</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<br>stateme<span class="hljs-symbol">nt1</span><br>stateme<span class="hljs-symbol">nt2</span><br>…<br>&#125;<br>&#123; stateme<span class="hljs-symbol">nt1</span>; stateme<span class="hljs-symbol">nt2</span> ; … ; &#125;<br></code></pre></td></tr></table></figure><h3 id="函数">函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">func</span><span class="hljs-params">()</span></span><br>&#123;<br>statements<br>&#125;<br></code></pre></td></tr></table></figure><p>局部变量：local关键字</p><p>函数调用：func para1 para2 ...</p><p>返回值：return</p><h3 id="杂项命令">杂项命令</h3><ul><li>break：从for/while/until循环退出</li><li>continue：跳到下一个循环继续执行</li><li>exit n：以退出码”n”退出脚本运行</li><li>return：函数返回</li><li>export：将变量导出到shell，使之成为shell的环境变量</li><li>set：为shell设置参数变量</li><li>unset：从环境中删除变量或函数</li><li>trap：指定在收到操作系统信号后执行的动作</li><li>“:”(冒号命令)：空命令</li><li>“.”(句点命令)或source在当前shell中执行命令</li></ul><h3 id="捕获命令输出">捕获命令输出</h3><p><code>$(command)</code>和<code>`(command)`</code></p><h3 id="算术扩展">算术扩展</h3><p><code>$((...))</code></p><h3 id="参数扩展">参数扩展</h3><p>批处理 1_tmp, 2_tmp, …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>i=1<br><span class="hljs-keyword">while</span> [ “<span class="hljs-variable">$i</span>” –ne 10 ]; <span class="hljs-keyword">do</span><br><span class="hljs-built_in">touch</span> “<span class="hljs-variable">$&#123;i&#125;</span>_tmp”<br>i=$((<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>更复杂形式：</p><figure><img src="/image/Linux系统编程/参数.png" alt="参数扩展" /><figcaption aria-hidden="true">参数扩展</figcaption></figure><h3 id="即时文档">即时文档</h3><p>在shell脚本中向一条命令传送输入数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">cat</span> &gt;&gt; file.txt &lt;&lt; !CATINPUT!<br>Hello, this is a here document.<br>!CATINPUT!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;飞萤扑火，向死而生。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux系统编程" scheme="http://example.com/categories/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程_1_基础</title>
    <link href="http://example.com/2024/05/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC1%E7%AB%A0%20Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/05/01/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/%E7%AC%AC1%E7%AB%A0%20Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2024-05-01T04:00:00.000Z</published>
    <updated>2024-06-21T07:23:15.117Z</updated>
    
    <content type="html"><![CDATA[<p>飞萤扑火，向死而生。</p><span id="more"></span><h1 id="第1章-linux系统基础">第1章 Linux系统基础</h1><h2 id="linux概念与使用">1. Linux概念与使用</h2><p>基于GNU通用公共协议的类Unix操作系统。</p><ul><li>开源、流行、支持大多数平台</li></ul><h3 id="gnulinux系统">GNU/Linux系统</h3><p>GNU软件/库+Linux内核</p><p>版本：Ubuntu、Debian、Mint、Red Hat、Fodore、SuSe</p><h3 id="boot-loader">Boot loader</h3><p>Boot loader加载并启动Linux内核。</p><p>常见的Boot loader：</p><ul><li>LILO：Linux Loader</li><li>GRUB：Grand Unified Boot Loader<ul><li>配置文件：<code>/boot/grub/grub.conf</code>（旧版）</li><li>不需要和LILO一样进行配置激活（自动识别加载系统内核和initrd文件）</li><li>使用grub-install安装在MBR中</li></ul></li></ul><p>GRUB引导过程：</p><ol type="1"><li>MBR上的引导程序，负责加载GRUB的第二阶段</li><li>完整的内核加载在/boot/grub目录下</li></ol><p>要能读懂GRUB配置文件</p><p>基本结构：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span>=<span class="hljs-number">0</span>  # 默认启动第一个系统<br><span class="hljs-attribute">timeout</span>=<span class="hljs-number">5</span>  # 等待超时时间<span class="hljs-number">5</span>秒<br><span class="hljs-attribute">splashimage</span>=(hd0,<span class="hljs-number">0</span>)/grub/splash.xpm.gz  # 背景图片<br><span class="hljs-attribute">hiddenmenu</span>  # 隐藏菜单，若要显式，在启动时按下ESC<br><span class="hljs-attribute">title</span> Red Hat Enterprise Linux AS (<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">18</span>-<span class="hljs-number">92</span>.el5)  # 定义操作系统的说明信息<br>    <span class="hljs-attribute">root</span> (hd0,<span class="hljs-number">0</span>) <br>    <span class="hljs-attribute">kernel</span> /vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">18</span>-<span class="hljs-number">92</span>.el5 ro root＝/dev/sda2 rhgb quiet<br>    <span class="hljs-attribute">initrd</span> /initrd-<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">18</span>-<span class="hljs-number">92</span>.el5.img<br></code></pre></td></tr></table></figure><p>GRUB2：<code>/boot/grub/grub.cfg</code></p><h3 id="虚拟终端">虚拟终端</h3><p>控制台模拟了一个或多个虚拟终端。</p><p>每个虚拟终端是独立的控制台，不同用户可以使用不同的虚拟终端。</p><p>切换方式：Ctrl+Alt+Fn / Alt+Fn</p><h2 id="linux基础命令">2. Linux基础命令</h2><p>命令行：$ 和 #（root）</p><p>$ command option(s) argument(s)</p><p>主要命令都需要掌握。</p><h3 id="基础命令">0. 基础命令</h3><ul><li>passwd：修改密码</li><li>mkpasswd：生成随机密码</li><li>date, cal：打印日期/日历</li><li>who, finger：查看系统上在线的用户信息</li><li>clear：清空屏幕</li><li>echo：打印信息</li><li>write, wall, talk：与其他用户信息通信。<ul><li><code>write username</code>：提示输入消息内容，然后将消息发送给<code>username</code>。</li><li><code>wall</code>：即write all，发送给所有用户</li><li><code>talk username</code>：连接目标用户，启动聊天会话</li></ul></li></ul><h3 id="目录命令">1. 目录命令</h3><ul><li><p>pwd：打印工作目录</p></li><li><p>cd</p></li><li><p>mkdir</p></li><li><p>rmdir</p></li><li><p>ls：列出目录中的内容</p><ul><li><p>-l：以长格式显示文件和目录的信息。</p><p>包括文件或目录的权限模式、所有者、群组、大小和最后修改日期。</p></li><li><p>-a：显示所有文件，包括以.开头的隐藏文件。</p></li><li><p>-R：递归列出所有子目录中的内容。</p></li></ul></li><li><p>mknod：创建字符设备或块设备<code>mknod [options] [name] [type] [major minor]</code></p><ul><li><code>[options]</code>：可选的标志，如 <code>-m</code>用来设置文件的权限模式。</li><li><code>[major minor]</code>：设备的节点号。主节点号和次节点号用于识别设备类型。对于字符设备，主节点号通常表示设备类，而次节点号表示特定的设备。</li></ul></li></ul><h3 id="文件命令">2. 文件命令</h3><ul><li><p>touch：创建新文件、更新文件修改时间</p></li><li><p>cp</p></li><li><p>mv：移动并重命名文件</p></li><li><p>ln：链接文件</p><ul><li>硬链接：<code>ln source_file link_name</code></li><li>符号链接：<code>ln -s /full/path/to/source source_directory/link_name</code></li></ul></li><li><p>rm</p></li><li><p>cat</p></li><li><p>chown：改变文件或目录的所有者。<code>chown [options] [user:group] [file...]</code></p><ul><li><p><code>[options]</code>：</p><p><code>-R</code> 用于递归改变所有子目录和文件的所有者；</p><p><code>-h</code>：对于符号链接，改变链接本身的所有者，而不是链接指向的文件。</p></li><li><p><code>[user:group]</code>：指定新的所有者和组。用户名可以单独指定，或者与组名一起指定。如果只指定用户名，则默认组为用户所属的默认组。</p></li><li><p><code>[file...]</code>：要改变所有者的文件或目录列表。</p></li></ul></li><li><p>chgrp：改变文件或目录的组所有权。<code>chgrp [options] [group] [file...]</code></p></li><li><p>more/less：分页查看文件内容</p><ul><li>more：逐页显示文件，空格下一页，<code>b</code>上一页，<code>q</code>退出</li><li>less：滚动显示文件，功能更多。<ul><li>按 <code>/</code> ，输入搜索词搜索文件内容，按 <code>n</code>查找下一个匹配项，按 <code>p</code> 查找上一个匹配项。</li></ul></li></ul></li></ul><h4 id="文件权限">文件权限</h4><p>三个访问等级：</p><ul><li>用户</li><li>群组</li><li>其他</li></ul><p>三个权限：</p><ul><li>读 r</li><li>写 w</li><li>执行 x</li></ul><p>ls -l会展示文件权限</p><p>默认文件权限</p><p>file：-rw-r--r--</p><p>Directory：drwxr-xr-x</p><p>第一个字符表示文件类型，后续9个字符分别为u、g、o的rwx。</p><p>文件类型：</p><ul><li>-：常规文件</li><li>d：目录</li><li>l：链接</li><li>c：字符设备文件</li><li>b：块设备文件</li><li>p：管道</li><li>s：套接字</li></ul><p>修改权限：<code>chmod who operator what filename</code></p><ul><li>who:<ul><li>u：文件所有者</li><li>g：群组</li><li>o：系统其他用户</li><li>a：all</li></ul></li><li>operator:<ul><li>+：添加权限</li><li>-：删除权限</li><li>=: 设置明确权限</li></ul></li><li>what: rwx</li></ul><p>将u、g、o各自的rwx权限看为一个二进制数，可以用数字为它们赋予权限。</p><ul><li><p>r=4,w=2,x=1</p></li><li><p>chmod 765 file：u=rwx,g=rw,o=rx</p></li></ul><h4 id="文件编辑">文件编辑</h4><p>vi、emacs、gedit</p><h3 id="进程">3. 进程</h3><p>进程是一个正在执行的程序实例。由执行程序、它的当前值、状态信息以及通过操作系统管理此进程执行情况的资源组成。</p><ul><li><p>ps：报告进程状态</p></li><li><p>pstree：展示进程树</p></li><li><p>jobs, fg, bg, ctrl-z：任务控制</p><ul><li><p>jobs：查看当前 shell环境中所有在后台运行的任务列表，会给出每个任务的唯一编号。</p></li><li><p>fg %1：将一个后台任务调至前台执行，用%指定任务编号。</p></li><li><p>bg %1：将一个在后台暂停的任务继续运行在后台。</p></li><li><p>Ctrl+Z：将当前前台执行的任务挂起到后台。</p></li></ul></li><li><p>kill：杀死进程<code>kill [PID]</code>、发送信号给进程<code>kill [signal] [PID]</code></p></li><li><p>nohup：无视挂起信号运行指令</p></li><li><p>nice, renice：调整进程优先级</p><p>nice介于-20～19，影响调度优先级，nice越低优先级越高</p><ul><li><p>nice：启动一个新进程，并为其设置一个nice值。</p></li><li><p>renice：改变正在运行的进程的nice值。</p></li></ul></li><li><p>top：展示占用CPU最高的进程列表</p></li></ul><h3 id="寻找帮助">4. 寻找帮助</h3><p>man、info、--help</p><h3 id="重定向">5. 重定向</h3><p>标准输入、标准输出、标准错误</p><ul><li>对应的文件描述符：0, 1, 2</li></ul><p><code>&lt;、&gt;</code>：覆盖文件</p><p><code>&gt;&gt;</code>：追加到末尾</p><p><code>2&gt;</code>：将标准错误输出到文件，而标准输出仍然会输出到命令行</p><p><code>&gt;&amp;</code>：将标准输出和错误都输出到文件</p><p><code>2&gt;&amp;1</code>：将标准错误输出重定向到标准输出，与上个选项的区别是会打印到命令行</p><h3 id="管道">6. 管道</h3><p>一个进程的输出作为另一个进程的输入。</p><p><code>命令1|命令2</code>：命令1的输出会直接传递给命令2作为输入。</p><h3 id="高级命令">7. 高级命令</h3><ul><li><p>find：查找文件。<code>find [options] [path...] [-exec [command] &#123;&#125; +]</code></p><ul><li><code>[options]</code>：find命令的行为选项，如<code>-name</code>、<code>-type</code>、<code>-mtime</code> 等。<ul><li><code>-print</code>：打印找到的文件名。</li><li><code>-delete</code>：删除找到的文件。</li></ul></li><li><code>[path...]</code>：要搜索的目录路径。如果省略，默认在当前目录搜索。</li></ul></li><li><p>sed：通过模式匹配对文本进行处理。</p></li><li><p>grep：在文本文件中搜索指定的文本字符串。<code>grep [options] [pattern] [file...]</code></p><ul><li>选项：<ul><li><code>-i</code>：忽略大小写。</li><li><code>-v</code>：反转匹配，只显示不匹配的行。</li><li><code>-c</code>：计数，只输出匹配行的数量。</li><li><code>-n</code>：显示匹配行及其行号。</li><li><code>-l</code>：只输出包含匹配字符串的文件名。</li><li><code>-L</code>：只输出不包含匹配字符串的文件名。</li><li><code>-r</code> 或 <code>-R</code>：递归搜索目录中的所有文件。</li><li><code>-E</code>：使用扩展正则表达式。</li><li><code>-o</code>：只输出匹配到的部分，而不是整行内容。</li></ul></li></ul></li></ul><p>基本正则表达式：</p><ul><li><code>.</code>：匹配任意单个字符。<ul><li>例子：<code>grep '.$' file.txt</code> 将匹配 file.txt中以任意字符结尾的行。</li></ul></li><li><code>*</code>：匹配前一个字符出现零次或多次。<ul><li>例子：<code>grep 'o*' file.txt</code> 将匹配 file.txt中包含零个或多个 “o” 的行。</li></ul></li><li><code>^</code>：匹配行的开始。<ul><li>例子：<code>grep '^A' file.txt</code> 将匹配 file.txt 中以 “A”开头的行。</li></ul></li><li><code>$</code>：匹配行的结束。<ul><li>例子：<code>grep 'B$' file.txt</code> 将匹配 file.txt 中以 “B”结尾的行。</li></ul></li><li><code>[abc]</code>：匹配方括号内的任意一个字符。<ul><li>例子：<code>grep '[abc]' file.txt</code> 将匹配 file.txt 中包含“a”、“b” 或 “c” 的行。</li></ul></li><li><code>[^abc]</code>：匹配不在方括号内的任意一个字符。<ul><li>例子：<code>grep '[^abc]' file.txt</code> 将匹配 file.txt 中不包含“a”、“b” 或 “c” 的行。</li></ul></li><li><code>\</code>：转义字符，用于匹配特殊字符。<ul><li>例子：<code>grep '\\.' file.txt</code> 将匹配 file.txt中包含一个反斜杠后跟一个点（<code>.</code>）的行。</li></ul></li><li><code>()</code>：标记子表达式的开始和结束。<ul><li>例子：<code>grep '(abc|def)' file.txt</code> 将匹配 file.txt 中包含“abc” 或 “def” 的行。</li></ul></li><li><code>|</code>：逻辑或操作符。<ul><li>例子：<code>grep 'A|B' file.txt</code> 将匹配 file.txt 中包含 “A” 或“B” 的行。</li></ul></li><li><code>\&lt;</code>：匹配单词的开始（前面必须有一个单词边界）。<ul><li>例子：<code>grep '\&lt;word' file.txt</code> 将匹配 file.txt 中以“word” 开头的行，其中 “word” 是一个单词。</li></ul></li><li><code>\&gt;</code>：匹配单词的结束（后面必须有一个单词边界）。<ul><li>例子：<code>grep '\&gt;word' file.txt</code> 将匹配 file.txt 中以“word” 结尾的行，其中 “word” 是一个单词。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;飞萤扑火，向死而生。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux系统编程" scheme="http://example.com/categories/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>云计算_5_云数据中心</title>
    <link href="http://example.com/2024/04/05/%E4%BA%91%E8%AE%A1%E7%AE%97/5-%E4%BA%91%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/"/>
    <id>http://example.com/2024/04/05/%E4%BA%91%E8%AE%A1%E7%AE%97/5-%E4%BA%91%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/</id>
    <published>2024-04-05T04:00:00.000Z</published>
    <updated>2024-06-21T07:11:10.378Z</updated>
    
    <content type="html"><![CDATA[<p>飞萤扑火，向死而生。</p><span id="more"></span><h1 id="云数据中心">5-云数据中心</h1><h2 id="基本设计">1. 基本设计</h2><p>外部：不间断的电源、足够带宽的网络</p><p>内部：散热（保证设备安全）</p><h2 id="云数据中心特征">2. 云数据中心特征</h2><h3 id="特征">2.0 特征</h3><ol type="1"><li><p>高设备利用率</p><ul><li><p>通过虚拟化整合云平台系统与数据中心硬件资源，减少物理服务器数量</p></li><li><p>优化资源利用率、简化管理，降低成本、快速响应业务需求的变化等</p></li><li><p>较大的数据中心有更低的单位运营成本：网络、存储、管理</p></li></ul></li><li><p>绿色节能</p><ul><li><p>能源</p></li><li><p>功耗：服务器、空调</p></li></ul></li><li><p>自动化管理</p><ul><li><p>人力成本是大多数管理数据中心站点最大成本因素</p></li><li><p>无人值守，远程管理</p></li><li><p>门禁、通风、温度、湿度、电力均可远程调度与控制</p></li></ul></li><li><p>高可用性</p><ul><li><p>各个部分的冗余、容错、容灾设计</p></li><li><p>扩展和升级时，保持正常运行</p></li></ul></li></ol><h3 id="绿色节能技术">2.1 绿色节能技术</h3><h4 id="耗电原因">耗电原因</h4><ul><li>技术因素<ul><li>云计算中心规模不断扩大，硬件设备数量激增，导致总体耗电量大幅上升。</li><li>为了保证高可用性和稳定性，通常采用功耗相对较高的高性能处理器、内存和存储设备。</li><li>虚拟化技术的广泛应用也带来了额外的能耗。</li></ul></li><li>商业因素<ul><li>客户需求不断增长<spanclass="math inline">\(\rightarrow\)</span>数据中心建设、扩容。</li><li>激烈的市场竞争<spanclass="math inline">\(\rightarrow\)</span>不断优化更新技术。</li></ul></li></ul><h4 id="采取措施">采取措施</h4><ol type="1"><li><p>优化技术</p><ul><li>使用更高能效设备、服务器架构和更智能的资源调度策略。</li></ul></li><li><p>节约能源</p><ul><li><p>在数据中心设计和运营中充分考虑节能因素。</p><p>例如，采用更为合理的布局和散热系统设计，减少冷却能耗；</p><p>合理安排数据中心工作时间，充分利用自然冷却等方式降低能耗。</p></li></ul></li><li><p>提升硬件使用率</p><ul><li><p>例如，推广容器化技术，实现应用打包和快速部署；</p><p>采用无服务器架构，减少闲置服务器数量等。</p></li></ul></li><li><p>可再生能源</p></li><li><p>绿色云生态系统</p><ul><li>与硬件厂商、政府部门等共同合作，构建一个绿色云生态系统。通过政策引导、技术创新和市场机制等手段，推动整个行业的绿色发展。</li></ul></li></ol><h4 id="具体节能技术">具体节能技术</h4><ul><li>配电系统：高压直流配电、市电直供配电</li><li>空调系统节能：高温回风、精确制冷、自然冷空调</li><li>集装箱数据中心节能技术<ul><li>服务器设备、网络设备、空调设备、供电设备等高密度地装入固定尺寸的集装箱中</li><li>高密度、模块化、按需快速部署、移动便捷</li></ul></li><li>管理系统节能策略和算法：供电管理</li><li>新能源应用</li></ul><h3 id="自动化管理">2.2 自动化管理</h3><p>目标：使得在规模较大的情况下，实现较少人员对数据中心的高度智能管理。</p><p>工作范围：按需分配/收回资源；自动配电、冷却、消防等。</p><p>具体内容：资源的自动化调度和对业务的灵活响应。</p><ul><li>既需要单业务自治，也需要对业务和资源进行全局控制和协调。</li></ul><h4 id="特征和内容">特征和内容</h4><ol type="1"><li><p>全面可视化：多层级运行时视图，全面掌握数据中心资产、配置和各层次依赖关系的现状</p></li><li><p>自动的控制执行：全面自动化流程</p></li><li><p>多层次的无缝集成：流畅地自动执行在不同层次和组成部分之间地各种处理流程，快速的协调数据中心内外的所有变更，实现端到端的流程管理</p></li><li><p>综合与实时的报告：提供全面综合和透视依赖关系的报告提高管理水平</p></li><li><p>全生命周期支持：自动化整个“计划—实施—检查—更正”的IT流程生命周期</p></li></ol><p>实现的三个阶段：</p><ol type="1"><li><p>IT服务操作：监控和管理IT基础设施的广义集合</p><ul><li><p>目标：生成有效的全局IT支撑架构，提高IT服务质量，对活动和过程进行协调和执行</p></li><li><p>活动和过程：事故管理、事件监控和管理、问题管理</p></li></ul></li><li><p>IT服务管理：制定设施间的交互和协作处理，确保IT服务符合标准规范</p><ul><li><p>定义：根据客户需求的层次确保IT服务质量的一系列过程</p></li><li><p>主题：服务管理、服务层管理、IT资产管理、财务管理</p></li></ul></li><li><p>数据中心自动化：维护IT环境，定制、检查和执行服务层协议</p></li></ol><p>采用数据中心自动化工具必须具备如下条件</p><ul><li>管理系统</li><li>定义过程</li><li>认知非自动化过程的成本</li><li>内部流程资源</li></ul><h3 id="容灾备份">2.3 容灾备份</h3><table><thead><tr class="header"><th><strong>对比维度</strong></th><th><strong>备份</strong></th><th><strong>容灾</strong></th></tr></thead><tbody><tr class="odd"><td>使用目的</td><td>避免数据丢失，一般通过快照、备份等技术构建数据的数据备份副本，故障时可以通过数据的历史副本恢复用户数据。</td><td>避免业务中断，一般是通过复制技术（应用层复制、主机I/O层复制、存储层复制）在异地构建业务的备用主机和数据，主站点故障时备用站点可以接管业务。</td></tr><tr class="even"><td>使用场景</td><td>针对病毒入侵、人为误删除、软硬件故障等场景，可将数据恢复到任意备份点。</td><td>针对软硬件故障以及海啸、火灾、地震等重大自然灾害，运行故障切换，尽快恢复业务。源端可用区恢复正常时，可轻松利用故障恢复能力重新切换回到源端可用区。</td></tr><tr class="odd"><td>成本</td><td>通常是生产系统的1~2%。</td><td>通常是生产系统的20%~100%（根据不同的RPO/RTO要求而定），高级别的双活容灾，要求备用站点也要部署一套和主站点相同的业务系统，基础设施成本需要翻倍计算。</td></tr></tbody></table><p>容灾备份：</p><p>异地建立、维护备份存储系统，利用地理分离保证系统和数据对灾难性事件的抵御能力。</p><ul><li>容灾系统的抵抗程度：数据级容灾和应用级容灾。</li></ul><h4 id="关键技术">关键技术</h4><p>技术核心：复制数据</p><ul><li><p>镜像：将符合指定规则的报文复制到目的端口</p></li><li><p>快照：拷贝指定数据集合，用于数据备份恢复、提供额外访问通道。</p></li><li><p>基于IP的SAN的远程数据容灾备份技术：主数据中心复制到备份数据中心。</p></li><li><p>数据库复制。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;飞萤扑火，向死而生。&lt;/p&gt;</summary>
    
    
    
    <category term="云计算" scheme="http://example.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
  </entry>
  
</feed>
